/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkjs_webpack_c3_client_node"] = self["webpackChunkjs_webpack_c3_client_node"] || []).push([["node_modules_c3_ui_UiSdlMapReact_tsx_uiComponentLibraryReact"],{

/***/ "./node_modules/@c3/ui/UiSdlMapReact.tsx_uiComponentLibraryReact":
/*!***********************************************!*\
  !*** ./node_modules/@c3/ui/UiSdlMapReact.tsx ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __GetDependency__: () => (/* binding */ _get__),\n/* harmony export */   __ResetDependency__: () => (/* binding */ _reset__),\n/* harmony export */   __RewireAPI__: () => (/* binding */ _RewireAPI__),\n/* harmony export */   __Rewire__: () => (/* binding */ _set__),\n/* harmony export */   __get__: () => (/* binding */ _get__),\n/* harmony export */   __set__: () => (/* binding */ _set__),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fillMarkersAndLayers: () => (/* binding */ fillMarkersAndLayers)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"webpack/sharing/consume/default/react_uiComponentLibraryReact\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isEmpty */ \"webpack/sharing/consume/default/lodash/isEmpty/lodash/isEmpty_uiComponentLibraryReact\");\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/get */ \"webpack/sharing/consume/default/lodash/get/lodash/get_uiComponentLibraryReact\");\n/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_get__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _c3_ui_UiSdlMap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @c3/ui/UiSdlMap */ \"webpack/container/remote/@c3/ui/UiSdlMap_uiComponentLibraryReact\");\n/* harmony import */ var _c3_ui_UiSdlMap__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlMap__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _c3_sdl_react_hooks_useTranslate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @c3/sdl-react/hooks/useTranslate */ \"./node_modules/@c3/sdl-react/hooks/useTranslate.js_uiComponentLibraryReact\");\n/* harmony import */ var _c3_ui_UiSdlStylePropertiesContext__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @c3/ui/UiSdlStylePropertiesContext */ \"webpack/sharing/consume/default/@c3/ui/UiSdlStylePropertiesContext_uiComponentLibraryReact\");\n/* harmony import */ var _c3_ui_UiSdlStylePropertiesContext__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlStylePropertiesContext__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _c3_ui_UiSdlMapStyle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @c3/ui/UiSdlMapStyle */ \"webpack/container/remote/@c3/ui/UiSdlMapStyle_uiComponentLibraryReact\");\n/* harmony import */ var _c3_ui_UiSdlMapStyle__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlMapStyle__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _c3_sdl_react_hooks_useConfig__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @c3/sdl-react/hooks/useConfig */ \"./node_modules/@c3/sdl-react/hooks/useConfig.js_uiComponentLibraryReact\");\n/* harmony import */ var _c3_sdl_react_reactComponents_map_SDLMap__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @c3/sdl-react/reactComponents/map/SDLMap */ \"./node_modules/@c3/sdl-react/reactComponents/map/SDLMap.jsx_uiComponentLibraryReact\");\n/* harmony import */ var _c3_sdl_react_reactComponents_SDLSpinner__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @c3/sdl-react/reactComponents/SDLSpinner */ \"./node_modules/@c3/sdl-react/reactComponents/SDLSpinner.jsx_uiComponentLibraryReact\");\n/* harmony import */ var _c3_sdl_react_reactComponents_menu_navMenuHelper__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @c3/sdl-react/reactComponents/menu/navMenuHelper */ \"./node_modules/@c3/sdl-react/reactComponents/menu/navMenuHelper.js_uiComponentLibraryReact\");\n/* harmony import */ var gradstop__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! gradstop */ \"./node_modules/gradstop/index.js_uiComponentLibraryReact\");\n/* harmony import */ var gradstop__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(gradstop__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _c3_css_library_components_map_scss__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @c3/css-library/components/_map.scss */ \"./node_modules/@c3/css-library/components/_map.scss_uiComponentLibraryReact\");\n/*\n * Copyright 2009-2024 C3 AI (www.c3.ai). All Rights Reserved.\n * This material, including without limitation any software, is the confidential trade secret and proprietary\n * information of C3 and its licensors. Reproduction, use and/or distribution of this material in any form is\n * strictly prohibited except as set forth in a written license agreement with C3 and/or its authorized distributors.\n * This material may be covered by one or more patents or pending patent applications.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Map from operator key to function with corresponding expression.\n */\nconst OPERATORS_MAP = Object.freeze({\n  EQUALS: (x, y) => x == y,\n  LESS_THAN: (x, y) => x < y,\n  GREATER_THAN: (x, y) => x > y,\n  LESS_THAN_OR_EQUAL_TO: (x, y) => x <= y,\n  GREATER_THAN_OR_EQUAL_TO: (x, y) => x >= y\n});\n\n/**\n * Initializes an array of markers to display on the map. Each marker will\n * contain `latitude` and `longitude` properties, as well as a `data` property\n * containing the original data object.\n *\n * @param objs The map data that will be displayed via markers.\n * @param dataSpec The data spec configuration\n *\n * @returns the initialized marker data.\n */\nconst initializeMarkers = (objs, dataSpec) => {\n  var _dataSpec$longitude, _dataSpec$latitude, _dataSpec$layerAttrib;\n  const longitudeField = dataSpec === null || dataSpec === void 0 || (_dataSpec$longitude = dataSpec.longitude) === null || _dataSpec$longitude === void 0 ? void 0 : _dataSpec$longitude.fieldName;\n  const latitudeField = dataSpec === null || dataSpec === void 0 || (_dataSpec$latitude = dataSpec.latitude) === null || _dataSpec$latitude === void 0 ? void 0 : _dataSpec$latitude.fieldName;\n  const layerAttributeField = dataSpec === null || dataSpec === void 0 || (_dataSpec$layerAttrib = dataSpec.layerAttribute) === null || _dataSpec$layerAttrib === void 0 ? void 0 : _dataSpec$layerAttrib.fieldName;\n  // Only add markers to map if both longitude and latitude fields are provided.\n  if (!objs || !longitudeField || !latitudeField) {\n    return [];\n  }\n  // Create a new list of objects based on the original data.\n  return objs.map(obj => ({\n    // Store the original object on a special `data` property.\n    data: obj,\n    // All markers are initialized with `latitude` and `longitude`.\n    longitude: _get__(\"get\")(obj, longitudeField),\n    latitude: _get__(\"get\")(obj, latitudeField),\n    layerAttribute: _get__(\"get\")(obj, layerAttributeField)\n  })).filter(({\n    latitude,\n    longitude\n  }) => latitude != null && longitude != null);\n};\n\n/**\n * Initializes an array of layers to display on the map. Each Layer can contain either a polygon\n * or an array of assets or both, that will be filtered on or off when selected. This function\n * fills each layer with its corresponding markers if they exist based on the layer attribute field\n * @param layers The layers to be filled.\n * @param markers The markers to filter into layers\n * @param dataSpec The data spec configuration\n *\n * @returns the filled layers.\n */\nconst fillLayers = (layers, markers, dataSpec) => {\n  if (!layers || !markers) {\n    return;\n  }\n  layers.forEach(layer => {\n    const layerMarkers = [];\n    markers.forEach(marker => {\n      if (marker.layerAttribute === layer.layerAttribute) {\n        layerMarkers.push(marker);\n      }\n    });\n    layer.isSelected = layer.isOnByDefault;\n    layer.layerMarkers = layerMarkers;\n  });\n};\n\n/**\n * Set the color for each marker on the map to be the default color. This method\n * mutates the marker data passed to it.\n *\n * @param markers The map data that will be displayed via markers.\n * @param defaultColor The default color to be used for a marker.\n */\nconst setMarkerDefaultColors = (markers, defaultColor) => {\n  markers.forEach(marker => {\n    marker.color = defaultColor;\n  });\n};\nconst hasConditionalMarkerColors = colorConfigurationStrategy => {\n  return (colorConfigurationStrategy === null || colorConfigurationStrategy === void 0 ? void 0 : colorConfigurationStrategy.type) === 'UiSdlMapMarkerConditionalColorSetting';\n};\nconst hasCategoricalMarkerColors = colorConfigurationStrategy => {\n  return (colorConfigurationStrategy === null || colorConfigurationStrategy === void 0 ? void 0 : colorConfigurationStrategy.type) === 'UiSdlMapMarkerCategoricalColorSetting';\n};\nconst hasGradientMarkerColors = colorConfigurationStrategy => {\n  return (colorConfigurationStrategy === null || colorConfigurationStrategy === void 0 ? void 0 : colorConfigurationStrategy.type) === 'UiSdlMapMarkerGradientColorSetting';\n};\n\n/**\n * Initializes the legend of the map\n *\n * @param legend The legend configuration\n * @param dataSpec The data spec configuration\n *\n * @returns the initialized legend data.\n */\nconst initializeLegend = (legend, dataSpec) => {\n  var _dataSpec$markerColor;\n  const colorConfigurationStrategy = dataSpec === null || dataSpec === void 0 || (_dataSpec$markerColor = dataSpec.markerColor) === null || _dataSpec$markerColor === void 0 ? void 0 : _dataSpec$markerColor.colorConfigurationStrategy;\n  if (_get__(\"hasCategoricalMarkerColors\")(colorConfigurationStrategy)) {\n    const {\n      categoryColors\n    } = colorConfigurationStrategy;\n    const groups = categoryColors === null || categoryColors === void 0 ? void 0 : categoryColors.map(category => ({\n      name: category.label,\n      color: category.color,\n      id: category.label\n    }));\n    if (_get__(\"isEmpty\")(groups)) {\n      return undefined;\n    }\n    return {\n      ...legend,\n      groups\n    };\n  } else {\n    return undefined;\n  }\n};\n\n/**\n * Set the color for each marker on the map based on a configured threshold\n * value. This method mutates the marker data passed to it.\n *\n * @param markers The map data that will be displayed via markers.\n * @param fieldName The field from the data type to be used to determine a marker's value.\n * @param defaultColor The default color to be used for a marker.\n * @param conditionalColorStrategy The configuration to use to determine the color of a marker.\n */\nconst setMarkerConditionalColors = (markers, fieldName, defaultColor, conditionalColorStrategy) => {\n  const {\n    operator,\n    threshold,\n    thresholdColor\n  } = conditionalColorStrategy;\n  const operatorExpression = _get__(\"OPERATORS_MAP\")[operator];\n  // If mis-configured, fallback to default colors.\n  if (!operatorExpression || !thresholdColor || isNaN(parseFloat(threshold))) {\n    _get__(\"setMarkerDefaultColors\")(markers, defaultColor);\n    return;\n  }\n  markers.forEach(marker => {\n    const dataValue = _get__(\"get\")(marker.data, fieldName);\n    // Guard against non-numeric values, i.e. the empty string\n    const operatorEvaluation = !isNaN(parseFloat(dataValue)) && operatorExpression(dataValue, threshold);\n    // Only set marker color to be thresholdColor if operator is true\n    marker.color = operatorEvaluation ? thresholdColor : defaultColor;\n  });\n};\nconst chooseGradient = (gradient, gradients) => {\n  if (!(gradient in gradients) && gradient !== 'no-gradient') {\n    return 'gradient1';\n  } else {\n    return gradient;\n  }\n};\n\n/**\n * Set the color for each marker on the map based on a configured color gradient.\n * This method mutates the marker data passed to it.\n *\n * @param markers The map data that will be displayed via markers.\n * @param fieldName The field from the data type to be used to determine a marker's value.\n * @param defaultColor The default color to be used for a marker.\n * @param conditionalColorStrategy The configuration to use to determine the color of a marker.\n */\nconst setMarkerGradientColors = (markers, fieldName, defaultColor, conditionalColorStrategy) => {\n  const {\n    minimum,\n    maximum,\n    gradient\n  } = conditionalColorStrategy;\n\n  // If mis-configured, fallback to default colors.\n  if (minimum == undefined || maximum == undefined || !gradient || minimum >= maximum) {\n    _get__(\"setMarkerDefaultColors\")(markers, defaultColor);\n    return;\n  }\n\n  /*\n   * Using a range of [0,100] for the gradient so that a data value can be used a percentage\n   * of the (maximum - minimum) range\n   */\n  const numSteps = 101;\n  const gradients = {\n    gradient1: ['#49BFA9', '#ED6921', '#DB1C3C'],\n    'gradient1-inv': ['#DB1C3C', '#ED6921', '#49BFA9'],\n    gradient2: ['#ED6921', '#8D4BE3'],\n    'gradient2-inv': ['#8D4BE3', '#ED6921'],\n    gradient3: ['#8A90AB', '#DB1C3C'],\n    'gradient3-inv': ['#DB1C3C', '#8A90AB']\n  };\n  const colorGradient = _get__(\"gradstop\")({\n    stops: numSteps,\n    inputFormat: 'hex',\n    colorArray: gradients[_get__(\"chooseGradient\")(gradient, gradients)]\n  });\n  markers.forEach(marker => {\n    const dataValue = _get__(\"get\")(marker.data, fieldName);\n    // Guard against non-numeric values, i.e. the empty string\n    const isInvalidValue = isNaN(parseFloat(dataValue));\n    if (dataValue < minimum || dataValue > maximum || isInvalidValue) {\n      marker.color = defaultColor;\n    } else {\n      let referenceValue = dataValue - minimum;\n\n      // Calculating the referenceValue as a percentage of (maximum - minimum range)\n      referenceValue = Math.round(referenceValue / (maximum - minimum) * 100);\n      const markerColor = colorGradient[referenceValue];\n      marker.color = markerColor || defaultColor;\n    }\n  });\n};\n\n/**\n * Set the color for each marker on the map based on categorical values of a specified field\n *\n * @param markers The map data that will be displayed via markers.\n * @param fieldName The field from the data type to be used to determine a marker's value.\n * @param defaultColor The default color to be used for a marker.\n * @param categoricalColorStrategy The configuration to use to determine the color of a marker.\n */\nconst setMarkerCategoricalColors = (markers, fieldName, defaultColor, categoricalColorStrategy) => {\n  const {\n    categoryColors\n  } = categoricalColorStrategy;\n  const colorDict = {};\n  categoryColors.forEach(category => colorDict[category.label] = category.color);\n  markers.forEach(marker => {\n    const dataValue = _get__(\"get\")(marker.data, fieldName);\n    marker.color = colorDict[dataValue] || defaultColor;\n  });\n};\n\n/**\n * Set the color for each marker on the map. This method mutates the marker data\n * passed to it.\n *\n * @param markers The map data that will be displayed via markers.\n * @param defaultColor The default color to be used for a marker.\n * @param colorConfiguration The configuration to use to determine the color of a marker.\n */\nconst setMarkerColors = (markers, defaultColor, colorConfiguration) => {\n  const colorConfigurationStrategy = colorConfiguration === null || colorConfiguration === void 0 ? void 0 : colorConfiguration.colorConfigurationStrategy;\n  const colorFieldName = colorConfiguration === null || colorConfiguration === void 0 ? void 0 : colorConfiguration.fieldName;\n  if (_get__(\"hasConditionalMarkerColors\")(colorConfigurationStrategy)) {\n    _get__(\"setMarkerConditionalColors\")(markers, colorFieldName, defaultColor, colorConfigurationStrategy);\n  } else if (_get__(\"hasCategoricalMarkerColors\")(colorConfigurationStrategy)) {\n    _get__(\"setMarkerCategoricalColors\")(markers, colorFieldName, defaultColor, colorConfigurationStrategy);\n  } else if (_get__(\"hasGradientMarkerColors\")(colorConfigurationStrategy)) {\n    _get__(\"setMarkerGradientColors\")(markers, colorFieldName, defaultColor, colorConfigurationStrategy);\n  } else {\n    _get__(\"setMarkerDefaultColors\")(markers, defaultColor);\n  }\n};\n\n/**\n * Set the opacity for markers on the map.\n *\n * @param markers The map data that will be displayed via markers.\n * @param defaultOpacity The default opacity to be used for a marker.\n * @param markerOpacity The configuration to use to determine the opacity of a marker.\n */\nconst setMarkerOpacity = (markers, markerOpacity, defaultOpacity) => {\n  const actualOpacity = markerOpacity || defaultOpacity;\n  markers.forEach(marker => {\n    marker.opacity = actualOpacity;\n  });\n};\n\n/**\n * Set the label for markers on the map.\n *\n * @param markers The map data that will be displayed via markers.\n * @param labelConfiguration The configuration to use to determine the label of a marker.\n */\nconst setMarkerLabel = (markers, labelConfiguration) => {\n  const labelField = labelConfiguration === null || labelConfiguration === void 0 ? void 0 : labelConfiguration.fieldName;\n  if (!labelField) {\n    return;\n  }\n  markers.forEach(marker => {\n    marker.label = _get__(\"get\")(marker.data, labelField);\n  });\n};\n\n/**\n * Set the image for markers on the map.\n *\n * @param markers The map data that will be displayed via markers.\n * @param imageConfiguration The configuration to use to determine the image of a marker.\n */\nconst setMarkerImage = (markers, imageConfiguration) => {\n  const imageField = imageConfiguration === null || imageConfiguration === void 0 ? void 0 : imageConfiguration.fieldName;\n  if (!imageField) {\n    return;\n  }\n  markers.forEach(marker => {\n    const image = _get__(\"get\")(marker.data, imageField);\n    marker.image = _get__(\"getUrlWithoutStartSlash\")(image);\n  });\n};\nconst setMarkerShapes = (markers, shapeConfiguration, defaultMarkerShape) => {\n  const shapeFieldName = shapeConfiguration === null || shapeConfiguration === void 0 ? void 0 : shapeConfiguration.fieldName;\n  const categoryShapes = shapeConfiguration !== null && shapeConfiguration !== void 0 && shapeConfiguration.categoryShapes && Array.isArray(shapeConfiguration === null || shapeConfiguration === void 0 ? void 0 : shapeConfiguration.categoryShapes) ? shapeConfiguration === null || shapeConfiguration === void 0 ? void 0 : shapeConfiguration.categoryShapes : [];\n  const shapeDict = {};\n  categoryShapes.forEach(category => shapeDict[category.label] = category.shape);\n  markers.forEach(marker => {\n    const dataValue = _get__(\"get\")(marker.data, shapeFieldName);\n    marker.shape = shapeDict[dataValue] || defaultMarkerShape;\n  });\n};\n\n/**\n * Sets the tooltip data for each marker on the map, such as the tooltip header,\n * sub-header, and additional fields to render in the tooltip body. This method\n * mutates the marker data passed to it.\n *\n * @param markers The map data that will be displayed via markers.\n * @param dataSpec The component's data spec configuration.\n */\nconst setMarkerTooltips = (markers, dataSpec) => {\n  markers.forEach(marker => {\n    var _dataSpec$tooltipHead, _dataSpec$tooltipSubH, _dataSpec$tooltipAddi;\n    if (!marker.data) {\n      return;\n    }\n    if (dataSpec !== null && dataSpec !== void 0 && (_dataSpec$tooltipHead = dataSpec.tooltipHeader) !== null && _dataSpec$tooltipHead !== void 0 && _dataSpec$tooltipHead.fieldName) {\n      marker.tooltipHeader = _get__(\"get\")(marker.data, dataSpec.tooltipHeader.fieldName);\n    }\n    if (dataSpec !== null && dataSpec !== void 0 && (_dataSpec$tooltipSubH = dataSpec.tooltipSubHeader) !== null && _dataSpec$tooltipSubH !== void 0 && _dataSpec$tooltipSubH.fieldName) {\n      marker.tooltipSubHeader = _get__(\"get\")(marker.data, dataSpec.tooltipSubHeader.fieldName);\n    }\n    if ((dataSpec === null || dataSpec === void 0 || (_dataSpec$tooltipAddi = dataSpec.tooltipAdditionalFields) === null || _dataSpec$tooltipAddi === void 0 ? void 0 : _dataSpec$tooltipAddi.length) > 0) {\n      marker.tooltipAdditionalFields = dataSpec.tooltipAdditionalFields.filter(({\n        fieldName\n      }) => fieldName).map(({\n        fieldName,\n        label\n      }) => ({\n        label,\n        value: _get__(\"get\")(marker.data, fieldName)\n      }));\n    }\n  });\n};\n\n/**\n * Placeholder style to prevent tile rendering during development and testing.\n */\nconst DEV_MODE_MAP_STYLE = {\n  version: 8,\n  sources: {\n    'raster-tiles': {\n      type: 'raster',\n      tiles: ['https://localhost:8080/tiles'],\n      tileSize: 256,\n      attribution: 'C3'\n    }\n  },\n  layers: []\n};\nconst fillMarkersAndLayers = props => {\n  var _props$markerData, _props$defaultMarkerC, _get__2, _props$defaultMarkerS, _get__3;\n  const {\n    dataSpec\n  } = props;\n  const markers = _get__(\"initializeMarkers\")((_props$markerData = props.markerData) === null || _props$markerData === void 0 ? void 0 : _props$markerData.objs, dataSpec);\n  _get__(\"fillLayers\")(props.layers, markers, dataSpec);\n  _get__(\"setMarkerColors\")(markers, (_props$defaultMarkerC = props.defaultMarkerColor) !== null && _props$defaultMarkerC !== void 0 ? _props$defaultMarkerC : (_get__2 = _get__(\"defaultValues\")) === null || _get__2 === void 0 ? void 0 : _get__2.defaultMarkerColor, dataSpec === null || dataSpec === void 0 ? void 0 : dataSpec.markerColor);\n  _get__(\"setMarkerShapes\")(markers, dataSpec === null || dataSpec === void 0 ? void 0 : dataSpec.markerShape, (_props$defaultMarkerS = props.defaultMarkerShape) !== null && _props$defaultMarkerS !== void 0 ? _props$defaultMarkerS : (_get__3 = _get__(\"defaultValues\")) === null || _get__3 === void 0 ? void 0 : _get__3.defaultMarkerShape);\n  _get__(\"setMarkerOpacity\")(markers, dataSpec === null || dataSpec === void 0 ? void 0 : dataSpec.markerOpacity, 1);\n  _get__(\"setMarkerLabel\")(markers, dataSpec === null || dataSpec === void 0 ? void 0 : dataSpec.markerLabel);\n  _get__(\"setMarkerImage\")(markers, dataSpec === null || dataSpec === void 0 ? void 0 : dataSpec.markerImage);\n  _get__(\"setMarkerTooltips\")(markers, dataSpec);\n  return markers;\n};\nconst UiSdlMap = props => {\n  var _mapboxConfig$accessT;\n  const translate = _get__(\"useTranslate\")(props);\n  const styleProperties = _get__(\"useContext\")(_get__(\"UiSdlStylePropertiesContext\"));\n  const mapboxConfig = _get__(\"useConfig\")('UiSdlMapbox', 'configWithAccessToken', {\n    this: {}\n  }, ['map']);\n  const configLoaded = mapboxConfig !== undefined;\n  const apiUrl = mapboxConfig === null || mapboxConfig === void 0 ? void 0 : mapboxConfig.url;\n  const apiKey = (_mapboxConfig$accessT = mapboxConfig === null || mapboxConfig === void 0 ? void 0 : mapboxConfig.accessToken) !== null && _mapboxConfig$accessT !== void 0 ? _mapboxConfig$accessT : 'NOT_SET';\n  const {\n    dataSpec\n  } = props;\n  const markers = _get__(\"fillMarkersAndLayers\")(props);\n  const legend = _get__(\"initializeLegend\")(props.legend, dataSpec);\n  const fixedCentering = props.centering;\n  // We need to know if we have a key before we render.\n  if (configLoaded) {\n    let mapStyle = {};\n    if (apiKey === 'NOT_SET') {\n      mapStyle = _get__(\"DEV_MODE_MAP_STYLE\");\n    } else if (props.mapStyle === 'THEMED') {\n      var _styleProperties$them;\n      /**\n       * If the configured map style is THEMED, we obtain the current theme category in use by the application\n       * and set the map style accordingly. Otherwise, use the configured style as is.\n       */\n      const currentThemeCategory = (_styleProperties$them = styleProperties.themeCategory) === null || _styleProperties$them === void 0 ? void 0 : _styleProperties$them.toUpperCase();\n      mapStyle = _get__(\"UiSdlMapStyle\")[currentThemeCategory];\n    } else {\n      mapStyle = props.mapStyle;\n    }\n    return /*#__PURE__*/_get__(\"React\").createElement(_get__(\"SDLMap\"), {\n      apiKey: apiKey,\n      apiUrl: apiUrl,\n      height: props.height,\n      hideControls: props.hideControls,\n      legend: legend,\n      fixedCentering: fixedCentering,\n      mapStyle: mapStyle,\n      markers: markers,\n      layers: props.layers,\n      title: props.title,\n      transitionDuration: props.transitionDuration,\n      zoom: props.zoom\n    });\n  }\n  return /*#__PURE__*/_get__(\"React\").createElement(_get__(\"SDLSpinner\"), {\n    loadingText: translate({\n      key: 'UiSdlMap.spinner.loadingText'\n    }),\n    isDataLoading: true\n  }, /*#__PURE__*/_get__(\"React\").createElement(_get__(\"SDLMap\"), {\n    apiKey: 'NOT_SET',\n    legend: undefined,\n    mapStyle: _get__(\"DEV_MODE_MAP_STYLE\"),\n    markers: [],\n    title: props.title\n  }));\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_get__(\"UiSdlMap\"));\nfunction _getGlobalObject() {\n  try {\n    if (!!__webpack_require__.g) {\n      return __webpack_require__.g;\n    }\n  } catch (e) {\n    try {\n      if (!!window) {\n        return window;\n      }\n    } catch (e) {\n      return this;\n    }\n  }\n}\n;\nvar _RewireModuleId__ = null;\nfunction _getRewireModuleId__() {\n  if (_RewireModuleId__ === null) {\n    let globalVariable = _getGlobalObject();\n    if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {\n      globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0;\n    }\n    _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++;\n  }\n  return _RewireModuleId__;\n}\nfunction _getRewireRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__;\n}\nfunction _getRewireExportsRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__;\n}\nconst _sync_internal_state_with_exports__ = false;\nconst _exports_to_reset__ = new Map();\nfunction _record_export_to_reset__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  if (!_exports_to_reset__.has(variableName)) {\n    _exports_to_reset__.set(variableName, value);\n  }\n}\nfunction _restore_exports__() {\n  const entries = _exports_to_reset__.entries();\n  for (const [variableName, value] of entries) {\n    exports[variableName] = value;\n  }\n  _exports_to_reset__.clear();\n}\nfunction _maybe_update_export__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  _record_export_to_reset__(variableName, exports[variableName]);\n  exports[variableName] = value;\n}\nfunction _getRewiredData__() {\n  let moduleId = _getRewireModuleId__();\n  let registry = _getRewireRegistry__();\n  let rewireData = registry[moduleId];\n  if (!rewireData) {\n    registry[moduleId] = Object.create(null);\n    rewireData = registry[moduleId];\n  }\n  let exportsRegistry = _getRewireExportsRegistry__();\n  if (!exportsRegistry[moduleId]) {\n    exportsRegistry[moduleId] = _restore_exports__;\n  }\n  return rewireData;\n}\n(function registerResetAll() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable['__rewire_reset_all__']) {\n    theGlobalVariable['__rewire_reset_all__'] = function () {\n      theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n      const exportsRegistry = _getRewireExportsRegistry__();\n      for (const restoreFunc of Object.values(exportsRegistry)) {\n        restoreFunc();\n      }\n      theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n    };\n  }\n})();\nvar INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';\nlet _RewireAPI__ = {};\n(function () {\n  function addPropertyToAPIObject(name, value) {\n    Object.defineProperty(_RewireAPI__, name, {\n      value: value,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  addPropertyToAPIObject('__get__', _get__);\n  addPropertyToAPIObject('__GetDependency__', _get__);\n  addPropertyToAPIObject('__Rewire__', _set__);\n  addPropertyToAPIObject('__set__', _set__);\n  addPropertyToAPIObject('__reset__', _reset__);\n  addPropertyToAPIObject('__ResetDependency__', _reset__);\n  addPropertyToAPIObject('__with__', _with__);\n})();\nfunction _get__(variableName) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _get_original__(variableName);\n  } else {\n    var value = rewireData[variableName];\n    if (value === INTENTIONAL_UNDEFINED) {\n      return undefined;\n    } else {\n      return value;\n    }\n  }\n}\nfunction _get_original__(variableName) {\n  switch (variableName) {\n    case \"get\":\n      return (lodash_get__WEBPACK_IMPORTED_MODULE_2___default());\n    case \"hasCategoricalMarkerColors\":\n      return hasCategoricalMarkerColors;\n    case \"isEmpty\":\n      return (lodash_isEmpty__WEBPACK_IMPORTED_MODULE_1___default());\n    case \"OPERATORS_MAP\":\n      return OPERATORS_MAP;\n    case \"setMarkerDefaultColors\":\n      return setMarkerDefaultColors;\n    case \"gradstop\":\n      return (gradstop__WEBPACK_IMPORTED_MODULE_11___default());\n    case \"chooseGradient\":\n      return chooseGradient;\n    case \"hasConditionalMarkerColors\":\n      return hasConditionalMarkerColors;\n    case \"setMarkerConditionalColors\":\n      return setMarkerConditionalColors;\n    case \"setMarkerCategoricalColors\":\n      return setMarkerCategoricalColors;\n    case \"hasGradientMarkerColors\":\n      return hasGradientMarkerColors;\n    case \"setMarkerGradientColors\":\n      return setMarkerGradientColors;\n    case \"getUrlWithoutStartSlash\":\n      return _c3_sdl_react_reactComponents_menu_navMenuHelper__WEBPACK_IMPORTED_MODULE_10__.getUrlWithoutStartSlash;\n    case \"initializeMarkers\":\n      return initializeMarkers;\n    case \"fillLayers\":\n      return fillLayers;\n    case \"setMarkerColors\":\n      return setMarkerColors;\n    case \"defaultValues\":\n      return _c3_ui_UiSdlMap__WEBPACK_IMPORTED_MODULE_3__.defaultValues;\n    case \"setMarkerShapes\":\n      return setMarkerShapes;\n    case \"setMarkerOpacity\":\n      return setMarkerOpacity;\n    case \"setMarkerLabel\":\n      return setMarkerLabel;\n    case \"setMarkerImage\":\n      return setMarkerImage;\n    case \"setMarkerTooltips\":\n      return setMarkerTooltips;\n    case \"useTranslate\":\n      return _c3_sdl_react_hooks_useTranslate__WEBPACK_IMPORTED_MODULE_4__.useTranslate;\n    case \"useContext\":\n      return react__WEBPACK_IMPORTED_MODULE_0__.useContext;\n    case \"UiSdlStylePropertiesContext\":\n      return (_c3_ui_UiSdlStylePropertiesContext__WEBPACK_IMPORTED_MODULE_5___default());\n    case \"useConfig\":\n      return _c3_sdl_react_hooks_useConfig__WEBPACK_IMPORTED_MODULE_7__[\"default\"];\n    case \"fillMarkersAndLayers\":\n      return fillMarkersAndLayers;\n    case \"initializeLegend\":\n      return initializeLegend;\n    case \"DEV_MODE_MAP_STYLE\":\n      return DEV_MODE_MAP_STYLE;\n    case \"UiSdlMapStyle\":\n      return (_c3_ui_UiSdlMapStyle__WEBPACK_IMPORTED_MODULE_6___default());\n    case \"UiSdlMap\":\n      return UiSdlMap;\n    case \"React\":\n      return (react__WEBPACK_IMPORTED_MODULE_0___default());\n    case \"SDLMap\":\n      return _c3_sdl_react_reactComponents_map_SDLMap__WEBPACK_IMPORTED_MODULE_8__[\"default\"];\n    case \"SDLSpinner\":\n      return _c3_sdl_react_reactComponents_SDLSpinner__WEBPACK_IMPORTED_MODULE_9__[\"default\"];\n  }\n  return undefined;\n}\nfunction _assign__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _set_original__(variableName, value);\n  } else {\n    _maybe_update_export__(variableName, value);\n    return rewireData[variableName] = value;\n  }\n}\nfunction _set_original__(variableName, _value) {\n  switch (variableName) {}\n  return undefined;\n}\nfunction _update_operation__(operation, variableName, prefix) {\n  var oldValue = _get__(variableName);\n  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;\n  _assign__(variableName, newValue);\n  return prefix ? newValue : oldValue;\n}\nfunction _set__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (typeof variableName === 'object') {\n    Object.keys(variableName).forEach(function (name) {\n      rewireData[name] = variableName[name];\n    });\n    return function () {\n      Object.keys(variableName).forEach(function (name) {\n        _reset__(variableName);\n      });\n    };\n  } else {\n    _maybe_update_export__(variableName, value);\n    if (value === undefined) {\n      rewireData[variableName] = INTENTIONAL_UNDEFINED;\n    } else {\n      rewireData[variableName] = value;\n    }\n    return function () {\n      _reset__(variableName);\n    };\n  }\n}\nfunction _reset__(variableName) {\n  let rewireData = _getRewiredData__();\n  delete rewireData[variableName];\n  if (Object.keys(rewireData).length == 0) {\n    delete _getRewireRegistry__()[_getRewireModuleId__];\n  }\n  if (_exports_to_reset__.has(variableName)) {\n    exports[variableName] = _exports_to_reset__.get(variableName);\n    _exports_to_reset__.delete(variableName);\n  }\n}\nfunction _with__(object) {\n  let rewireData = _getRewiredData__();\n  var rewiredVariableNames = Object.keys(object);\n  var previousValues = {};\n  function reset() {\n    rewiredVariableNames.forEach(function (variableName) {\n      rewireData[variableName] = previousValues[variableName];\n    });\n  }\n  return function (callback) {\n    rewiredVariableNames.forEach(function (variableName) {\n      previousValues[variableName] = rewireData[variableName];\n      rewireData[variableName] = object[variableName];\n    });\n    let result = callback();\n    if (!!result && typeof result.then == 'function') {\n      result.then(reset).catch(reset);\n    } else {\n      reset();\n    }\n    return result;\n  };\n}\nlet _typeOfOriginalExport = typeof UiSdlMap;\nfunction addNonEnumerableProperty(name, value) {\n  Object.defineProperty(UiSdlMap, name, {\n    value: value,\n    enumerable: false,\n    configurable: true\n  });\n}\nif ((_typeOfOriginalExport === 'object' || _typeOfOriginalExport === 'function') && Object.isExtensible(UiSdlMap)) {\n  addNonEnumerableProperty('__get__', _get__);\n  addNonEnumerableProperty('__GetDependency__', _get__);\n  addNonEnumerableProperty('__Rewire__', _set__);\n  addNonEnumerableProperty('__set__', _set__);\n  addNonEnumerableProperty('__reset__', _reset__);\n  addNonEnumerableProperty('__ResetDependency__', _reset__);\n  addNonEnumerableProperty('__with__', _with__);\n  addNonEnumerableProperty('__RewireAPI__', _RewireAPI__);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@c3/ui/UiSdlMapReact.tsx_uiComponentLibraryReact\n");

/***/ }),

/***/ "_uiComponentLibraryReact?2d17_uiComponentLibraryReact":
/*!*******************************************!*\
  !*** ../node/buffer-utils.node (ignored) ***!
  \*******************************************/
/***/ (() => {

/* (ignored) */

/***/ })

}]);