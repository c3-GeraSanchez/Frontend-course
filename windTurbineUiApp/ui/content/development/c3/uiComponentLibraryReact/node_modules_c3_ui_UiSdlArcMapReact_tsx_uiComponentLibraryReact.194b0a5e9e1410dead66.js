/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkjs_webpack_c3_client_node"] = self["webpackChunkjs_webpack_c3_client_node"] || []).push([["node_modules_c3_ui_UiSdlArcMapReact_tsx_uiComponentLibraryReact"],{

/***/ "./node_modules/@c3/ui/UiSdlArcMapReact.tsx_uiComponentLibraryReact":
/*!**************************************************!*\
  !*** ./node_modules/@c3/ui/UiSdlArcMapReact.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __GetDependency__: () => (/* binding */ _get__),\n/* harmony export */   __ResetDependency__: () => (/* binding */ _reset__),\n/* harmony export */   __RewireAPI__: () => (/* binding */ _RewireAPI__),\n/* harmony export */   __Rewire__: () => (/* binding */ _set__),\n/* harmony export */   __get__: () => (/* binding */ _get__),\n/* harmony export */   __set__: () => (/* binding */ _set__),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   initializeArcMarkers: () => (/* binding */ initializeArcMarkers),\n/* harmony export */   initializeArcs: () => (/* binding */ initializeArcs),\n/* harmony export */   setArcColors: () => (/* binding */ setArcColors),\n/* harmony export */   setArcTooltips: () => (/* binding */ setArcTooltips)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"webpack/sharing/consume/default/react_uiComponentLibraryReact\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/each */ \"webpack/sharing/consume/default/lodash/each/lodash/each_uiComponentLibraryReact\");\n/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_each__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isEmpty */ \"webpack/sharing/consume/default/lodash/isEmpty/lodash/isEmpty_uiComponentLibraryReact\");\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _c3_ui_UiSdlThresholdColor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @c3/ui/UiSdlThresholdColor */ \"webpack/container/remote/@c3/ui/UiSdlThresholdColor_uiComponentLibraryReact\");\n/* harmony import */ var _c3_ui_UiSdlThresholdColor__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlThresholdColor__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _c3_ui_UiSdlArcMap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @c3/ui/UiSdlArcMap */ \"webpack/container/remote/@c3/ui/UiSdlArcMap_uiComponentLibraryReact\");\n/* harmony import */ var _c3_ui_UiSdlArcMap__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlArcMap__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _c3_ui_UiSdlStylePropertiesContext__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @c3/ui/UiSdlStylePropertiesContext */ \"webpack/sharing/consume/default/@c3/ui/UiSdlStylePropertiesContext_uiComponentLibraryReact\");\n/* harmony import */ var _c3_ui_UiSdlStylePropertiesContext__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlStylePropertiesContext__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _c3_ui_UiSdlMapStyle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @c3/ui/UiSdlMapStyle */ \"webpack/container/remote/@c3/ui/UiSdlMapStyle_uiComponentLibraryReact\");\n/* harmony import */ var _c3_ui_UiSdlMapStyle__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlMapStyle__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _c3_sdl_react_hooks_useConfig__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @c3/sdl-react/hooks/useConfig */ \"./node_modules/@c3/sdl-react/hooks/useConfig.js_uiComponentLibraryReact\");\n/* harmony import */ var _c3_sdl_react_reactComponents_map_SDLMap__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @c3/sdl-react/reactComponents/map/SDLMap */ \"./node_modules/@c3/sdl-react/reactComponents/map/SDLMap.jsx_uiComponentLibraryReact\");\n/* harmony import */ var _c3_sdl_react_reactComponents_SDLSpinner__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @c3/sdl-react/reactComponents/SDLSpinner */ \"./node_modules/@c3/sdl-react/reactComponents/SDLSpinner.jsx_uiComponentLibraryReact\");\n/* harmony import */ var gradstop__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! gradstop */ \"./node_modules/gradstop/index.js_uiComponentLibraryReact\");\n/* harmony import */ var gradstop__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(gradstop__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash/get */ \"webpack/sharing/consume/default/lodash/get/lodash/get_uiComponentLibraryReact\");\n/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(lodash_get__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _c3_css_library_components_map_scss__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @c3/css-library/components/_map.scss */ \"./node_modules/@c3/css-library/components/_map.scss_uiComponentLibraryReact\");\n/*\n * Copyright 2009-2024 C3 AI (www.c3.ai). All Rights Reserved.\n * This material, including without limitation any software, is the confidential trade secret and proprietary\n * information of C3 and its licensors. Reproduction, use and/or distribution of this material in any form is\n * strictly prohibited except as set forth in a written license agreement with C3 and/or its authorized distributors.\n * This material may be covered by one or more patents or pending patent applications.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\nconst UiSdlArcMap = props => {\n  var _mapboxConfig$accessT, _props$arcData, _props$defaultArcColo, _get__2, _props$defaultArcColo2, _get__3;\n  const styleProperties = _get__(\"useContext\")(_get__(\"UiSdlStylePropertiesContext\"));\n  const mapboxConfig = _get__(\"useConfig\")('UiSdlMapbox', 'configWithAccessToken', {\n    this: {}\n  }, ['map']);\n  const configLoaded = mapboxConfig !== undefined;\n  const apiUrl = mapboxConfig === null || mapboxConfig === void 0 ? void 0 : mapboxConfig.url;\n  const apiKey = (_mapboxConfig$accessT = mapboxConfig === null || mapboxConfig === void 0 ? void 0 : mapboxConfig.accessToken) !== null && _mapboxConfig$accessT !== void 0 ? _mapboxConfig$accessT : 'NOT_SET';\n  const {\n    dataSpec\n  } = props;\n  const arcs = _get__(\"initializeArcs\")((_props$arcData = props.arcData) === null || _props$arcData === void 0 ? void 0 : _props$arcData.objs, dataSpec);\n  const legend = _get__(\"initializeLegend\")(props.legend, dataSpec);\n  _get__(\"setArcColors\")(arcs, (_props$defaultArcColo = props.defaultArcColor) !== null && _props$defaultArcColo !== void 0 ? _props$defaultArcColo : (_get__2 = _get__(\"defaultValues\")) === null || _get__2 === void 0 ? void 0 : _get__2.defaultArcColor, dataSpec === null || dataSpec === void 0 ? void 0 : dataSpec.arcColor);\n  _get__(\"setArcTooltips\")(arcs, dataSpec);\n  const markers = _get__(\"initializeArcMarkers\")(arcs, (_props$defaultArcColo2 = props.defaultArcColor) !== null && _props$defaultArcColo2 !== void 0 ? _props$defaultArcColo2 : (_get__3 = _get__(\"defaultValues\")) === null || _get__3 === void 0 ? void 0 : _get__3.defaultArcColor, dataSpec);\n  // We need to know if we have a key before we render.\n  if (configLoaded) {\n    let mapStyle = {};\n    if (apiKey === 'NOT_SET') {\n      mapStyle = _get__(\"DEV_MODE_MAP_STYLE\");\n    } else if (props.mapStyle === 'THEMED') {\n      var _styleProperties$them;\n      /**\n       * If the configured map style is THEMED, we obtain the current theme category in use by the application\n       * and set the map style accordingly. Otherwise, use the configured style as is.\n       */\n      const currentThemeCategory = (_styleProperties$them = styleProperties.themeCategory) === null || _styleProperties$them === void 0 ? void 0 : _styleProperties$them.toUpperCase();\n      mapStyle = _get__(\"UiSdlMapStyle\")[currentThemeCategory];\n    } else {\n      mapStyle = props.mapStyle;\n    }\n    return /*#__PURE__*/_get__(\"React\").createElement(_get__(\"SDLMap\"), {\n      apiKey: apiKey,\n      apiUrl: apiUrl,\n      arcs: arcs,\n      shortestPath: props.shortestPath,\n      legend: legend,\n      mapStyle: mapStyle,\n      markers: markers,\n      title: props.title,\n      arcWidth: props.arcWidth,\n      mapMarkerColors: _get__(\"UiSdlThresholdColor\")\n    });\n  }\n  return /*#__PURE__*/_get__(\"React\").createElement(_get__(\"SDLSpinner\"), {\n    loadingText: 'Loading',\n    isDataLoading: true\n  }, /*#__PURE__*/_get__(\"React\").createElement(_get__(\"SDLMap\"), {\n    apiKey: 'NOT_SET',\n    arcs: [],\n    legend: undefined,\n    mapStyle: _get__(\"DEV_MODE_MAP_STYLE\"),\n    markers: [],\n    title: props.title,\n    arcWidth: props.arcWidth\n  }));\n};\n\n/**\n * Initializes the legend of the map.\n *\n * @param legend The legend configuration\n * @param dataSpec The data spec configuration\n *\n * @returns the initialized legend data.\n */\nconst initializeLegend = (legend, dataSpec) => {\n  var _dataSpec$arcColor;\n  if (_get__(\"hasCategoricalMarkerColors\")(dataSpec === null || dataSpec === void 0 || (_dataSpec$arcColor = dataSpec.arcColor) === null || _dataSpec$arcColor === void 0 ? void 0 : _dataSpec$arcColor.colorConfigurationStrategy)) {\n    const categoryColors = dataSpec.arcColor.colorConfigurationStrategy.categoryColors;\n    const groups = categoryColors === null || categoryColors === void 0 ? void 0 : categoryColors.map(category => ({\n      name: category.label,\n      color: category.color,\n      id: category.label\n    }));\n    if (_get__(\"isEmpty\")(groups)) {\n      return undefined;\n    }\n    return {\n      ...legend,\n      groups\n    };\n  } else {\n    return undefined;\n  }\n};\nconst hasConditionalMarkerColors = colorConfigurationStrategy => {\n  return (colorConfigurationStrategy === null || colorConfigurationStrategy === void 0 ? void 0 : colorConfigurationStrategy.type) === 'UiSdlMapMarkerConditionalColorSetting';\n};\nconst hasCategoricalMarkerColors = colorConfigurationStrategy => {\n  return (colorConfigurationStrategy === null || colorConfigurationStrategy === void 0 ? void 0 : colorConfigurationStrategy.type) === 'UiSdlMapMarkerCategoricalColorSetting';\n};\nconst hasGradientMarkerColors = colorConfigurationStrategy => {\n  return (colorConfigurationStrategy === null || colorConfigurationStrategy === void 0 ? void 0 : colorConfigurationStrategy.type) === 'UiSdlMapMarkerGradientColorSetting';\n};\n/**\n * Initializes an array of arcs to display on the map. Each arc will\n * contain `startLatitude` and `startLongitude` and `endLatitude` and `endLongitude`properties, as well as a `data` property\n * containing the original data object.\n *\n * @param objs The map data that will be displayed via markers.\n * @param dataSpec The data spec configuration\n *\n * @returns the initialized arc data.\n */\nconst initializeArcs = (objs, dataSpec) => {\n  var _dataSpec$startLongit, _dataSpec$startLatitu, _dataSpec$endLongitud, _dataSpec$endLatitude;\n  const startLongitudeField = dataSpec === null || dataSpec === void 0 || (_dataSpec$startLongit = dataSpec.startLongitude) === null || _dataSpec$startLongit === void 0 ? void 0 : _dataSpec$startLongit.fieldName;\n  const startLatitudeField = dataSpec === null || dataSpec === void 0 || (_dataSpec$startLatitu = dataSpec.startLatitude) === null || _dataSpec$startLatitu === void 0 ? void 0 : _dataSpec$startLatitu.fieldName;\n  const endLongitudeField = dataSpec === null || dataSpec === void 0 || (_dataSpec$endLongitud = dataSpec.endLongitude) === null || _dataSpec$endLongitud === void 0 ? void 0 : _dataSpec$endLongitud.fieldName;\n  const endLatitudeField = dataSpec === null || dataSpec === void 0 || (_dataSpec$endLatitude = dataSpec.endLatitude) === null || _dataSpec$endLatitude === void 0 ? void 0 : _dataSpec$endLatitude.fieldName;\n  // Only add markers to map if both longitude and latitude fields are provided.\n  if (!(objs && startLongitudeField && startLatitudeField && endLongitudeField && endLatitudeField)) {\n    return [];\n  }\n  // Create a new list of objects based on the original data.\n  return objs.map(obj => ({\n    // Store the original object on a special `data` property.\n    data: obj,\n    // All arcs are initialized with `latitude` and `longitude`.\n    start: {\n      latitude: _get__(\"get\")(obj, startLatitudeField),\n      longitude: _get__(\"get\")(obj, startLongitudeField)\n    },\n    end: {\n      latitude: _get__(\"get\")(obj, endLatitudeField),\n      longitude: _get__(\"get\")(obj, endLongitudeField)\n    }\n    // Filter out any arcs that are missing `latitude` or `longitude`.\n  })).filter(({\n    start,\n    end\n  }) => start.latitude != null && start.longitude != null && end.latitude != null && end.longitude != null);\n};\n\n/**\n * Initializes an array of markers from the arc data.\n *\n * @param arcs The arc data containing the start and end markers.\n * @param defaultColor The default color to be used for a arc.\n * @param dataSpec The data spec configuration\n *\n * @returns the initialized marker data.\n */\nconst initializeArcMarkers = (arcs, defaultColor, dataSpec) => {\n  if (!arcs) {\n    return [];\n  }\n  const markers = [];\n  _get__(\"each\")(arcs, arc => {\n    if (markers.filter(x => x.latitude == arc.start.latitude && x.longitude == arc.start.longitude).length == 0) {\n      arc.start.data = arc.data;\n      _get__(\"setArcColors\")([arc.start], defaultColor, dataSpec === null || dataSpec === void 0 ? void 0 : dataSpec.startMarkerColor);\n      arc.start.data = undefined;\n      markers.push(arc.start);\n    }\n    if (markers.filter(x => x.latitude == arc.end.latitude && x.longitude == arc.end.longitude).length == 0) {\n      arc.end.data = arc.data;\n      _get__(\"setArcColors\")([arc.end], defaultColor, dataSpec === null || dataSpec === void 0 ? void 0 : dataSpec.endMarkerColor);\n      arc.end.data = undefined;\n      markers.push(arc.end);\n    }\n  });\n  return markers;\n};\n\n/**\n * Set the color for each arc and marker on the map. This method mutates the arc data\n * passed to it.\n *\n * @param arcs The map data that will be displayed via arcs.\n * @param defaultColor The default color to be used for a arc.\n * @param colorConfiguration The configuration to use to determine the color of a arc.\n */\nconst setArcColors = (arcs, defaultColor, colorConfiguration) => {\n  const colorConfigurationStrategy = colorConfiguration === null || colorConfiguration === void 0 ? void 0 : colorConfiguration.colorConfigurationStrategy;\n  const colorFieldName = colorConfiguration === null || colorConfiguration === void 0 ? void 0 : colorConfiguration.fieldName;\n  if (_get__(\"hasConditionalMarkerColors\")(colorConfigurationStrategy)) {\n    _get__(\"setArcConditionalColors\")(arcs, colorFieldName, defaultColor, colorConfigurationStrategy);\n  } else if (_get__(\"hasCategoricalMarkerColors\")(colorConfigurationStrategy)) {\n    _get__(\"setArcCategoricalColors\")(arcs, colorFieldName, defaultColor, colorConfigurationStrategy);\n  } else if (_get__(\"hasGradientMarkerColors\")(colorConfigurationStrategy)) {\n    _get__(\"setArcGradientColors\")(arcs, colorFieldName, defaultColor, colorConfigurationStrategy);\n  } else {\n    _get__(\"setArcDefaultColors\")(arcs, defaultColor);\n  }\n};\n\n/**\n * Set the color for each arc on the map based on a configured color gradient.s\n * This method mutates the marker data passed to it.\n *\n * @param arcs The map data that will be displayed via arcs.\n * @param fieldName The field from the data type to be used to determine a marker's value.\n * @param defaultColor The default color to be used for a marker.\n * @param conditionalColorStrategy The configuration to use to determine the color of a marker.\n */\nconst setArcGradientColors = (arcs, fieldName, defaultColor, conditionalColorStrategy) => {\n  const {\n    minimum,\n    maximum,\n    gradient\n  } = conditionalColorStrategy;\n\n  // If mis-configured, fallback to default colors.\n  if (minimum == undefined || maximum == undefined || !gradient || minimum >= maximum) {\n    _get__(\"setArcDefaultColors\")(arcs, defaultColor);\n    return;\n  }\n\n  /*\n   * Using a range of [0,100] for the gradient so that a data value can be used a percentage\n   * of the (maximum - minimum) range\n   */\n  const numSteps = 101;\n  const gradients = {\n    gradient1: ['#49BFA9', '#ED6921', '#DB1C3C'],\n    'gradient1-inv': ['#DB1C3C', '#ED6921', '#49BFA9'],\n    gradient2: ['#ED6921', '#8D4BE3'],\n    'gradient2-inv': ['#8D4BE3', '#ED6921'],\n    gradient3: ['#8A90AB', '#DB1C3C'],\n    'gradient3-inv': ['#DB1C3C', '#8A90AB']\n  };\n  const colorGradient = _get__(\"gradstop\")({\n    stops: numSteps,\n    inputFormat: 'hex',\n    colorArray: gradients[_get__(\"chooseGradient\")(gradient, gradients)]\n  });\n  arcs.forEach(arc => {\n    const dataValue = _get__(\"get\")(arc.data, fieldName);\n    // Guard against non-numeric values, i.e. the empty string\n    const isInvalidValue = isNaN(parseFloat(dataValue));\n    if (dataValue < minimum || dataValue > maximum || isInvalidValue) {\n      arc.color = defaultColor;\n    } else {\n      let referenceValue = dataValue - minimum;\n\n      // Calculating the referenceValue as a percentage of (maximum - minimum range)\n      referenceValue = Math.round(referenceValue / (maximum - minimum) * 100);\n      const arcColor = colorGradient[referenceValue];\n      arc.color = arcColor || defaultColor;\n    }\n  });\n};\nconst chooseGradient = (gradient, gradients) => {\n  if (!(gradient in gradients) && gradient !== 'no-gradient') {\n    return 'gradient1';\n  } else {\n    return gradient;\n  }\n};\n\n/**\n * Set the color for each arc and marker on the map based on a configured threshold\n * value. This method mutates the arc data passed to it.\n *\n * @param arcs The map data that will be displayed via arcs.\n * @param fieldName The field from the data type to be used to determine a arc's value.\n * @param defaultColor The default color to be used for a arc.\n * @param conditionalColorStrategy The configuration to use to determine the color of a arc.\n */\nconst setArcConditionalColors = (arcs, fieldName, defaultColor, conditionalColorStrategy) => {\n  const {\n    operator,\n    threshold,\n    thresholdColor\n  } = conditionalColorStrategy;\n  const operatorExpression = _get__(\"OPERATORS_MAP\")[operator];\n  // If mis-configured, fallback to default colors.\n  if (!operatorExpression || !thresholdColor || isNaN(parseFloat(threshold))) {\n    _get__(\"setArcDefaultColors\")(arcs, defaultColor);\n    return;\n  }\n  arcs.forEach(arc => {\n    const dataValue = _get__(\"get\")(arc.data, fieldName);\n    // Guard against non-numeric values, i.e. the empty string\n    const operatorEvaluation = !isNaN(parseFloat(dataValue)) && operatorExpression(dataValue, threshold);\n    // Only set marker color to be thresholdColor if operator is true\n    arc.color = operatorEvaluation ? thresholdColor : defaultColor;\n  });\n};\n\n/**\n * Set the color for each arc and marker on the map based on categorical values of a specified field\n *\n * @param arcs The map data that will be displayed via arcs.\n * @param fieldName The field from the data type to be used to determine a arc's value.\n * @param defaultColor The default color to be used for a arc.\n * @param categoricalColorStrategy The configuration to use to determine the color of a arc.\n */\nconst setArcCategoricalColors = (arcs, fieldName, defaultColor, categoricalColorStrategy) => {\n  const {\n    categoryColors\n  } = categoricalColorStrategy;\n  // If mis-configured, fallback to default colors.\n  if (!categoryColors) {\n    _get__(\"setArcDefaultColors\")(arcs, defaultColor);\n    return;\n  }\n  const colorDict = {};\n  categoryColors.forEach(category => colorDict[category.label] = category.color);\n  arcs.forEach(arc => {\n    const dataValue = _get__(\"get\")(arc.data, fieldName);\n    arc.color = colorDict[dataValue] || defaultColor;\n  });\n};\n\n/**\n * Set the color for each arc on the map to be the default color. This method\n * mutates the arc data passed to it.\n *\n * @param arcs The map data that will be displayed via markers.\n * @param defaultColor The default color to be used for a marker.\n */\nconst setArcDefaultColors = (arcs, defaultColor) => {\n  arcs.forEach(arc => {\n    arc.color = defaultColor;\n  });\n};\n\n/**\n * Sets the tooltip data for each arc and marker on the map, such as the tooltip header,\n * sub-header, and additional fields to render in the tooltip body. This method\n * mutates the arc data passed to it.\n *\n * @param arcs The map data that will be displayed via arcs.\n * @param dataSpec The component's data spec configuration.\n */\nconst setArcTooltips = (arcs, dataSpec) => {\n  arcs.forEach(arc => {\n    var _dataSpec$arcTooltipH, _dataSpec$arcTooltipS, _dataSpec$arcTooltipA, _dataSpec$startToolti, _dataSpec$startToolti2, _dataSpec$startToolti3, _dataSpec$endTooltipH, _dataSpec$endTooltipS, _dataSpec$endTooltipA;\n    if (!arc.data) {\n      return;\n    }\n    if (dataSpec !== null && dataSpec !== void 0 && (_dataSpec$arcTooltipH = dataSpec.arcTooltipHeader) !== null && _dataSpec$arcTooltipH !== void 0 && _dataSpec$arcTooltipH.fieldName) {\n      arc.tooltipHeader = _get__(\"get\")(arc.data, dataSpec.arcTooltipHeader.fieldName);\n    }\n    if (dataSpec !== null && dataSpec !== void 0 && (_dataSpec$arcTooltipS = dataSpec.arcTooltipSubHeader) !== null && _dataSpec$arcTooltipS !== void 0 && _dataSpec$arcTooltipS.fieldName) {\n      arc.tooltipSubHeader = _get__(\"get\")(arc.data, dataSpec.arcTooltipSubHeader.fieldName);\n    }\n    if ((dataSpec === null || dataSpec === void 0 || (_dataSpec$arcTooltipA = dataSpec.arcTooltipAdditionalFields) === null || _dataSpec$arcTooltipA === void 0 ? void 0 : _dataSpec$arcTooltipA.length) > 0) {\n      arc.tooltipAdditionalFields = dataSpec.arcTooltipAdditionalFields.filter(({\n        fieldName\n      }) => fieldName).map(({\n        fieldName,\n        label\n      }) => ({\n        label,\n        value: _get__(\"get\")(arc.data, fieldName)\n      }));\n    }\n    if (dataSpec !== null && dataSpec !== void 0 && (_dataSpec$startToolti = dataSpec.startTooltipHeader) !== null && _dataSpec$startToolti !== void 0 && _dataSpec$startToolti.fieldName) {\n      arc.start.tooltipHeader = _get__(\"get\")(arc.data, dataSpec.startTooltipHeader.fieldName);\n    }\n    if (dataSpec !== null && dataSpec !== void 0 && (_dataSpec$startToolti2 = dataSpec.startTooltipSubHeader) !== null && _dataSpec$startToolti2 !== void 0 && _dataSpec$startToolti2.fieldName) {\n      arc.start.tooltipSubHeader = _get__(\"get\")(arc.data, dataSpec.startTooltipSubHeader.fieldName);\n    }\n    if ((dataSpec === null || dataSpec === void 0 || (_dataSpec$startToolti3 = dataSpec.startTooltipAdditionalFields) === null || _dataSpec$startToolti3 === void 0 ? void 0 : _dataSpec$startToolti3.length) > 0) {\n      arc.start.tooltipAdditionalFields = dataSpec.startTooltipAdditionalFields.filter(({\n        fieldName\n      }) => fieldName).map(({\n        fieldName,\n        label\n      }) => ({\n        label,\n        value: _get__(\"get\")(arc.data, fieldName)\n      }));\n    }\n    if (dataSpec !== null && dataSpec !== void 0 && (_dataSpec$endTooltipH = dataSpec.endTooltipHeader) !== null && _dataSpec$endTooltipH !== void 0 && _dataSpec$endTooltipH.fieldName) {\n      arc.end.tooltipHeader = _get__(\"get\")(arc.data, dataSpec.endTooltipHeader.fieldName);\n    }\n    if (dataSpec !== null && dataSpec !== void 0 && (_dataSpec$endTooltipS = dataSpec.endTooltipSubHeader) !== null && _dataSpec$endTooltipS !== void 0 && _dataSpec$endTooltipS.fieldName) {\n      arc.end.tooltipSubHeader = _get__(\"get\")(arc.data, dataSpec.endTooltipSubHeader.fieldName);\n    }\n    if ((dataSpec === null || dataSpec === void 0 || (_dataSpec$endTooltipA = dataSpec.endTooltipAdditionalFields) === null || _dataSpec$endTooltipA === void 0 ? void 0 : _dataSpec$endTooltipA.length) > 0) {\n      arc.end.tooltipAdditionalFields = dataSpec.endTooltipAdditionalFields.filter(({\n        fieldName\n      }) => fieldName).map(({\n        fieldName,\n        label\n      }) => ({\n        label,\n        value: _get__(\"get\")(arc.data, fieldName)\n      }));\n    }\n  });\n};\n\n/**\n * Placeholder style to prevent tile rendering during development and testing.\n */\nconst DEV_MODE_MAP_STYLE = {\n  version: 8,\n  sources: {\n    'raster-tiles': {\n      type: 'raster',\n      tiles: ['https://localhost:8080/tiles'],\n      tileSize: 256,\n      attribution: 'C3'\n    }\n  },\n  layers: []\n};\n\n/**\n * Map from operator key to function with corresponding expression.\n */\nconst OPERATORS_MAP = Object.freeze({\n  EQUALS: (x, y) => x == y,\n  LESS_THAN: (x, y) => x < y,\n  GREATER_THAN: (x, y) => x > y,\n  LESS_THAN_OR_EQUAL_TO: (x, y) => x <= y,\n  GREATER_THAN_OR_EQUAL_TO: (x, y) => x >= y\n});\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_get__(\"UiSdlArcMap\"));\nfunction _getGlobalObject() {\n  try {\n    if (!!__webpack_require__.g) {\n      return __webpack_require__.g;\n    }\n  } catch (e) {\n    try {\n      if (!!window) {\n        return window;\n      }\n    } catch (e) {\n      return this;\n    }\n  }\n}\n;\nvar _RewireModuleId__ = null;\nfunction _getRewireModuleId__() {\n  if (_RewireModuleId__ === null) {\n    let globalVariable = _getGlobalObject();\n    if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {\n      globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0;\n    }\n    _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++;\n  }\n  return _RewireModuleId__;\n}\nfunction _getRewireRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__;\n}\nfunction _getRewireExportsRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__;\n}\nconst _sync_internal_state_with_exports__ = false;\nconst _exports_to_reset__ = new Map();\nfunction _record_export_to_reset__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  if (!_exports_to_reset__.has(variableName)) {\n    _exports_to_reset__.set(variableName, value);\n  }\n}\nfunction _restore_exports__() {\n  const entries = _exports_to_reset__.entries();\n  for (const [variableName, value] of entries) {\n    exports[variableName] = value;\n  }\n  _exports_to_reset__.clear();\n}\nfunction _maybe_update_export__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  _record_export_to_reset__(variableName, exports[variableName]);\n  exports[variableName] = value;\n}\nfunction _getRewiredData__() {\n  let moduleId = _getRewireModuleId__();\n  let registry = _getRewireRegistry__();\n  let rewireData = registry[moduleId];\n  if (!rewireData) {\n    registry[moduleId] = Object.create(null);\n    rewireData = registry[moduleId];\n  }\n  let exportsRegistry = _getRewireExportsRegistry__();\n  if (!exportsRegistry[moduleId]) {\n    exportsRegistry[moduleId] = _restore_exports__;\n  }\n  return rewireData;\n}\n(function registerResetAll() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable['__rewire_reset_all__']) {\n    theGlobalVariable['__rewire_reset_all__'] = function () {\n      theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n      const exportsRegistry = _getRewireExportsRegistry__();\n      for (const restoreFunc of Object.values(exportsRegistry)) {\n        restoreFunc();\n      }\n      theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n    };\n  }\n})();\nvar INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';\nlet _RewireAPI__ = {};\n(function () {\n  function addPropertyToAPIObject(name, value) {\n    Object.defineProperty(_RewireAPI__, name, {\n      value: value,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  addPropertyToAPIObject('__get__', _get__);\n  addPropertyToAPIObject('__GetDependency__', _get__);\n  addPropertyToAPIObject('__Rewire__', _set__);\n  addPropertyToAPIObject('__set__', _set__);\n  addPropertyToAPIObject('__reset__', _reset__);\n  addPropertyToAPIObject('__ResetDependency__', _reset__);\n  addPropertyToAPIObject('__with__', _with__);\n})();\nfunction _get__(variableName) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _get_original__(variableName);\n  } else {\n    var value = rewireData[variableName];\n    if (value === INTENTIONAL_UNDEFINED) {\n      return undefined;\n    } else {\n      return value;\n    }\n  }\n}\nfunction _get_original__(variableName) {\n  switch (variableName) {\n    case \"useContext\":\n      return react__WEBPACK_IMPORTED_MODULE_0__.useContext;\n    case \"UiSdlStylePropertiesContext\":\n      return (_c3_ui_UiSdlStylePropertiesContext__WEBPACK_IMPORTED_MODULE_5___default());\n    case \"useConfig\":\n      return _c3_sdl_react_hooks_useConfig__WEBPACK_IMPORTED_MODULE_7__[\"default\"];\n    case \"initializeArcs\":\n      return initializeArcs;\n    case \"initializeLegend\":\n      return initializeLegend;\n    case \"setArcColors\":\n      return setArcColors;\n    case \"defaultValues\":\n      return _c3_ui_UiSdlArcMap__WEBPACK_IMPORTED_MODULE_4__.defaultValues;\n    case \"setArcTooltips\":\n      return setArcTooltips;\n    case \"initializeArcMarkers\":\n      return initializeArcMarkers;\n    case \"DEV_MODE_MAP_STYLE\":\n      return DEV_MODE_MAP_STYLE;\n    case \"UiSdlMapStyle\":\n      return (_c3_ui_UiSdlMapStyle__WEBPACK_IMPORTED_MODULE_6___default());\n    case \"UiSdlThresholdColor\":\n      return (_c3_ui_UiSdlThresholdColor__WEBPACK_IMPORTED_MODULE_3___default());\n    case \"hasCategoricalMarkerColors\":\n      return hasCategoricalMarkerColors;\n    case \"isEmpty\":\n      return (lodash_isEmpty__WEBPACK_IMPORTED_MODULE_2___default());\n    case \"get\":\n      return (lodash_get__WEBPACK_IMPORTED_MODULE_11___default());\n    case \"each\":\n      return (lodash_each__WEBPACK_IMPORTED_MODULE_1___default());\n    case \"hasConditionalMarkerColors\":\n      return hasConditionalMarkerColors;\n    case \"setArcConditionalColors\":\n      return setArcConditionalColors;\n    case \"setArcCategoricalColors\":\n      return setArcCategoricalColors;\n    case \"hasGradientMarkerColors\":\n      return hasGradientMarkerColors;\n    case \"setArcGradientColors\":\n      return setArcGradientColors;\n    case \"setArcDefaultColors\":\n      return setArcDefaultColors;\n    case \"gradstop\":\n      return (gradstop__WEBPACK_IMPORTED_MODULE_10___default());\n    case \"chooseGradient\":\n      return chooseGradient;\n    case \"OPERATORS_MAP\":\n      return OPERATORS_MAP;\n    case \"UiSdlArcMap\":\n      return UiSdlArcMap;\n    case \"React\":\n      return (react__WEBPACK_IMPORTED_MODULE_0___default());\n    case \"SDLMap\":\n      return _c3_sdl_react_reactComponents_map_SDLMap__WEBPACK_IMPORTED_MODULE_8__[\"default\"];\n    case \"SDLSpinner\":\n      return _c3_sdl_react_reactComponents_SDLSpinner__WEBPACK_IMPORTED_MODULE_9__[\"default\"];\n  }\n  return undefined;\n}\nfunction _assign__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _set_original__(variableName, value);\n  } else {\n    _maybe_update_export__(variableName, value);\n    return rewireData[variableName] = value;\n  }\n}\nfunction _set_original__(variableName, _value) {\n  switch (variableName) {}\n  return undefined;\n}\nfunction _update_operation__(operation, variableName, prefix) {\n  var oldValue = _get__(variableName);\n  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;\n  _assign__(variableName, newValue);\n  return prefix ? newValue : oldValue;\n}\nfunction _set__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (typeof variableName === 'object') {\n    Object.keys(variableName).forEach(function (name) {\n      rewireData[name] = variableName[name];\n    });\n    return function () {\n      Object.keys(variableName).forEach(function (name) {\n        _reset__(variableName);\n      });\n    };\n  } else {\n    _maybe_update_export__(variableName, value);\n    if (value === undefined) {\n      rewireData[variableName] = INTENTIONAL_UNDEFINED;\n    } else {\n      rewireData[variableName] = value;\n    }\n    return function () {\n      _reset__(variableName);\n    };\n  }\n}\nfunction _reset__(variableName) {\n  let rewireData = _getRewiredData__();\n  delete rewireData[variableName];\n  if (Object.keys(rewireData).length == 0) {\n    delete _getRewireRegistry__()[_getRewireModuleId__];\n  }\n  if (_exports_to_reset__.has(variableName)) {\n    exports[variableName] = _exports_to_reset__.get(variableName);\n    _exports_to_reset__.delete(variableName);\n  }\n}\nfunction _with__(object) {\n  let rewireData = _getRewiredData__();\n  var rewiredVariableNames = Object.keys(object);\n  var previousValues = {};\n  function reset() {\n    rewiredVariableNames.forEach(function (variableName) {\n      rewireData[variableName] = previousValues[variableName];\n    });\n  }\n  return function (callback) {\n    rewiredVariableNames.forEach(function (variableName) {\n      previousValues[variableName] = rewireData[variableName];\n      rewireData[variableName] = object[variableName];\n    });\n    let result = callback();\n    if (!!result && typeof result.then == 'function') {\n      result.then(reset).catch(reset);\n    } else {\n      reset();\n    }\n    return result;\n  };\n}\nlet _typeOfOriginalExport = typeof UiSdlArcMap;\nfunction addNonEnumerableProperty(name, value) {\n  Object.defineProperty(UiSdlArcMap, name, {\n    value: value,\n    enumerable: false,\n    configurable: true\n  });\n}\nif ((_typeOfOriginalExport === 'object' || _typeOfOriginalExport === 'function') && Object.isExtensible(UiSdlArcMap)) {\n  addNonEnumerableProperty('__get__', _get__);\n  addNonEnumerableProperty('__GetDependency__', _get__);\n  addNonEnumerableProperty('__Rewire__', _set__);\n  addNonEnumerableProperty('__set__', _set__);\n  addNonEnumerableProperty('__reset__', _reset__);\n  addNonEnumerableProperty('__ResetDependency__', _reset__);\n  addNonEnumerableProperty('__with__', _with__);\n  addNonEnumerableProperty('__RewireAPI__', _RewireAPI__);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@c3/ui/UiSdlArcMapReact.tsx_uiComponentLibraryReact\n");

/***/ }),

/***/ "_uiComponentLibraryReact?2d17_uiComponentLibraryReact":
/*!*******************************************!*\
  !*** ../node/buffer-utils.node (ignored) ***!
  \*******************************************/
/***/ (() => {

/* (ignored) */

/***/ })

}]);