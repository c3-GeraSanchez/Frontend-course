"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkjs_webpack_c3_client_node"] = self["webpackChunkjs_webpack_c3_client_node"] || []).push([["node_modules_c3_ui_UiSdlFormBase_ts_uiComponentLibrary"],{

/***/ "./node_modules/@c3/ui/UiSdlFormBase.ts_uiComponentLibrary":
/*!**********************************************!*\
  !*** ./node_modules/@c3/ui/UiSdlFormBase.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __GetDependency__: () => (/* binding */ _get__),\n/* harmony export */   __ResetDependency__: () => (/* binding */ _reset__),\n/* harmony export */   __RewireAPI__: () => (/* binding */ _RewireAPI__),\n/* harmony export */   __Rewire__: () => (/* binding */ _set__),\n/* harmony export */   __get__: () => (/* binding */ _get__),\n/* harmony export */   __set__: () => (/* binding */ _set__),\n/* harmony export */   actionCreators: () => (/* binding */ actionCreators),\n/* harmony export */   childComponentIdStoreReducer: () => (/* binding */ childComponentIdStoreReducer),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaultValues: () => (/* binding */ defaultValues),\n/* harmony export */   epics: () => (/* binding */ epics),\n/* harmony export */   fieldHideEffect: () => (/* binding */ fieldHideEffect),\n/* harmony export */   fieldHideShowEffect: () => (/* binding */ fieldHideShowEffect),\n/* harmony export */   fieldShowEffect: () => (/* binding */ fieldShowEffect),\n/* harmony export */   getFieldSetConfigsState: () => (/* binding */ getFieldSetConfigsState),\n/* harmony export */   getFieldSettingDataConfigId: () => (/* binding */ getFieldSettingDataConfigId),\n/* harmony export */   getFields: () => (/* binding */ getFields),\n/* harmony export */   getFormFieldValuesFromState: () => (/* binding */ getFormFieldValuesFromState),\n/* harmony export */   hideShowFieldAction: () => (/* binding */ hideShowFieldAction),\n/* harmony export */   inferFieldFromDsPath: () => (/* binding */ inferFieldFromDsPath),\n/* harmony export */   inputChangeAction: () => (/* binding */ inputChangeAction),\n/* harmony export */   inputChangeEffect: () => (/* binding */ inputChangeEffect),\n/* harmony export */   loadedDataHandleReducer: () => (/* binding */ loadedDataHandleReducer),\n/* harmony export */   mapDataPropsForFieldSetting: () => (/* binding */ mapDataPropsForFieldSetting),\n/* harmony export */   prepareFieldSetsForRendering: () => (/* binding */ prepareFieldSetsForRendering),\n/* harmony export */   reducers: () => (/* binding */ reducers),\n/* harmony export */   registerTriggersAction: () => (/* reexport safe */ _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_15__.registerTriggersAction),\n/* harmony export */   renderInitialAction: () => (/* reexport safe */ _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_15__.renderInitialAction),\n/* harmony export */   sanitizeFieldSetting: () => (/* binding */ sanitizeFieldSetting),\n/* harmony export */   storeChildComponentIdsAction: () => (/* binding */ storeChildComponentIdsAction),\n/* harmony export */   triggerInputAction: () => (/* binding */ triggerInputAction),\n/* harmony export */   triggersRegisterEffect: () => (/* reexport safe */ _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_15__.triggersRegisterEffect),\n/* harmony export */   updateFormFieldValues: () => (/* binding */ updateFormFieldValues)\n/* harmony export */ });\n/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/each */ \"webpack/sharing/consume/default/lodash/each/lodash/each_uiComponentLibrary\");\n/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_each__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_find__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/find */ \"webpack/sharing/consume/default/lodash/find/lodash/find_uiComponentLibrary\");\n/* harmony import */ var lodash_find__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_find__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_flatten__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/flatten */ \"webpack/sharing/consume/default/lodash/flatten/lodash/flatten_uiComponentLibrary\");\n/* harmony import */ var lodash_flatten__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_flatten__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/map */ \"webpack/sharing/consume/default/lodash/map/lodash/map_uiComponentLibrary\");\n/* harmony import */ var lodash_map__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_map__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_compact__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/compact */ \"webpack/sharing/consume/default/lodash/compact/lodash/compact_uiComponentLibrary\");\n/* harmony import */ var lodash_compact__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_compact__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/camelCase */ \"webpack/sharing/consume/default/lodash/camelCase/lodash/camelCase_uiComponentLibrary\");\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_camelCase__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var lodash_isArray__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/isArray */ \"webpack/sharing/consume/default/lodash/isArray/lodash/isArray_uiComponentLibrary\");\n/* harmony import */ var lodash_isArray__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(lodash_isArray__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash/isEmpty */ \"webpack/sharing/consume/default/lodash/isEmpty/lodash/isEmpty_uiComponentLibrary\");\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var lodash_isObject__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash/isObject */ \"webpack/sharing/consume/default/lodash/isObject/lodash/isObject_uiComponentLibrary\");\n/* harmony import */ var lodash_isObject__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(lodash_isObject__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash/get */ \"webpack/sharing/consume/default/lodash/get/lodash/get_uiComponentLibrary\");\n/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(lodash_get__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var lodash_has__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash/has */ \"webpack/sharing/consume/default/lodash/has/lodash/has_uiComponentLibrary\");\n/* harmony import */ var lodash_has__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(lodash_has__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! moment */ \"webpack/sharing/consume/default/moment_uiComponentLibrary\");\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var immutable__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! immutable */ \"webpack/sharing/consume/default/immutable_uiComponentLibrary\");\n/* harmony import */ var immutable__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(immutable__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _c3_ui_UiSdlLogger__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @c3/ui/UiSdlLogger */ \"webpack/container/remote/@c3/ui/UiSdlLogger_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlLogger__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlLogger__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @c3/ui/UiSdlConnected */ \"webpack/sharing/consume/default/@c3/ui/UiSdlConnected_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @c3/ui/UiSdlComponent */ \"webpack/sharing/consume/default/@c3/ui/UiSdlComponent_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_15__);\n/*\n * Copyright 2009-2024 C3 AI (www.c3.ai). All Rights Reserved.\n * This material, including without limitation any software, is the confidential trade secret and proprietary\n * information of C3 and its licensors. Reproduction, use and/or distribution of this material in any form is\n * strictly prohibited except as set forth in a written license agreement with C3 and/or its authorized distributors.\n * This material may be covered by one or more patents or pending patent applications.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Helper function to recursively initialize the field-to-value mapping\n * @param {Object} formFieldValues\n *                   The current field-to-value mapping\n * @param {Object} groupConfig\n *                   The configuration of an object that has multiple fields in it\n */\nfunction initializeFieldValueMapping(formFieldValues, groupConfig) {\n  let updatedFieldValues = formFieldValues;\n  _get__(\"each\")(groupConfig.fields, child => {\n    if (child.fields) {\n      updatedFieldValues = _get__(\"initializeFieldValueMapping\")(updatedFieldValues, child);\n    } else {\n      updatedFieldValues[child.fieldName] = child.value;\n    }\n  });\n  return updatedFieldValues;\n}\nfunction mapDataForFieldSetting(fieldSetting) {\n  const data = {};\n  if (fieldSetting && fieldSetting.dataSpec) {\n    const dataSourceKey = _get__(\"getFieldSettingDataConfigId\")(fieldSetting); // eslint-disable-line @typescript-eslint/no-use-before-define\n\n    // Set the value to be the dataDestinationField for UiSdlFormFieldDataSpecSetting\n    data[dataSourceKey] = fieldSetting.fieldCollection;\n  }\n  return data;\n}\nfunction getComponentNameForFieldSetting(fieldSetting) {\n  return fieldSetting.componentType;\n}\nfunction mapFieldConfig(fieldSetting, dataConfig, componentDataSourceKey) {\n  // These props will be set if fieldSetting.dataSpec is defined (below)\n  const undefinedDataProps = {\n    dataToPropsSpecs: undefined,\n    dataPath: undefined,\n    dataSource: undefined,\n    descriptionField: undefined,\n    displayField: undefined,\n    valueField: undefined\n  };\n\n  // If this is a componentRef, just remap fieldName to field\n  if (fieldSetting.componentRef) {\n    return Object.assign({}, fieldSetting, {\n      field: fieldSetting.fieldName\n    }, undefinedDataProps);\n  }\n\n  // Map the fieldSetting from UiSdlForm to the field in SDLForm\n  const validInput = _get__(\"sanitizeFieldSetting\")(fieldSetting); // eslint-disable-line @typescript-eslint/no-use-before-define\n  Object.assign(dataConfig, _get__(\"mapDataForFieldSetting\")(fieldSetting));\n  const fieldConfig = Object.assign({}, validInput, {\n    component: _get__(\"getComponentNameForFieldSetting\")(fieldSetting),\n    dropdownIcon: fieldSetting.dropdownIcon,\n    field: fieldSetting.fieldName\n  }, undefinedDataProps, _get__(\"mapDataPropsForFieldSetting\")(fieldSetting, componentDataSourceKey) // eslint-disable-line @typescript-eslint/no-use-before-define\n  );\n  if (fieldConfig.fields) {\n    fieldConfig.fields = _get__(\"mapFieldCollectionConfig\")(fieldConfig.fields, dataConfig, componentDataSourceKey); // eslint-disable-line @typescript-eslint/no-use-before-define\n  } else if (fieldConfig.childFields) {\n    fieldConfig.childFields = _get__(\"mapFieldCollectionConfig\")(fieldConfig.childFields, dataConfig, componentDataSourceKey); // eslint-disable-line @typescript-eslint/no-use-before-define\n  }\n  return fieldConfig;\n}\nfunction mapFieldCollectionConfig(fieldSettingCollection, dataConfig, componentDataSourceKey, extendableMapFieldConfig) {\n  return _get__(\"compact\")(_get__(\"map\")(fieldSettingCollection, function (fieldSetting) {\n    try {\n      return extendableMapFieldConfig ? extendableMapFieldConfig(fieldSetting, dataConfig, componentDataSourceKey) : _get__(\"mapFieldConfig\")(fieldSetting, dataConfig, componentDataSourceKey);\n    } catch (e) {\n      _get__(\"UiSdlLogger\")('UiSdlFormBase.mapFieldCollectionConfig').error(e);\n      return undefined;\n    }\n  }));\n}\nfunction disableByDefault(actionButton) {\n  if (actionButton && actionButton.disabled !== false) {\n    return {\n      ...actionButton,\n      disabled: true\n    };\n  }\n  return actionButton;\n}\n\n/**\n * Generates the equivalent fieldConfig for SDLForm from UiSdlForm props.\n * Handles setting the \"data sources\" from dataSpecs on the SDLForm dataConfig (SDLForm.props.data):\n *    The SDLForm takes in a data prop object (dataConfig) where the keys are \"nicknames\" for data sources.\n *    The nicknames are later used in \"dataSource\" field of fieldConfig or used in\n *    \"dataSource\" of \"dataToPropsSpec\".\n *    In our prop translation here, we will generate the \"nicknames\" through `getFieldSettingDataConfigId`.\n * @param fieldSet\n * @param dataConfig\n */\nfunction mapFieldSetConfig(fieldSet, dataConfig, componentDataSourceKey, extendableMapFieldConfig) {\n  return {\n    collapsible: fieldSet.collapsible,\n    collapseOnLoad: fieldSet.collapseOnLoad,\n    collapsed: fieldSet.collapsed,\n    title: fieldSet.title,\n    link: fieldSet.link,\n    infoTooltipText: fieldSet.infoTooltipText,\n    actionButton: _get__(\"disableByDefault\")(fieldSet.actionButton),\n    secondaryText: fieldSet.secondaryText,\n    hidden: fieldSet.hidden,\n    clearable: fieldSet.clearable,\n    fields: _get__(\"mapFieldCollectionConfig\")(fieldSet.fields, dataConfig, componentDataSourceKey, extendableMapFieldConfig)\n  };\n}\n\n/**\n * Helper function to determine if value is an array of Dates\n *\n * @param value any value\n * @returns boolean whether it is an array of Dates\n */\nfunction isDateArray(value) {\n  return _get__(\"isArray\")(value) && !_get__(\"isEmpty\")(value) && value.every(date => date instanceof Date || date === undefined);\n}\n\n/**\n * Formats date to local time in formFieldValues\n * @param {any} formFieldValues form field value object mapping\n * @param {string} field field name of formFieldValues\n * @param {unknown} value field value of formFieldValues\n * @return {any} the updated formFieldValues where date is formatted in local time\n */\nfunction formatFormFieldValuesDateToLocalTime(formFieldValues, field, value) {\n  if (value instanceof Date) {\n    formFieldValues[field] = _get__(\"moment\")(value).format();\n  } else if (_get__(\"isDateArray\")(value)) {\n    formFieldValues[field] = value.map(date => date ? _get__(\"moment\")(date).format() : undefined);\n  } else {\n    formFieldValues[field] = value;\n  }\n  return formFieldValues;\n}\nfunction getFormFieldValuesFromState(componentId, state) {\n  var _get__2;\n  return (_get__2 = _get__(\"getConfigFromState\")(componentId, state, ['formFieldValues'])) === null || _get__2 === void 0 ? void 0 : _get__2.toJS();\n}\nfunction mapDataPropsForFieldSetting(fieldSetting, componentDataSourceKey) {\n  const dataProps = {\n    dataToPropsSpecs: _get__(\"map\")(fieldSetting.dataPropSpecs, function (dataPropSpec) {\n      return {\n        dataSource: componentDataSourceKey,\n        prop: dataPropSpec.prop,\n        dataPath: dataPropSpec.dataPath\n      };\n    }),\n    displayField: fieldSetting.displayField,\n    valueField: fieldSetting.valueField\n  };\n  if (fieldSetting.dataSpec) {\n    // We only need to generate a key if dataSpec exists\n    const dataSourceKey = _get__(\"getFieldSettingDataConfigId\")(fieldSetting); // eslint-disable-line @typescript-eslint/no-use-before-define\n\n    // Handle a field specifying its values from a data source\n    dataProps.dataSource = dataSourceKey; // DataSource is the dataSpec that has been defined on this field\n    dataProps.dataPath = fieldSetting.dataSpec.dataPath;\n    dataProps.descriptionField = fieldSetting.dataSpec.descriptionField;\n\n    // TODO: UI-8463 Change displayField and valueField to UiSdlFieldBasedDataSpecSetting\n    dataProps.displayField = fieldSetting.dataSpec.displayField;\n    dataProps.valueField = fieldSetting.dataSpec.valueField;\n  }\n  return dataProps;\n}\nfunction inputChangeAction(id, _event, data) {\n  if (data) {\n    data.componentId = id;\n  }\n  return {\n    type: id + '.INPUT_CHANGE',\n    payload: data\n  };\n}\nfunction triggerInputAction(id, fieldName, actionSuffix) {\n  return {\n    type: id + `.TRIGGER_INPUT_ACTION_${actionSuffix}`,\n    payload: {\n      componentId: id,\n      field: fieldName\n    }\n  };\n}\nfunction inputChangeEffect(state, action) {\n  var _get__4;\n  const {\n    componentId,\n    field,\n    value,\n    inputHasChanged\n  } = action.payload || {};\n  if (!field || inputHasChanged) {\n    return state;\n  }\n  let formFieldValues = _get__(\"getFormFieldValuesFromState\")(componentId, state);\n\n  // Initialize field value mapping\n  if (!formFieldValues) {\n    var _get__3;\n    formFieldValues = {};\n    const fieldSets = (_get__3 = _get__(\"getConfigFromState\")(componentId, state, ['dataSpec', 'fieldSets', 'value'])) === null || _get__3 === void 0 ? void 0 : _get__3.toJS();\n    _get__(\"each\")(_get__(\"flatten\")(fieldSets), function (fieldSetConfig) {\n      formFieldValues = _get__(\"initializeFieldValueMapping\")(formFieldValues, fieldSetConfig);\n    });\n  }\n  formFieldValues = _get__(\"formatFormFieldValuesDateToLocalTime\")(formFieldValues, field, value);\n  const children = (_get__4 = _get__(\"getConfigFromState\")(componentId, state, ['childIds'])) === null || _get__4 === void 0 ? void 0 : _get__4.toJSON();\n  if (children !== null && children !== void 0 && children.length) {\n    const childId = children.find(child => child.split('-')[2] === _get__(\"camelCase\")(field));\n    if (childId && _get__(\"getConfigFromState\")(childId, state, []) && !(value !== null && value !== void 0 && value.type) && value !== _get__(\"getConfigFromState\")(childId, state, ['value'])) {\n      state = _get__(\"setConfigInState\")(childId, state, ['value'], value);\n    }\n  }\n  return _get__(\"setConfigInState\")(componentId, state, ['formFieldValues'], formFieldValues);\n}\nfunction hideShowFieldAction(id, fieldName, hidden) {\n  const actionType = hidden ? 'HIDE' : 'SHOW';\n  return {\n    type: id + '.FIELD_' + actionType,\n    payload: {\n      fieldName: fieldName,\n      componentId: id\n    }\n  };\n}\nfunction storeChildComponentIdsAction(id, childId) {\n  return {\n    type: id + '.CHILD_COMPONENT_ID_STORE',\n    payload: {\n      childId,\n      id\n    }\n  };\n}\n\n/**\n * Returns array of all fields in the field configs\n * @param fieldConfigs - javascript array of field sets. Should not be UiSdlImmutableJS array\n * @param ignoreHidden - whether to include hidden fieldset fields in the result\n */\nfunction getFields(fieldConfigs, ignoreHidden = false) {\n  let fields = [];\n  _get__(\"each\")(_get__(\"flatten\")(fieldConfigs), fieldConfig => {\n    // Ignore hidden fields\n    if (!(fieldConfig.hidden && ignoreHidden)) {\n      if (fieldConfig.fields && typeof fieldConfig.fields !== 'function') {\n        fields = fields.concat(_get__(\"getFields\")(fieldConfig.fields, ignoreHidden));\n        // @ts-expect-error TODO: UI-8930 Investigate whether childFields is used for forms. Update typescript types as necessary.\n      } else if (fieldConfig.childFields) {\n        // @ts-expect-error TODO: UI-8930 Investigate whether childFields is used for forms. Update typescript types as necessary.\n        fields = fields.concat(_get__(\"getFields\")(fieldConfig.childFields, ignoreHidden));\n      } else {\n        fields.push(fieldConfig);\n      }\n    }\n  });\n  return fields;\n}\nfunction childComponentIdStoreReducer(state, action) {\n  const {\n    id,\n    childId\n  } = action.payload;\n  let childIds = _get__(\"getConfigFromState\")(id, state, ['childIds']) || _get__(\"fromJS\")([]);\n  if (childIds.indexOf(childId) !== -1) {\n    return state;\n  }\n  childIds = childIds.concat(childId);\n  return _get__(\"setConfigInState\")(id, state, ['childIds'], childIds);\n}\nfunction getFieldSetConfigsState(componentId, state) {\n  const optionsForPathToFieldSets = [['dataSpec', 'fieldSets', 'value'], ['dataSpec', 'fieldSets']];\n  let fieldSetConfigsState;\n  const pathToFieldSets = optionsForPathToFieldSets.find(path => {\n    var _get__5;\n    fieldSetConfigsState = (_get__5 = _get__(\"getConfigFromState\")(componentId, state, path)) === null || _get__5 === void 0 ? void 0 : _get__5.toJS();\n    if (fieldSetConfigsState) {\n      return true;\n    }\n  });\n  return {\n    fieldSetConfigsState,\n    pathToFieldSets\n  };\n}\nfunction fieldHideShowEffect(state, fieldName, hidden, componentId) {\n  const {\n    fieldSetConfigsState,\n    pathToFieldSets\n  } = _get__(\"getFieldSetConfigsState\")(componentId, state);\n  if (fieldSetConfigsState) {\n    const fields = _get__(\"getFields\")(fieldSetConfigsState);\n    const field = _get__(\"find\")(fields, {\n      fieldName: fieldName\n    });\n    if (field) {\n      field.hidden = hidden;\n      return _get__(\"setConfigInState\")(componentId, state, pathToFieldSets, fieldSetConfigsState);\n    }\n  }\n  return state;\n}\nfunction fieldHideEffect(state, action) {\n  var _action$payload, _action$payload2;\n  const fieldName = (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.fieldName;\n  const componentId = (_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.componentId;\n  return _get__(\"fieldHideShowEffect\")(state, fieldName, true, componentId);\n}\nfunction fieldShowEffect(state, action) {\n  var _action$payload3, _action$payload4;\n  const fieldName = (_action$payload3 = action.payload) === null || _action$payload3 === void 0 ? void 0 : _action$payload3.fieldName;\n  const componentId = (_action$payload4 = action.payload) === null || _action$payload4 === void 0 ? void 0 : _action$payload4.componentId;\n  return _get__(\"fieldHideShowEffect\")(state, fieldName, false, componentId);\n}\n\n/**\n * This reducer is used to reset the state of the formFieldValues when the data is loaded. This will be called for\n * each field in a form or filter panel that has their data re-fetched as the result of a change to a context variable\n * value.\n *\n * -----------------\n * | dropdownA   ^ |  => new value is selected\n * -----------------\n *\n * -----------------\n * | dropdownB   ^ |  => has context var which depends on value of dropdownA\n * -----------------\n *\n * -----------------\n * | dropdownC   ^ |  => has context var which depends on value of dropdownB\n * -----------------\n *\n * In above case, both dropdownB and dropdownC will have their data re-fetched, and should have their state value\n * cleared.\n */\nfunction loadedDataHandleReducer(state, action) {\n  var _action$payload5;\n  const componentId = (_action$payload5 = action.payload) === null || _action$payload5 === void 0 ? void 0 : _action$payload5.componentId;\n  const fieldSetConfigsState = _get__(\"getFieldSetConfigsState\")(componentId, state).fieldSetConfigsState;\n  if (!_get__(\"isEmpty\")(fieldSetConfigsState)) {\n    var _action$payload6;\n    /**\n     * It's important to note that the `updatedField` is the field whose data was re-fetched (dropdownB or dropdownC)\n     * as a result of a change to a context var value; NOT the field which had a new value selected (dropdownA)\n     */\n    const updatedField = _get__(\"inferFieldFromDsPath\")((_action$payload6 = action.payload) === null || _action$payload6 === void 0 ? void 0 : _action$payload6.sourceComponentId, fieldSetConfigsState);\n    if (!updatedField) {\n      /*\n       * This means that the data request for this field is likely from the top level of the form, not a field\n       * within the form. In this case, we don't need to do anything.\n       */\n      return state;\n    }\n    const updatedFieldName = updatedField.fieldName || '';\n    const fields = _get__(\"getFields\")(fieldSetConfigsState);\n    const fieldsWithContextVars = _get__(\"compact\")(fields.map(f => {\n      var _get__$dataSpec;\n      const path = f.filterElement ? 'filterElement.inputElement' : 'inputElement';\n      return (_get__$dataSpec = _get__(\"get\")(f, path, {}).dataSpec) === null || _get__$dataSpec === void 0 ? void 0 : _get__$dataSpec.contextVars;\n    }));\n    const shouldUpdate = updatedField.updateOnDataHandleWithContextVar;\n    if (fieldsWithContextVars.length && shouldUpdate) {\n      var _updatedField$inputEl, _updatedField$filterE;\n      const isMultiple = (updatedField === null || updatedField === void 0 || (_updatedField$inputEl = updatedField.inputElement) === null || _updatedField$inputEl === void 0 ? void 0 : _updatedField$inputEl.multiple) || (updatedField === null || updatedField === void 0 || (_updatedField$filterE = updatedField.filterElement) === null || _updatedField$filterE === void 0 || (_updatedField$filterE = _updatedField$filterE.inputElement) === null || _updatedField$filterE === void 0 ? void 0 : _updatedField$filterE.multiple);\n      let formFieldValues = _get__(\"getFormFieldValuesFromState\")(componentId, state);\n      if (_get__(\"isEmpty\")(formFieldValues)) {\n        return state;\n      }\n      formFieldValues = _get__(\"updateFormFieldValues\")(formFieldValues, updatedFieldName, isMultiple);\n      state = _get__(\"setConfigInState\")(componentId, state, ['formFieldValues'], formFieldValues);\n    }\n  }\n  return state;\n}\nfunction updateFormFieldValues(formFieldValues, updatedFieldName, isMultiple) {\n  /**\n   * `updatedFieldValue` will be an object if this is a filter panel, and a string or array if this is a form.\n   * If it's an object, we want to update the value at the `value` key.\n   * If it's not, we want to update the value itself.\n   */\n  let fieldValue;\n  if (_get__(\"isObject\")(formFieldValues[updatedFieldName]) && _get__(\"has\")(formFieldValues[updatedFieldName], 'value')) {\n    fieldValue = formFieldValues[updatedFieldName].value;\n    if (isMultiple) {\n      if (!_get__(\"isEmpty\")(fieldValue)) {\n        formFieldValues[updatedFieldName].value = [];\n      }\n    } else if (fieldValue) {\n      formFieldValues[updatedFieldName].value = '';\n    }\n  } else {\n    fieldValue = formFieldValues[updatedFieldName];\n    if (isMultiple) {\n      if (!_get__(\"isEmpty\")(fieldValue)) {\n        formFieldValues[updatedFieldName] = [];\n      }\n    } else if (fieldValue) {\n      formFieldValues[updatedFieldName] = '';\n    }\n  }\n  return formFieldValues;\n}\nfunction inferFieldFromDsPath(dsPath, fieldSetConfigState) {\n  var _fieldSetConfigState$;\n  /**\n   * We can safely assume that the first integer in the path is the index of the fieldset,\n   * and the second integer is the index of the field within the fieldset.\n   */\n  const pathArray = dsPath.split('_');\n  const pathIntegers = pathArray.filter(item => !isNaN(parseInt(item))).map(item => parseInt(item));\n  return fieldSetConfigState === null || fieldSetConfigState === void 0 || (_fieldSetConfigState$ = fieldSetConfigState[pathIntegers[0]]) === null || _fieldSetConfigState$ === void 0 || (_fieldSetConfigState$ = _fieldSetConfigState$.fields) === null || _fieldSetConfigState$ === void 0 ? void 0 : _fieldSetConfigState$[pathIntegers[1]];\n}\nfunction prepareFieldSetsForRendering(fieldSets, dataConfig, componentDataSourceKey, extendableMapFieldConfig) {\n  var _fieldSets;\n  const newDataConfig = Object.assign({}, dataConfig);\n  const objFieldSets = fieldSets && fieldSets.value && fieldSets.type === '[UiSdlMultiStepFormFieldSet]';\n  fieldSets = Array.isArray(fieldSets) ? fieldSets : (_fieldSets = fieldSets) === null || _fieldSets === void 0 ? void 0 : _fieldSets.value;\n  const fieldSetsForRendering = objFieldSets ? _get__(\"map\")(fieldSets, arrayFieldSet => {\n    const subFieldSets = [];\n    _get__(\"map\")(arrayFieldSet.fieldSets, fieldSet => {\n      subFieldSets.push(_get__(\"mapFieldSetConfig\")(fieldSet, newDataConfig, componentDataSourceKey, extendableMapFieldConfig));\n    });\n    return {\n      title: arrayFieldSet.title,\n      description: arrayFieldSet.secondaryText,\n      infoTooltipText: arrayFieldSet.infoTooltipText,\n      fieldSets: subFieldSets\n    };\n  }) : _get__(\"map\")(fieldSets, fieldSet => _get__(\"mapFieldSetConfig\")(fieldSet, newDataConfig, componentDataSourceKey, extendableMapFieldConfig));\n  return {\n    fieldSets: fieldSetsForRendering,\n    dataConfig: newDataConfig\n  };\n}\n\n/**\n * Manually exporting helper function for UiSdlFilterPanel\n */\nfunction getFieldSettingDataConfigId(fieldSetting) {\n  // Fields should be unique across all UiSdlFormFieldDataSpecSetting so let's use it as the key\n  return fieldSetting.fieldName;\n}\n\n/**\n * Function to filter the invalid props for inputs and return only the valid ones. Validity is determine by looking at\n * the props the input declares in its .jsx file.\n * @param fieldSetting the field configuration\n * @return the configurations in the fieldSetting configs that are valid\n */\nfunction sanitizeFieldSetting(fieldSetting) {\n  const inputElement = fieldSetting.inputElement;\n  return Object.assign({}, fieldSetting, {\n    inputElement: inputElement\n  });\n}\n\n\n\n\n\n\nconst epics = {\n  ..._get__(\"epics0\")\n};\nconst reducers = {\n  ..._get__(\"reducers0\"),\n  INPUT_CHANGE: _get__(\"inputChangeEffect\"),\n  FIELD_HIDE: _get__(\"fieldHideEffect\"),\n  FIELD_SHOW: _get__(\"fieldShowEffect\"),\n  CHILD_COMPONENT_ID_STORE: _get__(\"childComponentIdStoreReducer\"),\n  LOADED_DATA_HANDLE: _get__(\"loadedDataHandleReducer\")\n};\nconst actionCreators = {\n  ..._get__(\"actionCreators0\"),\n  triggerInputAction: _get__(\"triggerInputAction\"),\n  inputChangeAction: _get__(\"inputChangeAction\"),\n  storeChildComponentIdsAction: _get__(\"storeChildComponentIdsAction\"),\n  hideShowFieldAction: _get__(\"hideShowFieldAction\")\n};\nconst defaultValues = {\n  \"triggersRegistered\": false,\n  \"wrapWithMetadataId\": false\n};\n\n\n\nfunction _getGlobalObject() {\n  try {\n    if (!!__webpack_require__.g) {\n      return __webpack_require__.g;\n    }\n  } catch (e) {\n    try {\n      if (!!window) {\n        return window;\n      }\n    } catch (e) {\n      return this;\n    }\n  }\n}\n;\nvar _RewireModuleId__ = null;\nfunction _getRewireModuleId__() {\n  if (_RewireModuleId__ === null) {\n    let globalVariable = _getGlobalObject();\n    if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {\n      globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0;\n    }\n    _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++;\n  }\n  return _RewireModuleId__;\n}\nfunction _getRewireRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__;\n}\nfunction _getRewireExportsRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__;\n}\nconst _sync_internal_state_with_exports__ = false;\nconst _exports_to_reset__ = new Map();\nfunction _record_export_to_reset__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  if (!_exports_to_reset__.has(variableName)) {\n    _exports_to_reset__.set(variableName, value);\n  }\n}\nfunction _restore_exports__() {\n  const entries = _exports_to_reset__.entries();\n  for (const [variableName, value] of entries) {\n    exports[variableName] = value;\n  }\n  _exports_to_reset__.clear();\n}\nfunction _maybe_update_export__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  _record_export_to_reset__(variableName, exports[variableName]);\n  exports[variableName] = value;\n}\nfunction _getRewiredData__() {\n  let moduleId = _getRewireModuleId__();\n  let registry = _getRewireRegistry__();\n  let rewireData = registry[moduleId];\n  if (!rewireData) {\n    registry[moduleId] = Object.create(null);\n    rewireData = registry[moduleId];\n  }\n  let exportsRegistry = _getRewireExportsRegistry__();\n  if (!exportsRegistry[moduleId]) {\n    exportsRegistry[moduleId] = _restore_exports__;\n  }\n  return rewireData;\n}\n(function registerResetAll() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable['__rewire_reset_all__']) {\n    theGlobalVariable['__rewire_reset_all__'] = function () {\n      theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n      const exportsRegistry = _getRewireExportsRegistry__();\n      for (const restoreFunc of Object.values(exportsRegistry)) {\n        restoreFunc();\n      }\n      theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n    };\n  }\n})();\nvar INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';\nlet _RewireAPI__ = {};\n(function () {\n  function addPropertyToAPIObject(name, value) {\n    Object.defineProperty(_RewireAPI__, name, {\n      value: value,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  addPropertyToAPIObject('__get__', _get__);\n  addPropertyToAPIObject('__GetDependency__', _get__);\n  addPropertyToAPIObject('__Rewire__', _set__);\n  addPropertyToAPIObject('__set__', _set__);\n  addPropertyToAPIObject('__reset__', _reset__);\n  addPropertyToAPIObject('__ResetDependency__', _reset__);\n  addPropertyToAPIObject('__with__', _with__);\n})();\nfunction _get__(variableName) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _get_original__(variableName);\n  } else {\n    var value = rewireData[variableName];\n    if (value === INTENTIONAL_UNDEFINED) {\n      return undefined;\n    } else {\n      return value;\n    }\n  }\n}\nfunction _get_original__(variableName) {\n  switch (variableName) {\n    case \"each\":\n      return (lodash_each__WEBPACK_IMPORTED_MODULE_0___default());\n    case \"initializeFieldValueMapping\":\n      return initializeFieldValueMapping;\n    case \"getFieldSettingDataConfigId\":\n      return getFieldSettingDataConfigId;\n    case \"sanitizeFieldSetting\":\n      return sanitizeFieldSetting;\n    case \"mapDataForFieldSetting\":\n      return mapDataForFieldSetting;\n    case \"getComponentNameForFieldSetting\":\n      return getComponentNameForFieldSetting;\n    case \"mapDataPropsForFieldSetting\":\n      return mapDataPropsForFieldSetting;\n    case \"mapFieldCollectionConfig\":\n      return mapFieldCollectionConfig;\n    case \"compact\":\n      return (lodash_compact__WEBPACK_IMPORTED_MODULE_4___default());\n    case \"map\":\n      return (lodash_map__WEBPACK_IMPORTED_MODULE_3___default());\n    case \"mapFieldConfig\":\n      return mapFieldConfig;\n    case \"UiSdlLogger\":\n      return _c3_ui_UiSdlLogger__WEBPACK_IMPORTED_MODULE_13__.withName;\n    case \"disableByDefault\":\n      return disableByDefault;\n    case \"isArray\":\n      return (lodash_isArray__WEBPACK_IMPORTED_MODULE_6___default());\n    case \"isEmpty\":\n      return (lodash_isEmpty__WEBPACK_IMPORTED_MODULE_7___default());\n    case \"moment\":\n      return (moment__WEBPACK_IMPORTED_MODULE_11___default());\n    case \"isDateArray\":\n      return isDateArray;\n    case \"getConfigFromState\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_14__.getConfigFromState;\n    case \"getFormFieldValuesFromState\":\n      return getFormFieldValuesFromState;\n    case \"flatten\":\n      return (lodash_flatten__WEBPACK_IMPORTED_MODULE_2___default());\n    case \"formatFormFieldValuesDateToLocalTime\":\n      return formatFormFieldValuesDateToLocalTime;\n    case \"camelCase\":\n      return (lodash_camelCase__WEBPACK_IMPORTED_MODULE_5___default());\n    case \"setConfigInState\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_14__.setConfigInState;\n    case \"getFields\":\n      return getFields;\n    case \"fromJS\":\n      return immutable__WEBPACK_IMPORTED_MODULE_12__.fromJS;\n    case \"getFieldSetConfigsState\":\n      return getFieldSetConfigsState;\n    case \"find\":\n      return (lodash_find__WEBPACK_IMPORTED_MODULE_1___default());\n    case \"fieldHideShowEffect\":\n      return fieldHideShowEffect;\n    case \"inferFieldFromDsPath\":\n      return inferFieldFromDsPath;\n    case \"get\":\n      return (lodash_get__WEBPACK_IMPORTED_MODULE_9___default());\n    case \"updateFormFieldValues\":\n      return updateFormFieldValues;\n    case \"isObject\":\n      return (lodash_isObject__WEBPACK_IMPORTED_MODULE_8___default());\n    case \"has\":\n      return (lodash_has__WEBPACK_IMPORTED_MODULE_10___default());\n    case \"mapFieldSetConfig\":\n      return mapFieldSetConfig;\n    case \"epics0\":\n      return _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_15__.epics;\n    case \"reducers0\":\n      return _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_15__.reducers;\n    case \"inputChangeEffect\":\n      return inputChangeEffect;\n    case \"fieldHideEffect\":\n      return fieldHideEffect;\n    case \"fieldShowEffect\":\n      return fieldShowEffect;\n    case \"childComponentIdStoreReducer\":\n      return childComponentIdStoreReducer;\n    case \"loadedDataHandleReducer\":\n      return loadedDataHandleReducer;\n    case \"actionCreators0\":\n      return _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_15__.actionCreators;\n    case \"triggerInputAction\":\n      return triggerInputAction;\n    case \"inputChangeAction\":\n      return inputChangeAction;\n    case \"storeChildComponentIdsAction\":\n      return storeChildComponentIdsAction;\n    case \"hideShowFieldAction\":\n      return hideShowFieldAction;\n  }\n  return undefined;\n}\nfunction _assign__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _set_original__(variableName, value);\n  } else {\n    _maybe_update_export__(variableName, value);\n    return rewireData[variableName] = value;\n  }\n}\nfunction _set_original__(variableName, _value) {\n  switch (variableName) {}\n  return undefined;\n}\nfunction _update_operation__(operation, variableName, prefix) {\n  var oldValue = _get__(variableName);\n  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;\n  _assign__(variableName, newValue);\n  return prefix ? newValue : oldValue;\n}\nfunction _set__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (typeof variableName === 'object') {\n    Object.keys(variableName).forEach(function (name) {\n      rewireData[name] = variableName[name];\n    });\n    return function () {\n      Object.keys(variableName).forEach(function (name) {\n        _reset__(variableName);\n      });\n    };\n  } else {\n    _maybe_update_export__(variableName, value);\n    if (value === undefined) {\n      rewireData[variableName] = INTENTIONAL_UNDEFINED;\n    } else {\n      rewireData[variableName] = value;\n    }\n    return function () {\n      _reset__(variableName);\n    };\n  }\n}\nfunction _reset__(variableName) {\n  let rewireData = _getRewiredData__();\n  delete rewireData[variableName];\n  if (Object.keys(rewireData).length == 0) {\n    delete _getRewireRegistry__()[_getRewireModuleId__];\n  }\n  if (_exports_to_reset__.has(variableName)) {\n    exports[variableName] = _exports_to_reset__.get(variableName);\n    _exports_to_reset__.delete(variableName);\n  }\n}\nfunction _with__(object) {\n  let rewireData = _getRewiredData__();\n  var rewiredVariableNames = Object.keys(object);\n  var previousValues = {};\n  function reset() {\n    rewiredVariableNames.forEach(function (variableName) {\n      rewireData[variableName] = previousValues[variableName];\n    });\n  }\n  return function (callback) {\n    rewiredVariableNames.forEach(function (variableName) {\n      previousValues[variableName] = rewireData[variableName];\n      rewireData[variableName] = object[variableName];\n    });\n    let result = callback();\n    if (!!result && typeof result.then == 'function') {\n      result.then(reset).catch(reset);\n    } else {\n      reset();\n    }\n    return result;\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_RewireAPI__);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@c3/ui/UiSdlFormBase.ts_uiComponentLibrary\n");

/***/ })

}]);