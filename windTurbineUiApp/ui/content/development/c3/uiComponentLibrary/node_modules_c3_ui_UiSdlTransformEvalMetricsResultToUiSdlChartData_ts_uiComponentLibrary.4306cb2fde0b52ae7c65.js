"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkjs_webpack_c3_client_node"] = self["webpackChunkjs_webpack_c3_client_node"] || []).push([["node_modules_c3_ui_UiSdlTransformEvalMetricsResultToUiSdlChartData_ts_uiComponentLibrary"],{

/***/ "./node_modules/@c3/ui/UiSdlTransformEvalMetricsResultToUiSdlChartData.ts_uiComponentLibrary":
/*!********************************************************************************!*\
  !*** ./node_modules/@c3/ui/UiSdlTransformEvalMetricsResultToUiSdlChartData.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __GetDependency__: () => (/* binding */ _get__),\n/* harmony export */   __ResetDependency__: () => (/* binding */ _reset__),\n/* harmony export */   __RewireAPI__: () => (/* binding */ _RewireAPI__),\n/* harmony export */   __Rewire__: () => (/* binding */ _set__),\n/* harmony export */   __get__: () => (/* binding */ _get__),\n/* harmony export */   __set__: () => (/* binding */ _set__),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaultValues: () => (/* binding */ defaultValues),\n/* harmony export */   generateEvalMetricResultKey: () => (/* binding */ generateEvalMetricResultKey),\n/* harmony export */   generateSeriesId: () => (/* binding */ generateSeriesId),\n/* harmony export */   getDates: () => (/* binding */ getDates),\n/* harmony export */   getSerializedValue: () => (/* binding */ getSerializedValue),\n/* harmony export */   transform: () => (/* binding */ transform)\n/* harmony export */ });\n/* harmony import */ var moment_timezone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment-timezone */ \"./node_modules/moment-timezone/index.js_uiComponentLibrary\");\n/* harmony import */ var moment_timezone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment_timezone__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_isFunction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isFunction */ \"webpack/sharing/consume/default/lodash/isFunction/lodash/isFunction_uiComponentLibrary\");\n/* harmony import */ var lodash_isFunction__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_isFunction__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _c3_ui_Interval__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @c3/ui/Interval */ \"webpack/container/remote/@c3/ui/Interval_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_Interval__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_Interval__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _c3_ui_UiSdlWithTimeZone__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @c3/ui/UiSdlWithTimeZone */ \"webpack/container/remote/@c3/ui/UiSdlWithTimeZone_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlWithTimeZone__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlWithTimeZone__WEBPACK_IMPORTED_MODULE_3__);\n/*\n * Copyright 2009-2024 C3 AI (www.c3.ai). All Rights Reserved.\n * This material, including without limitation any software, is the confidential trade secret and proprietary\n * information of C3 and its licensors. Reproduction, use and/or distribution of this material in any form is\n * strictly prohibited except as set forth in a written license agreement with C3 and/or its authorized distributors.\n * This material may be covered by one or more patents or pending patent applications.\n */\n\n\n\n\n\nconst validMomentIntervals = ['millisecond', 'milliseconds', 'ms', 'second', 'seconds', 's', 'minute', 'minutes', 'm', 'hour', 'hours', 'h', 'day', 'days', 'd', 'week', 'weeks', 'w', 'month', 'months', 'M', 'quarter', 'quarters', 'Q', 'year', 'years', 'y'];\nfunction getSerializedValue(obj, fieldName) {\n  return _get__(\"isFunction\")(obj[fieldName]) ? obj[fieldName]() : obj[fieldName];\n}\nfunction generateSeriesId(id, metricName, bindingsSuffix) {\n  return id + ' - ' + metricName + (bindingsSuffix || '');\n}\n\n/**\n * Checks if a date string has explicitly defined a time zone in it\n * @param {Date} date - the date string to check in ISO format\n * @returns {Boolean} true if the date string has a time zone in it, false otherwise\n */\nfunction hasTimeZone(date) {\n  var _date$split$;\n  const time = (_date$split$ = date.split('T')[1]) !== null && _date$split$ !== void 0 ? _date$split$ : '';\n  return time.includes('Z') || time.includes('+') || time.includes('-');\n}\n\n/**\n * Gets the dates for the timeseries based on the interval and the number of data points\n * @param {TimeseriesInfo} timeseriesInfo - the timeseries information\n * @param {Number} dataLength - the number of data points\n * @returns {String[]} the array of dates in ISO format or YYYY-MM-DDTHH:mm:ss.SSS (local timezone) format if noTimeZoneConversion is true\n * @example\n * getDates({\n *  interval: 'MONTH',\n * timeZone: {\n * name: 'UTC',\n * },\n * start: '2023-11-01T00:00:00.000Z',\n * end: '2024-05-01T00:00:00.000Z',\n * }, 7);\n * // returns [\n * '2023-11-01T00:00:00.000Z',\n * '2023-12-01T00:00:00.000Z',\n * '2024-01-01T00:00:00.000Z',\n * '2024-02-01T00:00:00.000Z',\n * '2024-03-01T00:00:00.000Z',\n * '2024-04-01T00:00:00.000Z',\n * '2024-05-01T00:00:00.000Z',\n * ]\n */\nfunction getDates(timeseriesInfo, dataLength) {\n  var _timeseriesInfo$timeZ, _timeseriesInfo$timeZ2, _timeseriesInfo$timeZ3;\n  const interval = timeseriesInfo.interval;\n  const noTimeZoneConversion = ((_timeseriesInfo$timeZ = timeseriesInfo.timeZone) === null || _timeseriesInfo$timeZ === void 0 ? void 0 : _timeseriesInfo$timeZ.name) === 'NONE' || ((_timeseriesInfo$timeZ2 = timeseriesInfo.timeZone) === null || _timeseriesInfo$timeZ2 === void 0 ? void 0 : _timeseriesInfo$timeZ2.name) == null;\n  const timeZone = noTimeZoneConversion ? '' : (_timeseriesInfo$timeZ3 = timeseriesInfo.timeZone) === null || _timeseriesInfo$timeZ3 === void 0 ? void 0 : _timeseriesInfo$timeZ3.name;\n  const startDate = _get__(\"parseTimestampWithTimezone\")(timeZone, timeseriesInfo.start);\n  const endDate = _get__(\"parseTimestampWithTimezone\")(timeZone, timeseriesInfo.end);\n  const datePoints = [noTimeZoneConversion ? startDate.format('YYYY-MM-DDTHH:mm:ss.SSS') : startDate.toISOString()];\n  let currentDate = startDate.clone();\n  const minuteIntervalDurations = {\n    [_get__(\"Interval\").FIVE_MINUTE]: 5,\n    [_get__(\"Interval\").TEN_MINUTE]: 10,\n    [_get__(\"Interval\").QUARTER_HOUR]: 15,\n    [_get__(\"Interval\").HALF_HOUR]: 30\n  };\n  while (currentDate.isBefore(endDate) && datePoints.length < dataLength) {\n    if (interval in minuteIntervalDurations) {\n      currentDate.add(minuteIntervalDurations[interval], 'minutes');\n    } else if (_get__(\"Interval\")[interval] && _get__(\"validMomentIntervals\").includes(interval.toLowerCase())) {\n      currentDate.add(1, interval.toLowerCase());\n    } else {\n      console.error(`Invalid interval: ${interval}`);\n    }\n    datePoints.push(noTimeZoneConversion ? currentDate.format('YYYY-MM-DDTHH:mm:ss.SSS') : currentDate.toISOString());\n  }\n  return datePoints;\n}\n\n/**\n * Checks if the time zone conversion should be skipped\n * @param timeZone - the time zone to convert the timestamp to\n * @returns {Boolean} true if the time zone is NONE, false otherwise\n */\nfunction shouldSkipTimeZoneConversion(timeZone) {\n  return timeZone === 'NONE';\n}\n\n/**\n * Parses the timestamp adding a 'Z' (zero timezone) to the end if the time zone conversion is not needed and the timestamp does not have a time zone appended to it\n * or converts the timestamp to the time zone specified in the time zone parameter\n * @param {String} timeZone - the time zone to convert the timestamp to\n * @param {String} the string date to check in ISO format that could or could not have a time zone appended to it\n * @returns {Moment} Moment object\n */\nfunction parseTimestampWithTimezone(timeZone, timestamp) {\n  const skipTimeZoneConversion = _get__(\"shouldSkipTimeZoneConversion\")(timeZone);\n  let adjustedTimestamp;\n  if (skipTimeZoneConversion && !_get__(\"hasTimeZone\")(timestamp)) {\n    adjustedTimestamp = timestamp + 'Z';\n  } else if (_get__(\"isValidTimeZoneId\")(timeZone) && !skipTimeZoneConversion) {\n    adjustedTimestamp = _get__(\"adjustDateToTimeZone\")(timestamp, timeZone);\n  } else {\n    adjustedTimestamp = timestamp;\n  }\n  return _get__(\"momentTZ\").tz(adjustedTimestamp, timeZone);\n}\nfunction getNumberofIntervals(timeseriesInfo) {\n  const startDate = new Date(timeseriesInfo.start);\n  const endDate = new Date(timeseriesInfo.end);\n  const interval = timeseriesInfo.interval;\n  const numInterval = (endDate.getTime() - startDate.getTime()) / _get__(\"getMSinInterval\")(interval);\n  // Truncating the number of intervals\n  return numInterval | 0;\n}\nfunction getMSinInterval(interval) {\n  switch (interval) {\n    case 'SECOND':\n      return 1000;\n    case 'MINUTE':\n      return 1000 * 60;\n    case 'FIVE_MINUTE':\n      return 1000 * 60 * 5;\n    case 'TEN_MINUTE':\n      return 1000 * 60 * 10;\n    case 'QUARTER_HOUR':\n      return 1000 * 60 * 15;\n    case 'HALF_HOUR':\n      return 1000 * 60 * 30;\n    case 'HOUR':\n      return 1000 * 60 * 60;\n    case 'DAY':\n      return 1000 * 60 * 60 * 24;\n    case 'MONTH':\n      return 1000 * 60 * 60 * 24 * 30;\n    case 'YEAR':\n      return 1000 * 60 * 60 * 24 * 365;\n    default:\n      return 1000 * 60 * 60 * 24;\n  }\n}\nfunction convertMissingData(missing) {\n  return missing.map(value => value ? 100 : 0);\n}\nfunction transform(evalMetricsResult) {\n  let labels = [];\n  const allSeries = [];\n  const allMissing = [];\n  let interval;\n  const metricsResult = evalMetricsResult.result ? evalMetricsResult.result : {\n    ROLLUP: evalMetricsResult\n  };\n  for (const sourceId in metricsResult) {\n    const metricsObj = metricsResult[sourceId];\n    for (const metricName in metricsObj) {\n      // Need to avoid properties like `_type` etc.\n      if (metricsObj.propertyIsEnumerable(metricName)) {\n        const timeseriesObj = metricsObj[metricName];\n        const timeseriesInfo = timeseriesObj === null || timeseriesObj === void 0 ? void 0 : timeseriesObj.tsInfo;\n        const currentSeries = {};\n\n        // Check to ensure that _data exists and ignore the series if not.\n        if (timeseriesObj !== null && timeseriesObj !== void 0 && timeseriesObj._data) {\n          var _timeseriesInfo$_size;\n          const id = _get__(\"generateSeriesId\")(sourceId, metricName);\n          const numIntervals = (_timeseriesInfo$_size = timeseriesInfo._size) !== null && _timeseriesInfo$_size !== void 0 ? _timeseriesInfo$_size : _get__(\"getNumberofIntervals\")(timeseriesInfo);\n          if (timeseriesObj._data.length == 1 && numIntervals > 1) {\n            const expanded_data = new Array(numIntervals).fill(timeseriesObj._data[0]);\n            timeseriesObj._data = expanded_data;\n          }\n\n          /**\n           * The evalMetricsResult could have been serialized into JSON by the server, making some methods into fields\n           * instead. Use _.isFunction to determine whether certain methods have been serialized.\n           */\n\n          /**\n           * Work around to check if labels are already defined from the input EvalMetricsResult\n           * If they are, use those instead of defining it there\n           */\n          if (timeseriesInfo.labels) {\n            labels = _get__(\"getSerializedValue\")(timeseriesInfo, 'labels');\n          }\n          if (!labels.length) {\n            labels = _get__(\"getDates\")(timeseriesInfo, timeseriesObj._data.length);\n          }\n          if (!interval) {\n            var _get__2;\n            interval = (_get__2 = _get__(\"getSerializedValue\")(timeseriesObj, 'interval')) !== null && _get__2 !== void 0 ? _get__2 : _get__(\"getSerializedValue\")(timeseriesInfo, 'interval');\n          }\n          currentSeries.values = _get__(\"getSerializedValue\")(timeseriesObj, '_data') || [];\n          currentSeries.unit = _get__(\"getSerializedValue\")(timeseriesObj, 'unit');\n          currentSeries.id = id;\n          currentSeries.name = id;\n          allSeries.push(currentSeries);\n          let missing = timeseriesInfo === null || timeseriesInfo === void 0 ? void 0 : timeseriesInfo.missing;\n          if (!missing) {\n            missing = Array(currentSeries.values.length).fill(0);\n          } else {\n            var _missing;\n            missing = _get__(\"convertMissingData\")((_missing = missing) !== null && _missing !== void 0 ? _missing : []);\n          }\n          allMissing.push(missing);\n        } else {\n          var _timeseriesInfo$missi;\n          const id = _get__(\"generateSeriesId\")(sourceId, metricName);\n\n          /**\n           * The evalMetricsResult could have been serialized into JSON by the server, making some methods into fields\n           * instead. Use _.isFunction to determine whether certain methods have been serialized.\n           */\n          if (!interval) {\n            var _get__3;\n            interval = (_get__3 = _get__(\"getSerializedValue\")(timeseriesObj, 'interval')) !== null && _get__3 !== void 0 ? _get__3 : _get__(\"getSerializedValue\")(timeseriesInfo, 'interval');\n          }\n          const value = Array(timeseriesInfo === null || timeseriesInfo === void 0 ? void 0 : timeseriesInfo.missing.length).fill(undefined);\n          currentSeries.values = value;\n          currentSeries.unit = _get__(\"getSerializedValue\")(timeseriesObj, 'unit');\n          currentSeries.id = id;\n          currentSeries.name = id;\n          allSeries.push(currentSeries);\n          const missing = _get__(\"convertMissingData\")((_timeseriesInfo$missi = timeseriesInfo === null || timeseriesInfo === void 0 ? void 0 : timeseriesInfo.missing) !== null && _timeseriesInfo$missi !== void 0 ? _timeseriesInfo$missi : []);\n          allMissing.push(missing);\n        }\n      }\n    }\n  }\n  return {\n    interval: interval,\n    labels: labels,\n    series: allSeries,\n    missing: allMissing,\n    xAxisType: 'timeseries'\n  };\n}\nfunction generateEvalMetricResultKey(expression, values) {\n  const key = expression + Object.keys(values).sort().map(function (k) {\n    return k + values[k];\n  });\n\n  /**\n   *  Hash the key.\n   *  The whole function will be stringified used as a Lambda function,\n   *  so importing or calling a seperate function to do the hash logic won't work.\n   *  Borrowing the hash algorithm from https://en.wikipedia.org/wiki/Jenkins_hash_function\n   */\n  let hash = 0;\n  for (let charIndex = 0; charIndex < key.length; ++charIndex) {\n    hash += key.charCodeAt(charIndex);\n    hash += hash << 10;\n    hash ^= hash >> 6;\n  }\n  hash += hash << 3;\n  hash ^= hash >> 11;\n  // 4,294,967,295 is FFFFFFFF, the maximum 32 bit unsigned integer value, used here as a mask.\n  return expression + '_' + ((hash + (hash << 15) & 4294967295) >>> 0).toString(16);\n}\n\nconst defaultValues = {};\nfunction _getGlobalObject() {\n  try {\n    if (!!__webpack_require__.g) {\n      return __webpack_require__.g;\n    }\n  } catch (e) {\n    try {\n      if (!!window) {\n        return window;\n      }\n    } catch (e) {\n      return this;\n    }\n  }\n}\n;\nvar _RewireModuleId__ = null;\nfunction _getRewireModuleId__() {\n  if (_RewireModuleId__ === null) {\n    let globalVariable = _getGlobalObject();\n    if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {\n      globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0;\n    }\n    _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++;\n  }\n  return _RewireModuleId__;\n}\nfunction _getRewireRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__;\n}\nfunction _getRewireExportsRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__;\n}\nconst _sync_internal_state_with_exports__ = false;\nconst _exports_to_reset__ = new Map();\nfunction _record_export_to_reset__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  if (!_exports_to_reset__.has(variableName)) {\n    _exports_to_reset__.set(variableName, value);\n  }\n}\nfunction _restore_exports__() {\n  const entries = _exports_to_reset__.entries();\n  for (const [variableName, value] of entries) {\n    exports[variableName] = value;\n  }\n  _exports_to_reset__.clear();\n}\nfunction _maybe_update_export__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  _record_export_to_reset__(variableName, exports[variableName]);\n  exports[variableName] = value;\n}\nfunction _getRewiredData__() {\n  let moduleId = _getRewireModuleId__();\n  let registry = _getRewireRegistry__();\n  let rewireData = registry[moduleId];\n  if (!rewireData) {\n    registry[moduleId] = Object.create(null);\n    rewireData = registry[moduleId];\n  }\n  let exportsRegistry = _getRewireExportsRegistry__();\n  if (!exportsRegistry[moduleId]) {\n    exportsRegistry[moduleId] = _restore_exports__;\n  }\n  return rewireData;\n}\n(function registerResetAll() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable['__rewire_reset_all__']) {\n    theGlobalVariable['__rewire_reset_all__'] = function () {\n      theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n      const exportsRegistry = _getRewireExportsRegistry__();\n      for (const restoreFunc of Object.values(exportsRegistry)) {\n        restoreFunc();\n      }\n      theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n    };\n  }\n})();\nvar INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';\nlet _RewireAPI__ = {};\n(function () {\n  function addPropertyToAPIObject(name, value) {\n    Object.defineProperty(_RewireAPI__, name, {\n      value: value,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  addPropertyToAPIObject('__get__', _get__);\n  addPropertyToAPIObject('__GetDependency__', _get__);\n  addPropertyToAPIObject('__Rewire__', _set__);\n  addPropertyToAPIObject('__set__', _set__);\n  addPropertyToAPIObject('__reset__', _reset__);\n  addPropertyToAPIObject('__ResetDependency__', _reset__);\n  addPropertyToAPIObject('__with__', _with__);\n})();\nfunction _get__(variableName) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _get_original__(variableName);\n  } else {\n    var value = rewireData[variableName];\n    if (value === INTENTIONAL_UNDEFINED) {\n      return undefined;\n    } else {\n      return value;\n    }\n  }\n}\nfunction _get_original__(variableName) {\n  switch (variableName) {\n    case \"isFunction\":\n      return (lodash_isFunction__WEBPACK_IMPORTED_MODULE_1___default());\n    case \"parseTimestampWithTimezone\":\n      return parseTimestampWithTimezone;\n    case \"Interval\":\n      return (_c3_ui_Interval__WEBPACK_IMPORTED_MODULE_2___default());\n    case \"validMomentIntervals\":\n      return validMomentIntervals;\n    case \"shouldSkipTimeZoneConversion\":\n      return shouldSkipTimeZoneConversion;\n    case \"hasTimeZone\":\n      return hasTimeZone;\n    case \"isValidTimeZoneId\":\n      return _c3_ui_UiSdlWithTimeZone__WEBPACK_IMPORTED_MODULE_3__.isValidTimeZoneId;\n    case \"adjustDateToTimeZone\":\n      return _c3_ui_UiSdlWithTimeZone__WEBPACK_IMPORTED_MODULE_3__.adjustDateToTimeZone;\n    case \"momentTZ\":\n      return (moment_timezone__WEBPACK_IMPORTED_MODULE_0___default());\n    case \"getMSinInterval\":\n      return getMSinInterval;\n    case \"generateSeriesId\":\n      return generateSeriesId;\n    case \"getNumberofIntervals\":\n      return getNumberofIntervals;\n    case \"getSerializedValue\":\n      return getSerializedValue;\n    case \"getDates\":\n      return getDates;\n    case \"convertMissingData\":\n      return convertMissingData;\n  }\n  return undefined;\n}\nfunction _assign__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _set_original__(variableName, value);\n  } else {\n    _maybe_update_export__(variableName, value);\n    return rewireData[variableName] = value;\n  }\n}\nfunction _set_original__(variableName, _value) {\n  switch (variableName) {}\n  return undefined;\n}\nfunction _update_operation__(operation, variableName, prefix) {\n  var oldValue = _get__(variableName);\n  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;\n  _assign__(variableName, newValue);\n  return prefix ? newValue : oldValue;\n}\nfunction _set__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (typeof variableName === 'object') {\n    Object.keys(variableName).forEach(function (name) {\n      rewireData[name] = variableName[name];\n    });\n    return function () {\n      Object.keys(variableName).forEach(function (name) {\n        _reset__(variableName);\n      });\n    };\n  } else {\n    _maybe_update_export__(variableName, value);\n    if (value === undefined) {\n      rewireData[variableName] = INTENTIONAL_UNDEFINED;\n    } else {\n      rewireData[variableName] = value;\n    }\n    return function () {\n      _reset__(variableName);\n    };\n  }\n}\nfunction _reset__(variableName) {\n  let rewireData = _getRewiredData__();\n  delete rewireData[variableName];\n  if (Object.keys(rewireData).length == 0) {\n    delete _getRewireRegistry__()[_getRewireModuleId__];\n  }\n  if (_exports_to_reset__.has(variableName)) {\n    exports[variableName] = _exports_to_reset__.get(variableName);\n    _exports_to_reset__.delete(variableName);\n  }\n}\nfunction _with__(object) {\n  let rewireData = _getRewiredData__();\n  var rewiredVariableNames = Object.keys(object);\n  var previousValues = {};\n  function reset() {\n    rewiredVariableNames.forEach(function (variableName) {\n      rewireData[variableName] = previousValues[variableName];\n    });\n  }\n  return function (callback) {\n    rewiredVariableNames.forEach(function (variableName) {\n      previousValues[variableName] = rewireData[variableName];\n      rewireData[variableName] = object[variableName];\n    });\n    let result = callback();\n    if (!!result && typeof result.then == 'function') {\n      result.then(reset).catch(reset);\n    } else {\n      reset();\n    }\n    return result;\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_RewireAPI__);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@c3/ui/UiSdlTransformEvalMetricsResultToUiSdlChartData.ts_uiComponentLibrary\n");

/***/ })

}]);