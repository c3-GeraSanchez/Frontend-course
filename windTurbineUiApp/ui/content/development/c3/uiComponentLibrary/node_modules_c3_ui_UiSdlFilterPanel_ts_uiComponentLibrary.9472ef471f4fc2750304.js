"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkjs_webpack_c3_client_node"] = self["webpackChunkjs_webpack_c3_client_node"] || []).push([["node_modules_c3_ui_UiSdlFilterPanel_ts_uiComponentLibrary"],{

/***/ "./node_modules/@c3/ui/UiSdlFilterPanel.ts_uiComponentLibrary":
/*!*************************************************!*\
  !*** ./node_modules/@c3/ui/UiSdlFilterPanel.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __GetDependency__: () => (/* binding */ _get__),\n/* harmony export */   __ResetDependency__: () => (/* binding */ _reset__),\n/* harmony export */   __RewireAPI__: () => (/* binding */ _RewireAPI__),\n/* harmony export */   __Rewire__: () => (/* binding */ _set__),\n/* harmony export */   __get__: () => (/* binding */ _get__),\n/* harmony export */   __set__: () => (/* binding */ _set__),\n/* harmony export */   actionCreators: () => (/* binding */ actionCreators),\n/* harmony export */   changeMultipleInputsAction: () => (/* binding */ changeMultipleInputsAction),\n/* harmony export */   changeSingleInputAction: () => (/* binding */ changeSingleInputAction),\n/* harmony export */   configForField: () => (/* binding */ configForField),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaultValues: () => (/* binding */ defaultValues),\n/* harmony export */   deleteSavedSearchAction: () => (/* binding */ deleteSavedSearchAction),\n/* harmony export */   doDataMerge: () => (/* binding */ doDataMerge),\n/* harmony export */   enableDisableFilterInputAction: () => (/* binding */ enableDisableFilterInputAction),\n/* harmony export */   enableDisableFilterInputHelper: () => (/* binding */ enableDisableFilterInputHelper),\n/* harmony export */   epics: () => (/* binding */ epics),\n/* harmony export */   fieldHideEffect: () => (/* reexport safe */ _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_20__.fieldHideEffect),\n/* harmony export */   fieldHideShowEffect: () => (/* reexport safe */ _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_20__.fieldHideShowEffect),\n/* harmony export */   fieldShowEffect: () => (/* reexport safe */ _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_20__.fieldShowEffect),\n/* harmony export */   fieldValuesInitReducer: () => (/* binding */ fieldValuesInitReducer),\n/* harmony export */   filterAndSanitizeFetchResult: () => (/* binding */ filterAndSanitizeFetchResult),\n/* harmony export */   filterInputDisableReducer: () => (/* binding */ filterInputDisableReducer),\n/* harmony export */   filterInputEnableReducer: () => (/* binding */ filterInputEnableReducer),\n/* harmony export */   filterStringValidateEpic: () => (/* binding */ filterStringValidateEpic),\n/* harmony export */   filterSubmitEpic: () => (/* binding */ filterSubmitEpic),\n/* harmony export */   getAllChildrenNodesFromFieldName: () => (/* binding */ getAllChildrenNodesFromFieldName),\n/* harmony export */   getClosestParentNode: () => (/* binding */ getClosestParentNode),\n/* harmony export */   getDataSourceIdFromFieldName: () => (/* binding */ getDataSourceIdFromFieldName),\n/* harmony export */   getDataTypeActionNameAndArgsFromDataSpec: () => (/* binding */ getDataTypeActionNameAndArgsFromDataSpec),\n/* harmony export */   getFilterOperator: () => (/* binding */ getFilterOperator),\n/* harmony export */   getFilterString: () => (/* binding */ getFilterString),\n/* harmony export */   getFormFieldInputElementDataSpec: () => (/* binding */ getFormFieldInputElementDataSpec),\n/* harmony export */   getFormFieldValuesFromState: () => (/* reexport safe */ _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_20__.getFormFieldValuesFromState),\n/* harmony export */   getImmediateChildrenOfNode: () => (/* binding */ getImmediateChildrenOfNode),\n/* harmony export */   getInputElementTypeNameForFilterElementTypeName: () => (/* binding */ getInputElementTypeNameForFilterElementTypeName),\n/* harmony export */   getObservablesFromFieldName: () => (/* binding */ getObservablesFromFieldName),\n/* harmony export */   getValueFieldFromNode: () => (/* binding */ getValueFieldFromNode),\n/* harmony export */   hideShowFieldAction: () => (/* reexport safe */ _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_20__.hideShowFieldAction),\n/* harmony export */   initFieldValuesAction: () => (/* binding */ initFieldValuesAction),\n/* harmony export */   initializeFieldValueMapping: () => (/* binding */ initializeFieldValueMapping),\n/* harmony export */   inputChangeAction: () => (/* reexport safe */ _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_20__.inputChangeAction),\n/* harmony export */   inputChangeEffect: () => (/* reexport safe */ _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_20__.inputChangeEffect),\n/* harmony export */   inputChangeEffectHelper: () => (/* binding */ inputChangeEffectHelper),\n/* harmony export */   loadInputDataSourcesAction: () => (/* binding */ loadInputDataSourcesAction),\n/* harmony export */   loadSavedSearchesAction: () => (/* binding */ loadSavedSearchesAction),\n/* harmony export */   mapFieldConfig: () => (/* binding */ mapFieldConfig),\n/* harmony export */   multipleInputsChangeEffect: () => (/* binding */ multipleInputsChangeEffect),\n/* harmony export */   multipleInputsChangeEpic: () => (/* binding */ multipleInputsChangeEpic),\n/* harmony export */   recursivelyFetchDataFromNode: () => (/* binding */ recursivelyFetchDataFromNode),\n/* harmony export */   reducers: () => (/* binding */ reducers),\n/* harmony export */   registerTriggersAction: () => (/* reexport safe */ _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_28__.registerTriggersAction),\n/* harmony export */   renameSavedSearchAction: () => (/* binding */ renameSavedSearchAction),\n/* harmony export */   renderInitialAction: () => (/* reexport safe */ _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_28__.renderInitialAction),\n/* harmony export */   savedSearchDeleteEffect: () => (/* binding */ savedSearchDeleteEffect),\n/* harmony export */   savedSearchDeleteEpic: () => (/* binding */ savedSearchDeleteEpic),\n/* harmony export */   savedSearchPersistEpic: () => (/* binding */ savedSearchPersistEpic),\n/* harmony export */   savedSearchRenameEffect: () => (/* binding */ savedSearchRenameEffect),\n/* harmony export */   savedSearchRenameEpic: () => (/* binding */ savedSearchRenameEpic),\n/* harmony export */   savedSearchesLoadEpic: () => (/* binding */ savedSearchesLoadEpic),\n/* harmony export */   singleInputChangeEffect: () => (/* binding */ singleInputChangeEffect),\n/* harmony export */   singleInputChangeEpic: () => (/* binding */ singleInputChangeEpic),\n/* harmony export */   storeChildComponentIdsAction: () => (/* reexport safe */ _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_20__.storeChildComponentIdsAction),\n/* harmony export */   submitAdvancedFilterAction: () => (/* binding */ submitAdvancedFilterAction),\n/* harmony export */   submitFilterAction: () => (/* binding */ submitFilterAction),\n/* harmony export */   submitSavedSearchAction: () => (/* binding */ submitSavedSearchAction),\n/* harmony export */   triggerInputAction: () => (/* reexport safe */ _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_20__.triggerInputAction),\n/* harmony export */   triggersRegisterEffect: () => (/* reexport safe */ _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_28__.triggersRegisterEffect),\n/* harmony export */   updateFieldValues: () => (/* binding */ updateFieldValues),\n/* harmony export */   validateFilterStringAction: () => (/* binding */ validateFilterStringAction)\n/* harmony export */ });\n/* harmony import */ var immutable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! immutable */ \"webpack/sharing/consume/default/immutable_uiComponentLibrary\");\n/* harmony import */ var immutable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(immutable__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ \"webpack/sharing/consume/default/rxjs/operators_uiComponentLibrary\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ \"webpack/sharing/consume/default/rxjs_uiComponentLibrary\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(rxjs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_compact__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/compact */ \"webpack/sharing/consume/default/lodash/compact/lodash/compact_uiComponentLibrary\");\n/* harmony import */ var lodash_compact__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_compact__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/each */ \"webpack/sharing/consume/default/lodash/each/lodash/each_uiComponentLibrary\");\n/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_each__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var lodash_flatten__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/flatten */ \"webpack/sharing/consume/default/lodash/flatten/lodash/flatten_uiComponentLibrary\");\n/* harmony import */ var lodash_flatten__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_flatten__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var lodash_map__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/map */ \"webpack/sharing/consume/default/lodash/map/lodash/map_uiComponentLibrary\");\n/* harmony import */ var lodash_map__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(lodash_map__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var lodash_isArray__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash/isArray */ \"webpack/sharing/consume/default/lodash/isArray/lodash/isArray_uiComponentLibrary\");\n/* harmony import */ var lodash_isArray__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(lodash_isArray__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash/isEmpty */ \"webpack/sharing/consume/default/lodash/isEmpty/lodash/isEmpty_uiComponentLibrary\");\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash/isString */ \"webpack/sharing/consume/default/lodash/isString/lodash/isString_uiComponentLibrary\");\n/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(lodash_isString__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var lodash_isNumber__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash/isNumber */ \"webpack/sharing/consume/default/lodash/isNumber/lodash/isNumber_uiComponentLibrary\");\n/* harmony import */ var lodash_isNumber__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(lodash_isNumber__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var lodash_isNil__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash/isNil */ \"webpack/sharing/consume/default/lodash/isNil/lodash/isNil_uiComponentLibrary\");\n/* harmony import */ var lodash_isNil__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(lodash_isNil__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash/get */ \"webpack/sharing/consume/default/lodash/get/lodash/get_uiComponentLibrary\");\n/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(lodash_get__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var lodash_uniq__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! lodash/uniq */ \"webpack/sharing/consume/default/lodash/uniq/lodash/uniq_uiComponentLibrary\");\n/* harmony import */ var lodash_uniq__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(lodash_uniq__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var lodash_isFunction__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lodash/isFunction */ \"webpack/sharing/consume/default/lodash/isFunction/lodash/isFunction_uiComponentLibrary\");\n/* harmony import */ var lodash_isFunction__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(lodash_isFunction__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! moment */ \"webpack/sharing/consume/default/moment_uiComponentLibrary\");\n/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @c3/ui/UiSdlConnected */ \"webpack/sharing/consume/default/@c3/ui/UiSdlConnected_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var _c3_ui_UiSdlDateTime__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @c3/ui/UiSdlDateTime */ \"webpack/container/remote/@c3/ui/UiSdlDateTime_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlDateTime__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlDateTime__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var _c3_ui_UiSdlSite__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @c3/ui/UiSdlSite */ \"webpack/container/remote/@c3/ui/UiSdlSite_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlSite__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlSite__WEBPACK_IMPORTED_MODULE_18__);\n/* harmony import */ var _c3_ui_UiSdlFilterable__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @c3/ui/UiSdlFilterable */ \"webpack/container/remote/@c3/ui/UiSdlFilterable_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlFilterable__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlFilterable__WEBPACK_IMPORTED_MODULE_19__);\n/* harmony import */ var _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @c3/ui/UiSdlFormBase */ \"webpack/container/remote/@c3/ui/UiSdlFormBase_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_20__);\n/* harmony import */ var _c3_ui_UiSdlForm__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @c3/ui/UiSdlForm */ \"webpack/container/remote/@c3/ui/UiSdlForm_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlForm__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlForm__WEBPACK_IMPORTED_MODULE_21__);\n/* harmony import */ var _c3_ui_UiSdlComponentDataSpec__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @c3/ui/UiSdlComponentDataSpec */ \"webpack/container/remote/@c3/ui/UiSdlComponentDataSpec_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlComponentDataSpec__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlComponentDataSpec__WEBPACK_IMPORTED_MODULE_22__);\n/* harmony import */ var _c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @c3/ui/UiSdlDataRedux */ \"webpack/container/remote/@c3/ui/UiSdlDataRedux_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_23__);\n/* harmony import */ var _c3_ui_UiSdlFilterFieldOperatorToExpression__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @c3/ui/UiSdlFilterFieldOperatorToExpression */ \"webpack/container/remote/@c3/ui/UiSdlFilterFieldOperatorToExpression_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlFilterFieldOperatorToExpression__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlFilterFieldOperatorToExpression__WEBPACK_IMPORTED_MODULE_24__);\n/* harmony import */ var _c3_ui_UiSdlFilter__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @c3/ui/UiSdlFilter */ \"webpack/container/remote/@c3/ui/UiSdlFilter_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlFilter__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlFilter__WEBPACK_IMPORTED_MODULE_25__);\n/* harmony import */ var _c3_ui_types_pluggables_filterComponents__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @c3/ui/types/pluggables/filterComponents */ \"webpack/sharing/consume/default/@c3/ui/types/pluggables/filterComponents/@c3/ui/types/pluggables/filterComponents_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_types_pluggables_filterComponents__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_types_pluggables_filterComponents__WEBPACK_IMPORTED_MODULE_26__);\n/* harmony import */ var _c3_ui_types_pluggables_inputComponents__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @c3/ui/types/pluggables/inputComponents */ \"webpack/sharing/consume/default/@c3/ui/types/pluggables/inputComponents/@c3/ui/types/pluggables/inputComponents_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_types_pluggables_inputComponents__WEBPACK_IMPORTED_MODULE_27___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_types_pluggables_inputComponents__WEBPACK_IMPORTED_MODULE_27__);\n/* harmony import */ var _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @c3/ui/UiSdlComponent */ \"webpack/sharing/consume/default/@c3/ui/UiSdlComponent_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_28___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_28__);\n/*\n * Copyright 2009-2025 C3 AI (www.c3.ai). All Rights Reserved.\n * This material, including without limitation any software, is the confidential trade secret and proprietary\n * information of C3 and its licensors. Reproduction, use and/or distribution of this material in any form is\n * strictly prohibited except as set forth in a written license agreement with C3 and/or its authorized distributors.\n * This material may be covered by one or more patents or pending patent applications.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Checks if the given field setting is a `UiSdlFieldSetFilterFieldSetting`.\n * @param fieldSetting The field setting to check.\n * @returns `true` if the field setting is a `UiSdlFieldSetFilterFieldSetting`, `false` otherwise.\n */\nfunction isFilterFieldSetting(fieldSetting) {\n  return (fieldSetting === null || fieldSetting === void 0 ? void 0 : fieldSetting.type) === 'UiSdlFieldSetFilterFieldSetting';\n}\n\n/**\n * Checks if the given field setting is a `UiSdlFieldSetFilterFieldSetting` with a Date type `filterElement`.\n * @param fieldSetting The field setting to check.\n * @returns `true` if the field setting's filterElement is a `UiSdlDateTimeInputFilterField` or `UiSdlDateTimeRangeInputFilterField`.\n *          `false` otherwise.\n */\nfunction isFilterFieldDateTypeSetting(fieldSetting) {\n  var _fieldSetting$filterE, _fieldSetting$filterE2;\n  return (fieldSetting === null || fieldSetting === void 0 ? void 0 : fieldSetting.type) === 'UiSdlFieldSetFilterFieldSetting' && (((_fieldSetting$filterE = fieldSetting.filterElement) === null || _fieldSetting$filterE === void 0 ? void 0 : _fieldSetting$filterE.type) === 'UiSdlDateTimeInputFilterField' || ((_fieldSetting$filterE2 = fieldSetting.filterElement) === null || _fieldSetting$filterE2 === void 0 ? void 0 : _fieldSetting$filterE2.type) === 'UiSdlDateTimeRangeInputFilterField');\n}\n\n/**\n * Checks if the given field setting is a `UiSdlFieldSetInputFieldSetting`.\n * @param fieldSetting The field setting to check.\n * @returns `true` if the field setting is a `UiSdlFieldSetInputFieldSetting`, `false` otherwise.\n */\nfunction isInputFieldSetting(fieldSetting) {\n  return (fieldSetting === null || fieldSetting === void 0 ? void 0 : fieldSetting.type) === 'UiSdlFieldSetInputFieldSetting';\n}\nfunction isSameUser(actionUserId, stateUserId) {\n  return actionUserId === stateUserId;\n}\n\n/**\n * Gets the {@link UiSdlInputComponent} input element for the given field setting.\n *\n * @param fieldSetting The field setting configuration.\n * @return An input element configuration.\n */\nfunction getInputElementForFieldSetting(fieldSetting) {\n  if (_get__(\"isFilterFieldSetting\")(fieldSetting)) {\n    return fieldSetting.filterElement ? fieldSetting.filterElement.inputElement : {};\n  } else if (_get__(\"isInputFieldSetting\")(fieldSetting)) {\n    return fieldSetting.inputElement;\n  }\n}\nfunction dataSpecHasDataType(dataSpec) {\n  return (dataSpec === null || dataSpec === void 0 ? void 0 : dataSpec.hasOwnProperty('dataType')) === true;\n}\nfunction getDataSpecType(fieldConfig) {\n  var _get__2;\n  const dataSpec = (_get__2 = _get__(\"getInputElementForFieldSetting\")(fieldConfig)) === null || _get__2 === void 0 ? void 0 : _get__2.dataSpec;\n  return _get__(\"dataSpecHasDataType\")(dataSpec) ? _get__(\"getDataTypeName\")(dataSpec) : undefined;\n}\n\n// TODO: UI-7894 This shouldn't be needed anymore, data merging is done by doDataMerge\nfunction mapDataForFieldSetting(fieldSetting, dataSourceKey) {\n  const data = {};\n  if (fieldSetting !== null && fieldSetting !== void 0 && fieldSetting.dataSpec) {\n    // Set the value to be the dataDestinationField for UiSdlFormFieldDataSpecSetting\n    data[dataSourceKey] = fieldSetting.fieldCollection;\n  }\n  return data;\n}\n\n/**\n * Sanitizes the given field setting configuration so that its input element\n * includes only props allowed by the input element component. If invalid type\n * names are provided, an error is thrown.\n *\n * @param fieldSetting The field setting configuration to sanitize.\n * @returns The sanitized field setting configuration.\n */\nfunction sanitizeFieldSetting(fieldSetting) {\n  if (_get__(\"isFilterFieldSetting\")(fieldSetting)) {\n    const filterElement = fieldSetting.filterElement;\n    if (!filterElement) {\n      throw `Missing \\`filterElement\\` for \\`fieldSetting\\`: ${JSON.stringify(fieldSetting)}.`;\n    }\n    const inputElement = filterElement.inputElement;\n    const filterElementType = filterElement.type;\n    if (!filterElementType) {\n      throw `Missing \\`type\\` for \\`filterElement\\`: ${JSON.stringify(filterElement)}.`;\n    }\n    const sanitizedInputElement = Object.assign({}, inputElement, {\n      type: _get__(\"getInputElementTypeNameForFilterElementTypeName\")(filterElementType) // eslint-disable-line @typescript-eslint/no-use-before-define\n    });\n    return Object.assign({}, fieldSetting, {\n      filterElement: Object.assign({}, filterElement, {\n        inputElement: sanitizedInputElement\n      })\n    });\n  } else if (_get__(\"isInputFieldSetting\")(fieldSetting)) {\n    return _get__(\"UiSdlFormBase_sanitizeFieldSetting\")(fieldSetting);\n  } else {\n    throw `Missing \\`type\\` for \\`fieldSetting\\` ${JSON.stringify(fieldSetting)}.`;\n  }\n}\n\n/**\n * Helper function to determine if value is an array of Dates\n *\n * @param value any value\n * @returns boolean whether it is an array of Dates\n */\nfunction isDateArray(value) {\n  return _get__(\"isArray\")(value) && !_get__(\"isEmpty\")(value) && value.every(date => date instanceof Date || date === undefined);\n}\n\n/**\n * Helper function to determine if a value is a valid Date object or date string\n *\n * @param value any value\n * @returns boolean whether it is a valid Date object or string\n */\n\nfunction isValidDate(value) {\n  if (value instanceof Date || typeof value === 'string') {\n    try {\n      // Throws an error with invalid date strings\n      const possibleDate = new (_get__(\"DateTime\"))(value);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n  return false;\n}\n\n/**\n * Helper function to check for a valid date then format it.\n *\n * @param value any value\n * @returns string of formatted date or undefined if not valid.\n */\nfunction checkValidDateAndFormat(value) {\n  if (_get__(\"isValidDate\")(value)) {\n    // Moment is needed to get the actual value as a date with no offsets/zones\n    const localDate = _get__(\"moment\")(value);\n    return localDate.format();\n  } else if (_get__(\"isDateArray\")(value)) {\n    return value.map(date => date ? _get__(\"moment\")(date).format() : undefined);\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Formats date to local time in `payload` state and value\n * @param {any} payload\n * @return {any} the updated `payload` with updated local time state and value\n */\nfunction formatSinglePayloadDateToLocalTime(payload) {\n  if (!_get__(\"isEmpty\")(payload.state)) {\n    Object.entries(payload.state).forEach(([key, value]) => {\n      const formattedDate = _get__(\"checkValidDateAndFormat\")(value);\n      if (formattedDate) {\n        payload.state[key] = formattedDate;\n      }\n    });\n  }\n  const formattedDate = _get__(\"checkValidDateAndFormat\")(payload.value);\n  if (formattedDate) {\n    payload.value = formattedDate;\n  }\n  return payload;\n}\n\n/**\n * Formats date to local time in `payload` state and value where there are array of values\n * @param {any[]} payload\n * @return {any} the updated `payload` with updated local time state and value\n */\nfunction formatMultiplePayloadDateToLocalTime(payload) {\n  payload.forEach((item, i) => {\n    payload[i] = _get__(\"formatSinglePayloadDateToLocalTime\")(item);\n  });\n  return payload;\n}\n/**\n * Helper method that returns the value passed to it if defined, or\n * the default value from the type definition otherwise\n * @param {Object} parentType The parent type which has the field we need to get the value from\n * @param {String} field The field name in string\n * @param {Object} value The current value in metadata\n * @return {Object} The value or default value from the type definiton\n */\nfunction setValueOrDefaultValue(parentType, field, value) {\n  var _get__$parentType$typ;\n  return value || ((_get__$parentType$typ = _get__(\"filterComponents\")[parentType.type]) === null || _get__$parentType$typ === void 0 ? void 0 : _get__$parentType$typ.defaultValues)[field];\n}\nfunction setOperator(fieldConfig) {\n  if (fieldConfig.filterElement && fieldConfig.filterElement.operator) {\n    return _get__(\"setValueOrDefaultValue\")(fieldConfig.filterElement, 'operator', fieldConfig.filterElement.operator);\n  }\n  return undefined;\n}\nfunction setNoTimeZoneConversion(fieldConfig) {\n  if (fieldConfig.filterElement && fieldConfig.filterElement.inputElement) {\n    var _fieldConfig$filterEl;\n    return (_fieldConfig$filterEl = fieldConfig.filterElement.inputElement.noTimeZoneConversion) !== null && _fieldConfig$filterEl !== void 0 ? _fieldConfig$filterEl : false;\n  }\n  return undefined;\n}\n\n/**\n * Helper function to get data source id from field name\n *\n * @param {Record<string, any>} formFieldValues Form field value\n * @param {string} fieldName The field name of form field value\n * @param {string} componentId The component id\n *\n * @return {string} The data source id of the component\n */\nfunction getDataSourceIdFromFieldName(formFieldValues, fieldName, componentId) {\n  var _formFieldValues$fiel, _formFieldValues$fiel2;\n  const fieldSetIndex = (_formFieldValues$fiel = formFieldValues[fieldName]) === null || _formFieldValues$fiel === void 0 ? void 0 : _formFieldValues$fiel.fieldSetIndex;\n  const fieldIndex = (_formFieldValues$fiel2 = formFieldValues[fieldName]) === null || _formFieldValues$fiel2 === void 0 ? void 0 : _formFieldValues$fiel2.fieldIndex;\n  const dataSourcePath = 'dataSpec.fieldSets.' + fieldSetIndex.toString() + '.fields.' + fieldIndex.toString() + '.filterElement.inputElement.dataSpec';\n  const dataSourceId = _get__(\"getCollectionDataSourceId\")(dataSourcePath, componentId);\n  return dataSourceId;\n}\n\n/**\n * Helper function to recursively get the immediate children of a node, given\n * it's fieldName.\n *\n * @param {Record<string, any>} formFieldValues Form field value\n * @param {string} fieldName The field name of form field value\n *\n * @returns {Record<string, any>[]} array containing the immediate children from a given form field value field name\n */\nfunction getImmediateChildrenOfNode(formFieldValues, fieldName) {\n  if (_get__(\"isEmpty\")(fieldName)) return [];\n  const result = [];\n  Object.keys(formFieldValues).forEach(key => {\n    var _formFieldValue$condi;\n    const formFieldValue = formFieldValues[key];\n    if ((formFieldValue === null || formFieldValue === void 0 || (_formFieldValue$condi = formFieldValue.conditionalFilter) === null || _formFieldValue$condi === void 0 ? void 0 : _formFieldValue$condi.parentFilter) === fieldName) {\n      result.push(formFieldValue);\n    }\n  });\n  return result;\n}\n\n/**\n * Helper function to get all children nodes from a parent's field name.\n *\n * @param {Record<string, any>} formFieldValues Form field values\n * @param {string} parentFieldName Parent field name\n *\n * @returns {Record<string, any>[]} array containing all children nodes from the parent field name\n */\nfunction getAllChildrenNodesFromFieldName(formFieldValues, parentFieldName) {\n  let result = [];\n  let childrenNodes = _get__(\"getImmediateChildrenOfNode\")(formFieldValues, parentFieldName);\n  while (childrenNodes.length) {\n    const childrenNode = childrenNodes.shift();\n    result.push(childrenNode);\n    const childrenNodeFieldName = childrenNode.field;\n    const childrenImmediateChild = _get__(\"getImmediateChildrenOfNode\")(formFieldValues, childrenNodeFieldName);\n    childrenNodes = childrenNodes.concat(childrenImmediateChild);\n  }\n  return result;\n}\n\n/**\n * Helper function to get the form field input element's data spec\n *\n * @param {string} componentId The component id\n * @param {string} fieldName Field name of the form field value\n * @param {Record<string, any>} formFieldValues Form field value\n * @param {ImmutableReduxState} state The redux state\n *\n * @returns {Record<string, any>} the dataSpec object\n */\nfunction getFormFieldInputElementDataSpec(componentId, fieldName, formFieldValues, state) {\n  var _get__3, _filterPanelDataSpec$;\n  const formFieldValue = formFieldValues[fieldName];\n  const fieldSetIndex = formFieldValue === null || formFieldValue === void 0 ? void 0 : formFieldValue.fieldSetIndex;\n  const fieldIndex = formFieldValue === null || formFieldValue === void 0 ? void 0 : formFieldValue.fieldIndex;\n  const filterPanelDataSpec = (_get__3 = _get__(\"getConfigFromState\")(componentId, state, ['dataSpec'])) === null || _get__3 === void 0 ? void 0 : _get__3.toJS();\n  const inputElementDataSpec = filterPanelDataSpec === null || filterPanelDataSpec === void 0 || (_filterPanelDataSpec$ = filterPanelDataSpec.fieldSets) === null || _filterPanelDataSpec$ === void 0 || (_filterPanelDataSpec$ = _filterPanelDataSpec$[fieldSetIndex]) === null || _filterPanelDataSpec$ === void 0 || (_filterPanelDataSpec$ = _filterPanelDataSpec$.fields) === null || _filterPanelDataSpec$ === void 0 || (_filterPanelDataSpec$ = _filterPanelDataSpec$[fieldIndex]) === null || _filterPanelDataSpec$ === void 0 || (_filterPanelDataSpec$ = _filterPanelDataSpec$.filterElement) === null || _filterPanelDataSpec$ === void 0 || (_filterPanelDataSpec$ = _filterPanelDataSpec$.inputElement) === null || _filterPanelDataSpec$ === void 0 ? void 0 : _filterPanelDataSpec$.dataSpec;\n  return inputElementDataSpec;\n}\n\n/**\n * Helper function to get valueField of a field value's input element.\n *\n * @param {string} componentId The component id\n * @param {ImmutableReduxState} state Redux state\n * @param {string} fieldName Field name of the form field value\n * @param {Record<string, any>} formFieldValues Form fields values\n *\n * @returns {string} value field (or defaults to \"id\")\n */\nfunction getValueFieldFromNode(componentId, state, fieldName, formFieldValues) {\n  const inputElementDataSpec = _get__(\"getFormFieldInputElementDataSpec\")(componentId, fieldName, formFieldValues, state);\n  const valueField = inputElementDataSpec === null || inputElementDataSpec === void 0 ? void 0 : inputElementDataSpec.valueField;\n  return valueField || 'id';\n}\n\n/**\n * Helper function to get data type and action name from a data spec object\n *\n * @param {Record<string, any>} dataSpec The component id\n *\n * @returns {Record<string, string>} the dataSpec object\n *\n * e.g.\n * {\n *  dataType: \"TestMetric\",\n *  actionName: \"fetch\"\n *  actionArgs: {\n *    clientTimeZoneOffset: \"${test}\"\n *  }\n * }\n */\nfunction getDataTypeActionNameAndArgsFromDataSpec(componentId, state, fieldName, formFieldValues) {\n  const inputElementDataSpec = _get__(\"getFormFieldInputElementDataSpec\")(componentId, fieldName, formFieldValues, state);\n  const dataType = inputElementDataSpec === null || inputElementDataSpec === void 0 ? void 0 : inputElementDataSpec.dataType;\n  let actionName = inputElementDataSpec === null || inputElementDataSpec === void 0 ? void 0 : inputElementDataSpec.actionName;\n  let actionArgs = (inputElementDataSpec === null || inputElementDataSpec === void 0 ? void 0 : inputElementDataSpec.args) || (inputElementDataSpec === null || inputElementDataSpec === void 0 ? void 0 : inputElementDataSpec.actionArgs);\n  if (inputElementDataSpec !== null && inputElementDataSpec !== void 0 && inputElementDataSpec.advancedDataSpec) {\n    var _inputElementDataSpec;\n    if ((_inputElementDataSpec = inputElementDataSpec.advancedDataSpec) !== null && _inputElementDataSpec !== void 0 && _inputElementDataSpec.actionName) {\n      actionName = inputElementDataSpec.advancedDataSpec.actionName;\n    }\n    actionArgs = inputElementDataSpec.advancedDataSpec.actionArgs;\n  }\n  return {\n    dataType,\n    actionName,\n    actionArgs\n  };\n}\n\n/**\n * Helper function to get the filter operator\n *\n * @param {Record<string, any>} formFieldValue Form field value\n * @param {string | string[]} fieldValue field value of the input element\n * @param {string} operatorOverride Operator value to override formFieldValue.operator\n *\n * @returns {string} The filter operator (or defaults to \"id\")\n */\nfunction getFilterOperator(formFieldValue, fieldValue, operatorOverride) {\n  let filterOperator;\n  const operator = operatorOverride || formFieldValue.operator || formFieldValue.comparator;\n\n  // If operator is 'EQUALS', but the value is an array, it should still use 'intersects'\n  if (operator && !(operator === 'EQUALS' && _get__(\"isArray\")(fieldValue))) {\n    filterOperator = _get__(\"UiSdlFilterFieldOperatorToExpression\")[operator];\n  } else if (_get__(\"isArray\")(fieldValue)) {\n    // If fieldValue is array, need to do intersect (multiple values)\n    filterOperator = 'intersects';\n  } else {\n    filterOperator = _get__(\"UiSdlFilterFieldOperatorToExpression\")['EQUALS'];\n  }\n  return filterOperator;\n}\n\n/**\n * Helper function to generate the filter string\n *\n * @param {string} filterField The filter field (e.g. \"country\" or \"region\")\n * @param {string | string[]} fieldValue field value of the input element (e.g. \"Canada\")\n * @param {string} filterOperator Form field value\n * @param {string} valueField The input's valueField (e.g. \"id\" or \"country.population\")\n *\n * @returns {string} The filter string\n */\nfunction getFilterString(filterField, fieldValue, filterOperator, valueField) {\n  // If fieldValue is not a valid filterable value, return an empty string.\n  if (_get__(\"isArray\")(fieldValue) && _get__(\"isEmpty\")(fieldValue) || _get__(\"isString\")(fieldValue) && _get__(\"isEmpty\")(fieldValue) || _get__(\"isNil\")(fieldValue) || _get__(\"isNumber\")(fieldValue) && isNaN(fieldValue)) {\n    return '';\n  }\n  let filterString = '';\n  /**\n   * Sanitize the valueField\n   * e.g.\n   * if valueField is \"id\", search as get(data, \"country.id\")\n   * else if value field is \"country.population\", search as get(data, \"country.population\")\n   */\n  let tempFilterField = `${filterField}.${valueField}`;\n  filterString = new (_get__(\"Filter\"))()[filterOperator](tempFilterField, fieldValue).value;\n  return filterString;\n}\n\n/**\n * Helper function to filter and sanitize the fetch result to return the values\n *\n * @param {FetchResult} fetchResult FetchResult from ajax api call\n * @param {string | string[]} fieldValue field value of the input element (e.g. \"Canada\")\n * @param {string} filterField Form field value\n * @param {string} valueField The value field to compare the fieldValue\n * @param {string} parentValueField The parent node's valueField\n *\n * @returns {string[]} An array of the cleaned fetch result options\n */\nfunction filterAndSanitizeFetchResult(fetchResult, fieldValue, filterField, valueField, parentValueField) {\n  const response = fetchResult.objs;\n  let filteredData;\n  let fieldValues;\n  const filterFieldWithParentValueField = `${filterField}.${parentValueField}`;\n  if (_get__(\"isArray\")(fieldValue)) {\n    filteredData = response.filter(data => fieldValue.includes(_get__(\"get\")(data, filterFieldWithParentValueField)));\n    fieldValues = filteredData.map(data => data === null || data === void 0 ? void 0 : data[valueField]);\n  } else if (_get__(\"isString\")(fieldValue)) {\n    filteredData = response.filter(data => _get__(\"get\")(data, filterFieldWithParentValueField) === fieldValue);\n    fieldValues = filteredData.map(data => _get__(\"get\")(data, valueField));\n  } else if (_get__(\"isNumber\")(fieldValue)) {\n    filteredData = response.filter(data => _get__(\"get\")(data, filterFieldWithParentValueField) === fieldValue);\n    fieldValues = filteredData.map(data => _get__(\"get\")(data, valueField));\n  }\n  if (_get__(\"isArray\")(fieldValues)) {\n    fieldValues = _get__(\"uniq\")(fieldValues);\n    if (fieldValues.length === 1) {\n      fieldValues = fieldValues[0];\n    }\n  }\n  return fieldValues;\n}\n\n/**\n * Helper function to get the closest parent node from a field name\n * that has a value filled in.\n *\n * If there is no closest filled parent node, we return undefined.\n *\n * @param {Record<string, any>} formFieldValues Form field value\n * @param {string} fieldName Form field name\n *\n * @returns {Record<string, any>} The parent node (formFieldValue)\n */\nfunction getClosestParentNode(formFieldValues, fieldName) {\n  let result;\n  let formFieldValue = formFieldValues[fieldName];\n  while (formFieldValue.conditionalFilter) {\n    const parentFieldName = formFieldValue.conditionalFilter.parentFilter;\n    const parentFormfieldValue = formFieldValues[parentFieldName];\n    if (parentFormfieldValue.value) {\n      return parentFormfieldValue;\n    }\n    formFieldValue = parentFormfieldValue;\n  }\n  return result;\n}\n\n/**\n * Finds the configuration for the given field name from the given set of field configurations.\n *\n * @param fieldName The name of the field for which to find the configuration.\n * @param fieldSets Array of field sets to search for the configuration.\n *          Should not be an Immutable JS object.\n * @return The config for the given `fieldName`.\n */\nfunction configForField(fieldName, fieldSets) {\n  // Flatten all the fields arrays from all fieldSets, whether single-step or multi-step\n  const fieldConfigs = _get__(\"flatten\")(_get__(\"map\")(fieldSets, 'fields'));\n  let fieldConfig;\n  while (fieldConfigs.length > 0) {\n    var _fieldConfig$inputEle;\n    fieldConfig = fieldConfigs.pop();\n    if (fieldConfig.fieldName === fieldName) {\n      return fieldConfig;\n    }\n    if (((_fieldConfig$inputEle = fieldConfig.inputElement) === null || _fieldConfig$inputEle === void 0 ? void 0 : _fieldConfig$inputEle.type) === 'UiSdlFieldGroup') {\n      for (let i = 0; i < ((_fieldConfig$inputEle2 = fieldConfig.inputElement.fieldGroupFields) === null || _fieldConfig$inputEle2 === void 0 ? void 0 : _fieldConfig$inputEle2.length); i++) {\n        var _fieldConfig$inputEle2;\n        const field = fieldConfig.inputElement.fieldGroupFields[i];\n        if (field.fieldName === fieldName) {\n          return field;\n        }\n      }\n    }\n    if ('fields' in fieldConfig) {\n      [].push.apply(fieldConfigs, fieldConfig.fields);\n    }\n    if (fieldConfig.childFields) {\n      [].push.apply(fieldConfigs, fieldConfig.childFields);\n    }\n  }\n  return undefined;\n}\nfunction enableDisableFilterInputAction(id, field, disable) {\n  const actionType = disable ? 'DISABLE' : 'ENABLE';\n  return {\n    type: id + '.FILTER_INPUT_' + actionType,\n    payload: {\n      field: field,\n      componentId: id\n    }\n  };\n}\nfunction initFieldValuesAction(id) {\n  return {\n    type: id + '.FIELD_VALUES_INIT',\n    payload: {\n      componentId: id\n    }\n  };\n}\nfunction changeSingleInputAction(id, data) {\n  return {\n    type: id + '.SINGLE_INPUT_CHANGE',\n    payload: {\n      value: data,\n      componentId: id\n    }\n  };\n}\nfunction changeMultipleInputsAction(id, data) {\n  return {\n    type: id + '.MULTIPLE_INPUTS_CHANGE',\n    payload: {\n      value: data,\n      componentId: id\n    }\n  };\n}\n\n/**\n * Helper function to modularize updating formFieldValues\n * Note, if we refactor `formFieldValues` to strictly be a mapping of field to value, we should remove this function,\n * and the logic can just live in `initializeFieldValueMapping`\n * @param {Object} formFieldValues The existing `formFieldValues` mapping\n * @param {Object} fieldConfig The field to be updated in `formFieldValues`\n * @return {Object} The updated `formFieldValues` mapping\n */\nfunction updateFieldValues(formFieldValues, fieldConfig, fieldSetIndex, fieldIndex) {\n  var _fieldConfig$value, _filterElement$inputE, _filterElement$inputE2, _InputComponent$defau, _fieldConfig$caseInse;\n  const filterElement = fieldConfig.filterElement;\n  let valueProps = {\n    value: (_fieldConfig$value = fieldConfig.value) !== null && _fieldConfig$value !== void 0 ? _fieldConfig$value : filterElement === null || filterElement === void 0 || (_filterElement$inputE = filterElement.inputElement) === null || _filterElement$inputE === void 0 ? void 0 : _filterElement$inputE.value\n  };\n  const InputComponent = _get__(\"inputComponents\")[`${filterElement === null || filterElement === void 0 || (_filterElement$inputE2 = filterElement.inputElement) === null || _filterElement$inputE2 === void 0 ? void 0 : _filterElement$inputE2.type}React`];\n  if (!valueProps.value && _get__(\"isFunction\")(InputComponent === null || InputComponent === void 0 || (_InputComponent$defau = InputComponent.default) === null || _InputComponent$defau === void 0 ? void 0 : _InputComponent$defau.getValueFromProps)) {\n    var _InputComponent$defau2, _filterElement$inputE3;\n    valueProps = InputComponent === null || InputComponent === void 0 || (_InputComponent$defau2 = InputComponent.default) === null || _InputComponent$defau2 === void 0 ? void 0 : _InputComponent$defau2.getValueFromProps({\n      ...((_filterElement$inputE3 = filterElement === null || filterElement === void 0 ? void 0 : filterElement.inputElement) !== null && _filterElement$inputE3 !== void 0 ? _filterElement$inputE3 : {}),\n      field: fieldConfig.fieldName\n    });\n  }\n  formFieldValues[fieldConfig.fieldName] = {\n    field: fieldConfig.fieldName,\n    operator: _get__(\"isFilterFieldSetting\")(fieldConfig) ? _get__(\"setOperator\")(fieldConfig) : undefined,\n    conditionalFilter: _get__(\"isFilterFieldSetting\")(fieldConfig) ? fieldConfig.conditionalFilter : undefined,\n    caseSensitive: !((_fieldConfig$caseInse = fieldConfig.caseInsensitive) !== null && _fieldConfig$caseInse !== void 0 ? _fieldConfig$caseInse : !fieldConfig.caseSensitive),\n    ...(_get__(\"isFilterFieldDateTypeSetting\")(fieldConfig) && {\n      noTimeZoneConversion: _get__(\"setNoTimeZoneConversion\")(fieldConfig)\n    }),\n    type: _get__(\"getDataSpecType\")(fieldConfig),\n    componentsToFilterMapping: _get__(\"isFilterFieldSetting\")(fieldConfig) ? fieldConfig.componentsToFilterMapping : undefined,\n    metricBasedComponentsToInputMapping: _get__(\"isInputFieldSetting\")(fieldConfig) ? fieldConfig.metricBasedComponentsToInputMapping : undefined,\n    fieldSetIndex: fieldSetIndex,\n    fieldIndex: fieldIndex,\n    ...valueProps\n  };\n  return formFieldValues;\n}\n\n/**\n * Helper function to set up `formFieldValues` mapping, which is mapping of field name to a set of values associated with\n * the field\n * @param {Object} formFieldValues The current mapping of field name to selected field configs\n * @param {Object} groupConfig The configuration to traverse and update `formFieldValues`.\n * @return {Object} The updated `formFieldValues`\n */\nfunction initializeFieldValueMapping(formFieldValues, groupConfig, fieldSetIndex) {\n  _get__(\"each\")(groupConfig.fields, function (fieldConfig, fieldIndex) {\n    formFieldValues = _get__(\"updateFieldValues\")(formFieldValues, fieldConfig, fieldSetIndex, fieldIndex);\n  });\n  return formFieldValues;\n}\nfunction inputChangeEffectHelper(state,\n// TODO: UI-8103 Add more descriptive type for updatedFieldValues\nupdatedFieldValues, componentId) {\n  let formFieldValues = _get__(\"UiSdlFormBase_getFormFieldValuesFromState\")(componentId, state);\n  let fieldSets;\n  // Initialize field value mapping\n  if (_get__(\"isEmpty\")(formFieldValues)) {\n    var _get__4;\n    formFieldValues = {};\n    fieldSets = ((_get__4 = _get__(\"getConfigFromState\")(componentId, state, ['dataSpec', 'fieldSets'])) === null || _get__4 === void 0 ? void 0 : _get__4.toJS()) || [];\n    _get__(\"each\")(fieldSets, function (fieldSet, i) {\n      formFieldValues = _get__(\"initializeFieldValueMapping\")(formFieldValues, fieldSet, i);\n    });\n  }\n  updatedFieldValues.forEach(function (updatedFieldValue) {\n    var _thisFieldValue$caseI;\n    const updatedFieldValueField = updatedFieldValue.field;\n    const allChildNodes = _get__(\"getAllChildrenNodesFromFieldName\")(formFieldValues, updatedFieldValueField);\n\n    // If there are conditionalFilters which changed the options of an input, we need to force the value to reset if not in options anymore\n    // and childNode has not been updated at the same time\n    allChildNodes.forEach(node => {\n      const childNodeUpdatedValue = updatedFieldValues.find(updatedField => updatedField.field === node.field);\n      if (_get__(\"isEmpty\")(childNodeUpdatedValue === null || childNodeUpdatedValue === void 0 ? void 0 : childNodeUpdatedValue.value)) {\n        const childFieldName = node.field;\n        const affectedFormFieldValue = formFieldValues[childFieldName];\n        affectedFormFieldValue.state = {\n          value: undefined\n        };\n        affectedFormFieldValue.value = undefined;\n      }\n    });\n    const thisFieldValue = formFieldValues[updatedFieldValueField];\n    Object.assign(updatedFieldValue, {\n      caseSensitive: !((_thisFieldValue$caseI = thisFieldValue.caseInsensitive) !== null && _thisFieldValue$caseI !== void 0 ? _thisFieldValue$caseI : !thisFieldValue.caseSensitive),\n      type: thisFieldValue.type,\n      operator: updatedFieldValue.operator || thisFieldValue.operator,\n      conditionalFilter: thisFieldValue.conditionalFilter,\n      fieldSetIndex: thisFieldValue.fieldSetIndex,\n      fieldIndex: thisFieldValue.fieldIndex,\n      componentsToFilterMapping: updatedFieldValue.componentsToFilterMapping || thisFieldValue.componentsToFilterMapping,\n      metricBasedComponentsToInputMapping: updatedFieldValue.metricBasedComponentsToInputMapping || thisFieldValue.metricBasedComponentsToInputMapping,\n      ...((thisFieldValue === null || thisFieldValue === void 0 ? void 0 : thisFieldValue.hasOwnProperty('noTimeZoneConversion')) && {\n        noTimeZoneConversion: thisFieldValue.noTimeZoneConversion\n      })\n    });\n    formFieldValues[updatedFieldValueField] = updatedFieldValue;\n  });\n  let newState = _get__(\"setConfigInState\")(componentId, state, ['formFieldValues'], formFieldValues);\n\n  // Update children state\n  const childIds = _get__(\"getConfigFromState\")(componentId, state, ['childIds']) || _get__(\"fromJS\")([]);\n  for (const id of childIds) {\n    // Id is in form: `${componentId}-${type}-${field}`; or if dynamically rendered ${}\n    const field = id.split('-')[2];\n    if (_get__(\"getConfigFromState\")(id, newState)) {\n      var _formFieldValues$fiel3;\n      newState = _get__(\"setConfigInState\")(id, newState, ['value'], ((_formFieldValues$fiel3 = formFieldValues[field]) === null || _formFieldValues$fiel3 === void 0 ? void 0 : _formFieldValues$fiel3.value) || '');\n    }\n  }\n  return _get__(\"setConfigInState\")(componentId, newState, ['filterSpec'], _get__(\"generateFilterString\")(formFieldValues));\n}\n\n// UI Reducers\n\nfunction singleInputChangeEffect(state, action) {\n  let payload = action.payload.value;\n  if (!payload.field) {\n    return state;\n  }\n  payload = _get__(\"formatSinglePayloadDateToLocalTime\")(payload);\n  return _get__(\"inputChangeEffectHelper\")(state, [payload], action.payload.componentId);\n}\nfunction fieldValuesInitReducer(state, action) {\n  var _get__5;\n  const componentId = action.payload.componentId;\n  if (_get__(\"UiSdlFormBase_getFormFieldValuesFromState\")(componentId, state)) {\n    return state;\n  }\n  let formFieldValues = {};\n  let fieldSets = ((_get__5 = _get__(\"getConfigFromState\")(componentId, state, ['dataSpec', 'fieldSets'])) === null || _get__5 === void 0 ? void 0 : _get__5.toJS()) || [];\n  _get__(\"each\")(fieldSets, function (fieldSet, i) {\n    formFieldValues = _get__(\"initializeFieldValueMapping\")(formFieldValues, fieldSet, i);\n  });\n  const newState = _get__(\"setConfigInState\")(componentId, state, ['formFieldValues'], formFieldValues);\n  return _get__(\"setConfigInState\")(componentId, newState, ['filterSpec'], _get__(\"generateFilterString\")(formFieldValues));\n}\nfunction multipleInputsChangeEffect(state, action) {\n  let payload = action.payload.value;\n  if (_get__(\"isEmpty\")(payload)) {\n    return state;\n  }\n  payload = _get__(\"formatMultiplePayloadDateToLocalTime\")(payload);\n  return _get__(\"inputChangeEffectHelper\")(state, payload, action.payload.componentId);\n}\nfunction enableDisableFilterInputHelper(state, fieldName, disable, componentId) {\n  var _get__6;\n  const fieldSetConfigsState = (_get__6 = _get__(\"getConfigFromState\")(componentId, state, ['dataSpec', 'fieldSets'])) === null || _get__6 === void 0 ? void 0 : _get__6.toJS();\n  const field = _get__(\"configForField\")(fieldName, fieldSetConfigsState);\n  if (field) {\n    field.disabled = disable;\n    return _get__(\"setConfigInState\")(componentId, state, ['dataSpec', 'fieldSets'], fieldSetConfigsState);\n  }\n  return state;\n}\nfunction filterInputEnableReducer(state, action) {\n  var _action$payload, _action$payload2;\n  const field = (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.field;\n  const componentId = (_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.componentId;\n  return _get__(\"enableDisableFilterInputHelper\")(state, field, false, componentId);\n}\nfunction filterInputDisableReducer(state, action) {\n  var _action$payload3, _action$payload4;\n  const field = (_action$payload3 = action.payload) === null || _action$payload3 === void 0 ? void 0 : _action$payload3.field;\n  const componentId = (_action$payload4 = action.payload) === null || _action$payload4 === void 0 ? void 0 : _action$payload4.componentId;\n  return _get__(\"enableDisableFilterInputHelper\")(state, field, true, componentId);\n}\nfunction savedSearchDeleteEffect(state, action) {\n  const siteId = action.meta.siteId;\n  const currentUserId = _get__(\"getCurrentUserFromState\")(siteId, state);\n  if (!_get__(\"isSameUser\")(action.payload.savedSearch.meta.createdBy, currentUserId)) {\n    return state;\n  }\n  let deletedSavedSearches = _get__(\"getConfigFromState\")(action.payload.componentId, state, ['deletedSavedSearches']);\n  if (_get__(\"isEmpty\")(deletedSavedSearches)) {\n    // Create an immutable list\n    deletedSavedSearches = _get__(\"fromJS\")([]);\n  }\n\n  // Now deletedSavedSearches should be an immutable list either from the state or from creating it above\n  deletedSavedSearches = deletedSavedSearches.push(action.payload.savedSearch);\n  return _get__(\"setConfigInState\")(action.payload.componentId, state, ['deletedSavedSearches'], deletedSavedSearches);\n}\nfunction savedSearchRenameEffect(state, action) {\n  let renamedSavedSearches = _get__(\"getConfigFromState\")(action.payload.componentId, state, ['renamedSavedSearches']);\n  const siteId = action.meta.siteId;\n  const currentUserId = _get__(\"getCurrentUserFromState\")(siteId, state);\n  if (!_get__(\"isSameUser\")(action.payload.savedSearch.meta.createdBy, currentUserId)) {\n    return state;\n  }\n  if (_get__(\"isEmpty\")(renamedSavedSearches)) {\n    // Create an immutable Map\n    renamedSavedSearches = _get__(\"fromJS\")({});\n  }\n  const id = action.payload.savedSearch.id;\n\n  // Now renamedSavedSearches should be an immutable Map either from the state or from creating it above\n  renamedSavedSearches = renamedSavedSearches.set(id, action.payload.name, action.payload.privateSearch);\n  return _get__(\"setConfigInState\")(action.payload.componentId, state, ['renamedSavedSearches'], renamedSavedSearches);\n}\n\n// UI Action Creators\n\nfunction loadInputDataSourcesAction(id) {\n  return {\n    type: id + '.INPUT_DS_LOAD'\n  };\n}\nfunction submitFilterAction(id, event, data) {\n  event === null || event === void 0 || event.preventDefault();\n  return {\n    type: id + '.FILTER_SUBMIT',\n    payload: {\n      value: data,\n      componentId: id\n    }\n  };\n}\nfunction submitAdvancedFilterAction(id, event, filterString) {\n  event === null || event === void 0 || event.preventDefault();\n  return {\n    type: id + '.ADVANCED_FILTER_SUBMIT',\n    payload: {\n      filterString: filterString,\n      componentId: id\n    }\n  };\n}\nfunction submitSavedSearchAction(id, savedSearchName, _componentId, saveAsPrivate = false) {\n  return {\n    type: id + '.SAVED_SEARCH_SUBMIT',\n    payload: {\n      savedSearchName: savedSearchName,\n      componentId: id,\n      saveAsPrivate: saveAsPrivate\n    }\n  };\n}\nfunction renameSavedSearchAction(id, savedSearch, newName, privateSearch) {\n  return {\n    type: id + '.SAVED_SEARCH_RENAME',\n    payload: {\n      savedSearch,\n      privateSearch,\n      name: newName,\n      componentId: id\n    }\n  };\n}\nfunction deleteSavedSearchAction(id, savedSearch) {\n  return {\n    type: id + '.SAVED_SEARCH_DELETE',\n    payload: {\n      savedSearch: savedSearch,\n      componentId: id\n    }\n  };\n}\nfunction validateFilterStringAction(id, filterString) {\n  return {\n    type: id + '.FILTER_STRING_VALIDATE',\n    payload: {\n      filterString: filterString,\n      componentId: id\n    }\n  };\n}\nfunction loadSavedSearchesAction(id) {\n  return {\n    type: id + '.SAVED_SEARCHES_LOAD',\n    payload: {\n      componentId: id\n    }\n  };\n}\n\n// UI Epics\n\nconst filterSubmitEpic = (actionStream, _stateStream) => actionStream.pipe(_get__(\"mergeMap\")(action => {\n  const fieldValues = action.payload.value;\n  const sourceComponentId = action.payload.componentId;\n  let observables = [];\n\n  /**\n   * Maintain a map of filtered components to not add duplicate FILTER_SUBMIT observables.  This was done with uniq\n   * from lodash previously but it is now throwing errors\n   */\n  const filteredComponents = {};\n  _get__(\"each\")(fieldValues, function (fieldValue) {\n    var _fieldValue$component, _fieldValue$metricBas;\n    const componentsToFilter = (fieldValue === null || fieldValue === void 0 || (_fieldValue$component = fieldValue.componentsToFilterMapping) === null || _fieldValue$component === void 0 ? void 0 : _fieldValue$component.value) || (fieldValue === null || fieldValue === void 0 || (_fieldValue$metricBas = fieldValue.metricBasedComponentsToInputMapping) === null || _fieldValue$metricBas === void 0 ? void 0 : _fieldValue$metricBas.value);\n    if (componentsToFilter) {\n      // We add the fieldValues that are relevant to the component from the payload.\n      observables = observables.concat(Object.keys(componentsToFilter).map(function (componentId) {\n        const relevantFieldValues = Object.keys(fieldValues).filter(key => {\n          var _fieldValues$key$comp, _fieldValues$key$metr;\n          return ((_fieldValues$key$comp = fieldValues[key].componentsToFilterMapping) === null || _fieldValues$key$comp === void 0 || (_fieldValues$key$comp = _fieldValues$key$comp.value) === null || _fieldValues$key$comp === void 0 ? void 0 : _fieldValues$key$comp.hasOwnProperty(componentId)) || ((_fieldValues$key$metr = fieldValues[key].metricBasedComponentsToInputMapping) === null || _fieldValues$key$metr === void 0 || (_fieldValues$key$metr = _fieldValues$key$metr.value) === null || _fieldValues$key$metr === void 0 ? void 0 : _fieldValues$key$metr.hasOwnProperty(componentId));\n        }).reduce((obj, key) => {\n          obj[key] = fieldValues[key];\n          return obj;\n        }, {});\n        if (!filteredComponents[componentId]) {\n          filteredComponents[componentId] = true;\n          return _get__(\"of\")({\n            type: componentId + '.FILTER_SUBMIT',\n            payload: {\n              componentId: componentId,\n              sourceComponentId: sourceComponentId,\n              value: relevantFieldValues\n            }\n          });\n        }\n      }));\n    }\n  });\n  observables = _get__(\"compact\")(observables);\n  if (observables.length) {\n    return _get__(\"from\")(observables).pipe(_get__(\"concatAll\")());\n  } else {\n    return _get__(\"EMPTY\");\n  }\n}));\nconst savedSearchPersistEpic = (actionStream, stateStream) => actionStream.pipe(_get__(\"mergeMap\")(action => {\n  const componentId = action.payload.componentId;\n  const dataSourceId = _get__(\"getCollectionDataSourceId\")('internalData.savedSearchResult', componentId);\n  return _get__(\"of\")(_get__(\"mergeArgumentsAction\")(dataSourceId, {\n    name: action.payload.savedSearchName,\n    privateSearch: action.payload.saveAsPrivate,\n    typeName: 'UiSdlFilterPanel',\n    serializedFilterFieldValues: JSON.stringify(_get__(\"UiSdlFormBase_getFormFieldValuesFromState\")(componentId, stateStream.value)),\n    metadataId: componentId\n  }), _get__(\"requestDataAction\")(dataSourceId));\n}));\nconst savedSearchesLoadEpic = (actionStream, stateStream) => actionStream.pipe(_get__(\"mergeMap\")(action => {\n  const componentId = action.payload.componentId;\n  const dataSourceId = _get__(\"getCollectionDataSourceId\")('internalData.savedSearches', componentId);\n  const state = stateStream.value;\n  const siteId = action.meta.siteId;\n  const currentUserId = _get__(\"getCurrentUserFromState\")(siteId, state);\n  return _get__(\"of\")(_get__(\"mergeArgumentsAction\")(dataSourceId, {\n    spec: {\n      filter: new (_get__(\"Filter\"))().eq('metadataId', componentId).and().lp().not().lit('privateSearch').or().eq('meta.createdBy', currentUserId).rp().toString()\n    }\n  }), _get__(\"requestDataAction\")(dataSourceId));\n}));\nconst savedSearchDeleteEpic = (actionStream, stateStream) => actionStream.pipe(_get__(\"mergeMap\")(action => {\n  const componentId = action.payload.componentId;\n  const dataSourceId = _get__(\"getCollectionDataSourceId\")('internalData.deleteSavedSearch', componentId);\n  const state = stateStream.value;\n  const siteId = action.meta.siteId;\n  const currentUserId = _get__(\"getCurrentUserFromState\")(siteId, state);\n  if (!_get__(\"isSameUser\")(action.payload.savedSearch.meta.createdBy, currentUserId)) {\n    return _get__(\"EMPTY\");\n  }\n  return _get__(\"of\")(_get__(\"mergeArgumentsAction\")(dataSourceId, {\n    this: {\n      id: action.payload.savedSearch.id\n    }\n  }), _get__(\"requestDataAction\")(dataSourceId));\n}));\nconst savedSearchRenameEpic = (actionStream, stateStream) => actionStream.pipe(_get__(\"mergeMap\")(action => {\n  const state = stateStream.value;\n  const componentId = action.payload.componentId;\n  const dataSourceId = _get__(\"getCollectionDataSourceId\")('internalData.renameSavedSearch', componentId);\n  const siteId = action.meta.siteId;\n  const currentUserId = _get__(\"getCurrentUserFromState\")(siteId, state);\n  if (!_get__(\"isSameUser\")(action.payload.savedSearch.meta.createdBy, currentUserId)) {\n    return _get__(\"EMPTY\");\n  }\n  return _get__(\"of\")(_get__(\"mergeArgumentsAction\")(dataSourceId, {\n    this: {\n      id: action.payload.savedSearch.id,\n      name: action.payload.name,\n      privateSearch: action.payload.privateSearch\n    }\n  }), _get__(\"requestDataAction\")(dataSourceId));\n}));\nconst filterStringValidateEpic = (actionStream, _stateStream) => actionStream.pipe(_get__(\"mergeMap\")(action => {\n  const dataSourceId = _get__(\"getCollectionDataSourceId\")('internalData.advancedFilterValidityResult', action.payload.componentId);\n  return _get__(\"of\")(_get__(\"mergeArgumentsAction\")(dataSourceId, {\n    typeName: 'UiSdlFilterPanel',\n    filterString: action.payload.filterString\n  }), _get__(\"requestDataAction\")(dataSourceId));\n}));\n\n/**\n * A function that fetches data and uses the response (FetchResult)\n * to recursively generate observables (ARGUMENTS_MERGE and REQUEST_DATA) from a given\n * node.\n *\n * This function uses DFS to traverse the tree.\n *\n * @param {string} componentId The component id\n * @param {ImmutableReduxState} state The redux state\n * @param {Record<string, any>} formFieldValues Form field value\n * @param {string} fieldName The field name of the form field value\n * @param {string | string[]} fieldValue The field's value (e.g. \"Canada\" | [\"California\", \"Texas\"])\n * @param {string} filterField The filter field (e.g. \"country\")\n * @param {string} parentValueField The parent input's valueField\n * @param {string} dataType The data type for the network call (e.g. \"SDLDemoRegion\")\n * @param {string} actionName The action name for the network call (e.g. \"fetch\")\n * @param {Record<string, any>} actionArgs The action args of the fetch call\n *\n * @returns {Observable<any>} An observable containing the whole tree from a field name and it's children conditional filters\n */\nfunction recursivelyFetchDataFromNode(componentId, state, formFieldValues, fieldName, fieldValue, filterField, parentValueField, dataType, actionName, actionArgs, operator) {\n  // TODO: add context vars\n  return _get__(\"ajax\")(dataType, actionName, actionArgs, null).pipe(_get__(\"mergeMap\")(function (event) {\n    const currentFormFieldValue = formFieldValues[fieldName];\n    const currentDataSourceId = _get__(\"getDataSourceIdFromFieldName\")(formFieldValues, fieldName, componentId);\n    const filterOperator = _get__(\"getFilterOperator\")(currentFormFieldValue, fieldValue, operator);\n    const filterString = _get__(\"getFilterString\")(filterField, fieldValue, filterOperator, parentValueField);\n    const requestData = _get__(\"of\")(_get__(\"mergeArgumentsAction\")(currentDataSourceId, {\n      spec: {\n        filter: filterString\n      }\n    }, componentId), _get__(\"requestDataAction\")(currentDataSourceId));\n    const response = event === null || event === void 0 ? void 0 : event.response;\n    const valueField = _get__(\"getValueFieldFromNode\")(componentId, state, fieldName, formFieldValues);\n    const newFieldValues = _get__(\"filterAndSanitizeFetchResult\")(response, fieldValue, filterField, valueField, parentValueField);\n    const immediateChildrenFormFieldValues = _get__(\"getImmediateChildrenOfNode\")(formFieldValues, fieldName);\n    const observables = [];\n    for (const childrenFormFieldValue of immediateChildrenFormFieldValues) {\n      const childrenFieldName = childrenFormFieldValue.field;\n      const childrenFilterField = childrenFormFieldValue.conditionalFilter.field;\n      const {\n        dataType,\n        actionName,\n        actionArgs\n      } = _get__(\"getDataTypeActionNameAndArgsFromDataSpec\")(componentId, state, childrenFieldName, formFieldValues);\n      const observable = _get__(\"recursivelyFetchDataFromNode\")(componentId, state, formFieldValues, childrenFieldName, newFieldValues, childrenFilterField, valueField, dataType, actionName, actionArgs);\n      observables.push(observable);\n    }\n    return _get__(\"concat\")(requestData, ...observables);\n  }), _get__(\"catchError\")(function (err) {\n    console.log(err);\n    return _get__(\"EMPTY\");\n  }));\n}\n\n/**\n * A helper function to get a flattened observable of the conditional filter tree\n * given a field name.\n *\n * Conditional filters have a tree-like structure.\n *\n *              [    ]                  [   ]\n *             /      \\       and/or      |\n *          [   ]    [   ]              [   ]\n *         /     \\        \\               |\n *      [   ]   [   ]    [   ]          [   ]\n *\n * This helper function uses dfs to recurisvely make ajax (fetch) requests to fetch\n * data to create filters for its' children nodes.\n *\n * There are two cases this function handles:\n *    1. When fieldValue is populated (when an item is selected)\n *        - This function does a fetch request for its children and recursively continues till\n *          there are no more children.\n *    2. When fieldValue is undefined (when an item is unselected)\n *        - This function will attempt to get the nearest parent that is selected. Using the parent's value\n *          the function will recursively fetch to populate its option fields.\n *\n * In this implementation, we refer to a formFieldValue as a node.\n *\n * @param {string} componentId The component id\n * @param {ImmutableReduxState} state The redux state\n * @param {Record<string, any>} formFieldValues Form field value\n * @param {string} fieldName The field name of the form field value\n * @param {string | string[]} fieldValue The field's value (e.g. \"Canada\" | [\"California\", \"Texas\"])\n * @param {string} operator The changed form field value's filter operator (e.g. \"EQUALS\", \"GREATER_THAN\")\n *\n * @returns {Observable<any>[]} An observable containing the whole tree from a field name and it's children conditional filters\n */\nfunction getObservablesFromFieldName(componentId, state, formFieldValues, fieldName, fieldValue, operator) {\n  const observables = [];\n  let fieldNameToUse = fieldName;\n  let fieldValueToUse = fieldValue;\n\n  /**\n   * If we are clearing values, we get the nearest selected parent node and refetch starting with its children.\n   *\n   * The node we start at should be the closest filled parent node to improve performance.\n   */\n  if (_get__(\"isEmpty\")(fieldValue)) {\n    const closestParentNode = _get__(\"getClosestParentNode\")(formFieldValues, fieldName);\n    if (closestParentNode !== null && closestParentNode !== void 0 && closestParentNode.field) {\n      fieldNameToUse = closestParentNode.field;\n    }\n    if (closestParentNode !== null && closestParentNode !== void 0 && closestParentNode.value) {\n      fieldValueToUse = closestParentNode.value;\n    }\n  }\n  const parentValueField = _get__(\"getValueFieldFromNode\")(componentId, state, fieldNameToUse, formFieldValues);\n  const immediateChildrenNodes = _get__(\"getImmediateChildrenOfNode\")(formFieldValues, fieldNameToUse);\n  for (const childrenNode of immediateChildrenNodes) {\n    const childrenFieldName = childrenNode.field;\n    const currentFilterField = childrenNode.conditionalFilter.field;\n    const {\n      dataType,\n      actionName,\n      actionArgs\n    } = _get__(\"getDataTypeActionNameAndArgsFromDataSpec\")(componentId, state, childrenFieldName, formFieldValues);\n    const observable = _get__(\"recursivelyFetchDataFromNode\")(componentId, state, formFieldValues, childrenFieldName, fieldValueToUse, currentFilterField, parentValueField, dataType, actionName, actionArgs, operator);\n    observables.push(observable);\n  }\n  return observables;\n}\nconst singleInputChangeEpic = (actionStream, stateStream) => actionStream.pipe(_get__(\"mergeMap\")(function (action) {\n  const state = stateStream.value;\n  const componentId = action.payload.componentId;\n  const changedFormFieldValue = action.payload.value;\n  const operator = changedFormFieldValue.operator;\n  const formFieldValues = _get__(\"UiSdlFormBase_getFormFieldValuesFromState\")(componentId, state);\n  const formFieldValuesWithConditionalFilterObservables = _get__(\"getObservablesFromFieldName\")(componentId, state, formFieldValues, changedFormFieldValue.field, changedFormFieldValue.value, operator);\n  return _get__(\"concat\")(...formFieldValuesWithConditionalFilterObservables);\n}));\nconst multipleInputsChangeEpic = (actionStream, stateStream) => actionStream.pipe(_get__(\"mergeMap\")(action => {\n  const state = stateStream.value;\n  const componentId = action.payload.componentId;\n  const formFieldValues = _get__(\"UiSdlFormBase_getFormFieldValuesFromState\")(componentId, state);\n  const observables = [];\n  for (const changedFormFieldValue of action.payload.value) {\n    var _changedFormFieldValu;\n    const formFieldValuesWithConditionalFilterObservables = _get__(\"getObservablesFromFieldName\")(componentId, state, formFieldValues, changedFormFieldValue.field, changedFormFieldValue.value, changedFormFieldValue === null || changedFormFieldValue === void 0 || (_changedFormFieldValu = changedFormFieldValue.value) === null || _changedFormFieldValu === void 0 ? void 0 : _changedFormFieldValu.operator);\n    formFieldValuesWithConditionalFilterObservables.forEach(observable => observables.push(observable));\n  }\n  if (observables.length) {\n    return _get__(\"from\")(observables).pipe(_get__(\"mergeAll\")());\n  } else {\n    return _get__(\"EMPTY\");\n  }\n}));\n\n/**\n * Converts a {@link UiSdlFieldSetFilterField} type name to its corresponding\n * `inputElement` type name.\n *\n * @param filterElementTypeName The name of the filter element type.\n * @return The {@link UiSdlInputComponent} type name.\n */\nfunction getInputElementTypeNameForFilterElementTypeName(filterElementTypeName) {\n  if (!filterElementTypeName) {\n    throw 'Filter element type is missing';\n  }\n\n  /**\n   * TODO: MIG8-1046\n   * This can be done with pluggables and probably should, having trouble with pluggables and parameterized types.\n   * inputElement is a parameterized field on the type and does not look to be available via pluggables as expected\n   * return inputComponents[filterElementTypeName] && inputComponents[filterElementTypeName].inputElement\n   */\n  switch (filterElementTypeName) {\n    case 'UiSdlCheckboxTreeFilterField':\n      return 'UiSdlCheckboxTreeFilter';\n    case 'UiSdlDateTimeInputFilterField':\n      return 'UiSdlDateTimeInput';\n    case 'UiSdlDateTimeRangeInputFilterField':\n      return 'UiSdlDateTimeRangeInput';\n    case 'UiSdlMultipleSearchFilterField':\n      return 'UiSdlMultipleSearchFilter';\n    case 'UiSdlNumberComparatorFilterField':\n      return 'UiSdlNumberComparator';\n    case 'UiSdlNumberRangeInputFilterField':\n      return 'UiSdlNumberRangeInput';\n    case 'UiSdlSegmentedButtonFilterField':\n      return 'UiSdlSegmentedButton';\n    case 'UiSdlSelectInputFilterField':\n      return 'UiSdlSelectInputFilter';\n    case 'UiSdlIconSelectInputFilterField':\n      return 'UiSdlIconSelectInput';\n    case 'UiSdlSingleSearchFilterField':\n      return 'UiSdlSingleSearchFilter';\n    case 'UiSdlTextInputFilterField':\n      return 'UiSdlTextInput';\n    case 'UiSdlTextAreaInputFilterField':\n      return 'UiSdlTextAreaInput';\n    case 'UiSdlToggleFilterField':\n      return 'UiSdlToggle';\n    case 'UiSdlRadioButtonGroupFilterField':\n      return 'UiSdlRadioButtonGroup';\n    case 'UiSdlRadioButtonWithInputValueGroupFilterField':\n      return 'UiSdlRadioButtonWithInputValueGroup';\n  }\n}\n\n/**\n * Extendable helper function.  Exported explicity to be used in UiSdlFilterPanelReact.tsx and passed to\n * UiSdlFormBase#prepareFieldSetsForRendering\n */\nfunction mapFieldConfig(fieldSetting, dataConfig, _componentDataSourceKey) {\n  const sanitizedFieldSetting = _get__(\"sanitizeFieldSetting\")(fieldSetting);\n  const fieldName = sanitizedFieldSetting.fieldName;\n\n  // TODO: UI-7894 This used to contain other props related to data sources, but it shouldn't anymore\n  const rawInputElement = _get__(\"getInputElementForFieldSetting\")(fieldSetting);\n\n  /*\n   * The input can be treated just like a form field, in terms of resolving nested situations.\n   * TODO: UI-5854 We should not have to import UiSdlForm specific things, but it already handles nesting\n   */\n  let transformedInputElement;\n  if (_get__(\"isFilterFieldSetting\")(sanitizedFieldSetting)) {\n    transformedInputElement = _get__(\"formMapFieldConfig\")(sanitizedFieldSetting.filterElement, dataConfig, _componentDataSourceKey);\n  } else {\n    transformedInputElement = _get__(\"formMapFieldConfig\")(sanitizedFieldSetting, dataConfig, _componentDataSourceKey);\n  }\n  const dataSourceKey = _get__(\"getFieldSettingDataConfigId\")(fieldSetting);\n\n  // TODO: UI-7894 This used to contain other props related to data sources, but it shouldn't anymore\n  Object.assign(dataConfig, _get__(\"mapDataForFieldSetting\")(rawInputElement, dataSourceKey));\n  return Object.assign({}, transformedInputElement, {\n    component: transformedInputElement.type,\n    field: fieldName,\n    disabled: sanitizedFieldSetting.disabled,\n    label: sanitizedFieldSetting.label,\n    hidden: sanitizedFieldSetting.hidden,\n    hint: sanitizedFieldSetting.hintText || sanitizedFieldSetting.hint\n  });\n}\nfunction doDataMerge(componentId, dataSpecFieldName, dataDestinationFieldName, props, state) {\n  // Only do merging for `internalDataSpec`/`internalData`\n  if (dataSpecFieldName !== 'internalDataSpec' || dataDestinationFieldName !== 'internalData') {\n    return;\n  }\n\n  /*\n   * `UiSdlUseData` tries to put each nested data spec's data directly into `props.internalData`\n   * before calling `doDataMerge`, so we need to clear `props.internalData` before returning\n   * the real `props.internalData` value. Simply returning the correct data is not enough\n   * because `UiSdlUseData` does a `merge` with `{ internalData: ... }` and this function's\n   * return value.\n   */\n  delete props[dataDestinationFieldName];\n  return {\n    [dataDestinationFieldName]: {\n      savedSearchResult: _get__(\"getDataFromState\")(_get__(\"getCollectionDataSourceId\")('internalData.savedSearchResult', componentId), state),\n      savedSearches: _get__(\"getDataFromState\")(_get__(\"getCollectionDataSourceId\")('internalData.savedSearches', componentId), state),\n      deleteSavedSearch: _get__(\"getDataFromState\")(_get__(\"getCollectionDataSourceId\")('internalData.deleteSavedSearch', componentId), state),\n      renameSavedSearch: _get__(\"getDataFromState\")(_get__(\"getCollectionDataSourceId\")('internalData.renameSavedSearch', componentId), state),\n      advancedFilterValidityResult: _get__(\"getDataFromState\")(_get__(\"getCollectionDataSourceId\")('internalData.advancedFilterValidityResult', componentId), state)\n    }\n  };\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst epics = {\n  ..._get__(\"epics1\"),\n  ..._get__(\"epics0\"),\n  FILTER_SUBMIT: _get__(\"filterSubmitEpic\"),\n  SAVED_SEARCH_SUBMIT: _get__(\"savedSearchPersistEpic\"),\n  SAVED_SEARCHES_LOAD: _get__(\"savedSearchesLoadEpic\"),\n  SAVED_SEARCH_DELETE: _get__(\"savedSearchDeleteEpic\"),\n  SAVED_SEARCH_RENAME: _get__(\"savedSearchRenameEpic\"),\n  FILTER_STRING_VALIDATE: _get__(\"filterStringValidateEpic\"),\n  SINGLE_INPUT_CHANGE: _get__(\"singleInputChangeEpic\"),\n  MULTIPLE_INPUTS_CHANGE: _get__(\"multipleInputsChangeEpic\")\n};\nconst reducers = {\n  ..._get__(\"reducers1\"),\n  ..._get__(\"reducers0\"),\n  SINGLE_INPUT_CHANGE: _get__(\"singleInputChangeEffect\"),\n  FIELD_VALUES_INIT: _get__(\"fieldValuesInitReducer\"),\n  MULTIPLE_INPUTS_CHANGE: _get__(\"multipleInputsChangeEffect\"),\n  SAVED_SEARCH_DELETE: _get__(\"savedSearchDeleteEffect\"),\n  SAVED_SEARCH_RENAME: _get__(\"savedSearchRenameEffect\"),\n  FILTER_INPUT_ENABLE: _get__(\"filterInputEnableReducer\"),\n  FILTER_INPUT_DISABLE: _get__(\"filterInputDisableReducer\")\n};\nconst actionCreators = {\n  ..._get__(\"actionCreators1\"),\n  ..._get__(\"actionCreators0\"),\n  submitFilterAction: _get__(\"submitFilterAction\"),\n  submitAdvancedFilterAction: _get__(\"submitAdvancedFilterAction\"),\n  loadInputDataSourcesAction: _get__(\"loadInputDataSourcesAction\"),\n  changeSingleInputAction: _get__(\"changeSingleInputAction\"),\n  initFieldValuesAction: _get__(\"initFieldValuesAction\"),\n  changeMultipleInputsAction: _get__(\"changeMultipleInputsAction\"),\n  submitSavedSearchAction: _get__(\"submitSavedSearchAction\"),\n  deleteSavedSearchAction: _get__(\"deleteSavedSearchAction\"),\n  renameSavedSearchAction: _get__(\"renameSavedSearchAction\"),\n  loadSavedSearchesAction: _get__(\"loadSavedSearchesAction\"),\n  validateFilterStringAction: _get__(\"validateFilterStringAction\"),\n  enableDisableFilterInputAction: _get__(\"enableDisableFilterInputAction\")\n};\nconst defaultValues = {\n  \"disableDataRequestOnFirstRender\": false,\n  \"triggersRegistered\": false,\n  \"wrapWithMetadataId\": false,\n  \"filterButtonText\": \"UiSdlFilterPanel.filterButtonText\",\n  \"clearButtonText\": \"UiSdlFilterPanel.clearButtonText\",\n  \"saveSearchButtonText\": \"UiSdlCommon.saveButtonText\",\n  \"cancelSaveSearchText\": \"UiSdlCommon.cancelButtonText\",\n  \"saveSearchSubtitle\": \"UiSdlFilterPanel.saveSearchSubtitle\",\n  \"saveSearchTitle\": \"UiSdlFilterPanel.saveSearchTitle\",\n  \"renameSearchPanelSubtitle\": \"UiSdlFilterPanel.renameSearchPanelSubtitle\",\n  \"renameSearchPanelTitle\": \"UiSdlFilterPanel.renameSearchPanelTitle\",\n  \"saveSearchFieldLabel\": \"UiSdlFilterPanel.saveSearchFieldLabel\",\n  \"advancedFieldLabel\": \"UiSdlFilterPanel.advancedFieldLabel\",\n  \"loadSearchPanelSubtitle\": \"UiSdlFilterPanel.loadSearchPanelSubtitle\",\n  \"loadSearchPanelTitle\": \"UiSdlFilterPanel.loadSearchPanelTitle\",\n  \"cancelLoadSearchButtonText\": \"UiSdlFilterPanel.cancelLoadSearchButtonText\",\n  \"saveAsPrivateToggleText\": \"UiSdlFilterPanel.saveAsPrivateToggleText\",\n  \"settingsMenu\": {}\n};\n\n\n\n\n\n\n\n\n\n\n\n\nfunction _getGlobalObject() {\n  try {\n    if (!!__webpack_require__.g) {\n      return __webpack_require__.g;\n    }\n  } catch (e) {\n    try {\n      if (!!window) {\n        return window;\n      }\n    } catch (e) {\n      return this;\n    }\n  }\n}\n;\nvar _RewireModuleId__ = null;\nfunction _getRewireModuleId__() {\n  if (_RewireModuleId__ === null) {\n    let globalVariable = _getGlobalObject();\n    if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {\n      globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0;\n    }\n    _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++;\n  }\n  return _RewireModuleId__;\n}\nfunction _getRewireRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__;\n}\nfunction _getRewireExportsRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__;\n}\nconst _sync_internal_state_with_exports__ = false;\nconst _exports_to_reset__ = new Map();\nfunction _record_export_to_reset__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  if (!_exports_to_reset__.has(variableName)) {\n    _exports_to_reset__.set(variableName, value);\n  }\n}\nfunction _restore_exports__() {\n  const entries = _exports_to_reset__.entries();\n  for (const [variableName, value] of entries) {\n    exports[variableName] = value;\n  }\n  _exports_to_reset__.clear();\n}\nfunction _maybe_update_export__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  _record_export_to_reset__(variableName, exports[variableName]);\n  exports[variableName] = value;\n}\nfunction _getRewiredData__() {\n  let moduleId = _getRewireModuleId__();\n  let registry = _getRewireRegistry__();\n  let rewireData = registry[moduleId];\n  if (!rewireData) {\n    registry[moduleId] = Object.create(null);\n    rewireData = registry[moduleId];\n  }\n  let exportsRegistry = _getRewireExportsRegistry__();\n  if (!exportsRegistry[moduleId]) {\n    exportsRegistry[moduleId] = _restore_exports__;\n  }\n  return rewireData;\n}\n(function registerResetAll() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable['__rewire_reset_all__']) {\n    theGlobalVariable['__rewire_reset_all__'] = function () {\n      theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n      const exportsRegistry = _getRewireExportsRegistry__();\n      for (const restoreFunc of Object.values(exportsRegistry)) {\n        restoreFunc();\n      }\n      theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n    };\n  }\n})();\nvar INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';\nlet _RewireAPI__ = {};\n(function () {\n  function addPropertyToAPIObject(name, value) {\n    Object.defineProperty(_RewireAPI__, name, {\n      value: value,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  addPropertyToAPIObject('__get__', _get__);\n  addPropertyToAPIObject('__GetDependency__', _get__);\n  addPropertyToAPIObject('__Rewire__', _set__);\n  addPropertyToAPIObject('__set__', _set__);\n  addPropertyToAPIObject('__reset__', _reset__);\n  addPropertyToAPIObject('__ResetDependency__', _reset__);\n  addPropertyToAPIObject('__with__', _with__);\n})();\nfunction _get__(variableName) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _get_original__(variableName);\n  } else {\n    var value = rewireData[variableName];\n    if (value === INTENTIONAL_UNDEFINED) {\n      return undefined;\n    } else {\n      return value;\n    }\n  }\n}\nfunction _get_original__(variableName) {\n  switch (variableName) {\n    case \"isFilterFieldSetting\":\n      return isFilterFieldSetting;\n    case \"isInputFieldSetting\":\n      return isInputFieldSetting;\n    case \"getInputElementForFieldSetting\":\n      return getInputElementForFieldSetting;\n    case \"dataSpecHasDataType\":\n      return dataSpecHasDataType;\n    case \"getDataTypeName\":\n      return _c3_ui_UiSdlComponentDataSpec__WEBPACK_IMPORTED_MODULE_22__.getDataTypeName;\n    case \"getInputElementTypeNameForFilterElementTypeName\":\n      return getInputElementTypeNameForFilterElementTypeName;\n    case \"UiSdlFormBase_sanitizeFieldSetting\":\n      return _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_20__.sanitizeFieldSetting;\n    case \"isArray\":\n      return (lodash_isArray__WEBPACK_IMPORTED_MODULE_7___default());\n    case \"isEmpty\":\n      return (lodash_isEmpty__WEBPACK_IMPORTED_MODULE_8___default());\n    case \"DateTime\":\n      return (_c3_ui_UiSdlDateTime__WEBPACK_IMPORTED_MODULE_17___default());\n    case \"isValidDate\":\n      return isValidDate;\n    case \"moment\":\n      return (moment__WEBPACK_IMPORTED_MODULE_15___default());\n    case \"isDateArray\":\n      return isDateArray;\n    case \"checkValidDateAndFormat\":\n      return checkValidDateAndFormat;\n    case \"formatSinglePayloadDateToLocalTime\":\n      return formatSinglePayloadDateToLocalTime;\n    case \"filterComponents\":\n      return (_c3_ui_types_pluggables_filterComponents__WEBPACK_IMPORTED_MODULE_26___default());\n    case \"setValueOrDefaultValue\":\n      return setValueOrDefaultValue;\n    case \"getCollectionDataSourceId\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_16__.getCollectionDataSourceId;\n    case \"getImmediateChildrenOfNode\":\n      return getImmediateChildrenOfNode;\n    case \"getConfigFromState\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_16__.getConfigFromState;\n    case \"getFormFieldInputElementDataSpec\":\n      return getFormFieldInputElementDataSpec;\n    case \"UiSdlFilterFieldOperatorToExpression\":\n      return (_c3_ui_UiSdlFilterFieldOperatorToExpression__WEBPACK_IMPORTED_MODULE_24___default());\n    case \"isString\":\n      return (lodash_isString__WEBPACK_IMPORTED_MODULE_9___default());\n    case \"isNil\":\n      return (lodash_isNil__WEBPACK_IMPORTED_MODULE_11___default());\n    case \"isNumber\":\n      return (lodash_isNumber__WEBPACK_IMPORTED_MODULE_10___default());\n    case \"Filter\":\n      return (_c3_ui_UiSdlFilter__WEBPACK_IMPORTED_MODULE_25___default());\n    case \"get\":\n      return (lodash_get__WEBPACK_IMPORTED_MODULE_12___default());\n    case \"uniq\":\n      return (lodash_uniq__WEBPACK_IMPORTED_MODULE_13___default());\n    case \"flatten\":\n      return (lodash_flatten__WEBPACK_IMPORTED_MODULE_5___default());\n    case \"map\":\n      return (lodash_map__WEBPACK_IMPORTED_MODULE_6___default());\n    case \"inputComponents\":\n      return (_c3_ui_types_pluggables_inputComponents__WEBPACK_IMPORTED_MODULE_27___default());\n    case \"isFunction\":\n      return (lodash_isFunction__WEBPACK_IMPORTED_MODULE_14___default());\n    case \"setOperator\":\n      return setOperator;\n    case \"isFilterFieldDateTypeSetting\":\n      return isFilterFieldDateTypeSetting;\n    case \"setNoTimeZoneConversion\":\n      return setNoTimeZoneConversion;\n    case \"getDataSpecType\":\n      return getDataSpecType;\n    case \"each\":\n      return (lodash_each__WEBPACK_IMPORTED_MODULE_4___default());\n    case \"updateFieldValues\":\n      return updateFieldValues;\n    case \"UiSdlFormBase_getFormFieldValuesFromState\":\n      return _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_20__.getFormFieldValuesFromState;\n    case \"initializeFieldValueMapping\":\n      return initializeFieldValueMapping;\n    case \"getAllChildrenNodesFromFieldName\":\n      return getAllChildrenNodesFromFieldName;\n    case \"setConfigInState\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_16__.setConfigInState;\n    case \"fromJS\":\n      return immutable__WEBPACK_IMPORTED_MODULE_0__.fromJS;\n    case \"generateFilterString\":\n      return _c3_ui_UiSdlFilterable__WEBPACK_IMPORTED_MODULE_19__.generateFilterString;\n    case \"inputChangeEffectHelper\":\n      return inputChangeEffectHelper;\n    case \"formatMultiplePayloadDateToLocalTime\":\n      return formatMultiplePayloadDateToLocalTime;\n    case \"configForField\":\n      return configForField;\n    case \"enableDisableFilterInputHelper\":\n      return enableDisableFilterInputHelper;\n    case \"getCurrentUserFromState\":\n      return _c3_ui_UiSdlSite__WEBPACK_IMPORTED_MODULE_18__.getCurrentUserFromState;\n    case \"isSameUser\":\n      return isSameUser;\n    case \"mergeMap\":\n      return rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.mergeMap;\n    case \"of\":\n      return rxjs__WEBPACK_IMPORTED_MODULE_2__.of;\n    case \"compact\":\n      return (lodash_compact__WEBPACK_IMPORTED_MODULE_3___default());\n    case \"from\":\n      return rxjs__WEBPACK_IMPORTED_MODULE_2__.from;\n    case \"concatAll\":\n      return rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.concatAll;\n    case \"EMPTY\":\n      return rxjs__WEBPACK_IMPORTED_MODULE_2__.EMPTY;\n    case \"mergeArgumentsAction\":\n      return _c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_23__.mergeArgumentsAction;\n    case \"requestDataAction\":\n      return _c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_23__.requestDataAction;\n    case \"ajax\":\n      return _c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_23__.ajax;\n    case \"getDataSourceIdFromFieldName\":\n      return getDataSourceIdFromFieldName;\n    case \"getFilterOperator\":\n      return getFilterOperator;\n    case \"getFilterString\":\n      return getFilterString;\n    case \"getValueFieldFromNode\":\n      return getValueFieldFromNode;\n    case \"filterAndSanitizeFetchResult\":\n      return filterAndSanitizeFetchResult;\n    case \"getDataTypeActionNameAndArgsFromDataSpec\":\n      return getDataTypeActionNameAndArgsFromDataSpec;\n    case \"recursivelyFetchDataFromNode\":\n      return recursivelyFetchDataFromNode;\n    case \"concat\":\n      return rxjs__WEBPACK_IMPORTED_MODULE_2__.concat;\n    case \"catchError\":\n      return rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.catchError;\n    case \"getClosestParentNode\":\n      return getClosestParentNode;\n    case \"getObservablesFromFieldName\":\n      return getObservablesFromFieldName;\n    case \"mergeAll\":\n      return rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.mergeAll;\n    case \"sanitizeFieldSetting\":\n      return sanitizeFieldSetting;\n    case \"formMapFieldConfig\":\n      return _c3_ui_UiSdlForm__WEBPACK_IMPORTED_MODULE_21__.mapFieldConfig;\n    case \"getFieldSettingDataConfigId\":\n      return _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_20__.getFieldSettingDataConfigId;\n    case \"mapDataForFieldSetting\":\n      return mapDataForFieldSetting;\n    case \"getDataFromState\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_16__.getDataFromState;\n    case \"epics1\":\n      return _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_28__.epics;\n    case \"epics0\":\n      return _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_20__.epics;\n    case \"filterSubmitEpic\":\n      return filterSubmitEpic;\n    case \"savedSearchPersistEpic\":\n      return savedSearchPersistEpic;\n    case \"savedSearchesLoadEpic\":\n      return savedSearchesLoadEpic;\n    case \"savedSearchDeleteEpic\":\n      return savedSearchDeleteEpic;\n    case \"savedSearchRenameEpic\":\n      return savedSearchRenameEpic;\n    case \"filterStringValidateEpic\":\n      return filterStringValidateEpic;\n    case \"singleInputChangeEpic\":\n      return singleInputChangeEpic;\n    case \"multipleInputsChangeEpic\":\n      return multipleInputsChangeEpic;\n    case \"reducers1\":\n      return _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_28__.reducers;\n    case \"reducers0\":\n      return _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_20__.reducers;\n    case \"singleInputChangeEffect\":\n      return singleInputChangeEffect;\n    case \"fieldValuesInitReducer\":\n      return fieldValuesInitReducer;\n    case \"multipleInputsChangeEffect\":\n      return multipleInputsChangeEffect;\n    case \"savedSearchDeleteEffect\":\n      return savedSearchDeleteEffect;\n    case \"savedSearchRenameEffect\":\n      return savedSearchRenameEffect;\n    case \"filterInputEnableReducer\":\n      return filterInputEnableReducer;\n    case \"filterInputDisableReducer\":\n      return filterInputDisableReducer;\n    case \"actionCreators1\":\n      return _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_28__.actionCreators;\n    case \"actionCreators0\":\n      return _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_20__.actionCreators;\n    case \"submitFilterAction\":\n      return submitFilterAction;\n    case \"submitAdvancedFilterAction\":\n      return submitAdvancedFilterAction;\n    case \"loadInputDataSourcesAction\":\n      return loadInputDataSourcesAction;\n    case \"changeSingleInputAction\":\n      return changeSingleInputAction;\n    case \"initFieldValuesAction\":\n      return initFieldValuesAction;\n    case \"changeMultipleInputsAction\":\n      return changeMultipleInputsAction;\n    case \"submitSavedSearchAction\":\n      return submitSavedSearchAction;\n    case \"deleteSavedSearchAction\":\n      return deleteSavedSearchAction;\n    case \"renameSavedSearchAction\":\n      return renameSavedSearchAction;\n    case \"loadSavedSearchesAction\":\n      return loadSavedSearchesAction;\n    case \"validateFilterStringAction\":\n      return validateFilterStringAction;\n    case \"enableDisableFilterInputAction\":\n      return enableDisableFilterInputAction;\n  }\n  return undefined;\n}\nfunction _assign__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _set_original__(variableName, value);\n  } else {\n    _maybe_update_export__(variableName, value);\n    return rewireData[variableName] = value;\n  }\n}\nfunction _set_original__(variableName, _value) {\n  switch (variableName) {}\n  return undefined;\n}\nfunction _update_operation__(operation, variableName, prefix) {\n  var oldValue = _get__(variableName);\n  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;\n  _assign__(variableName, newValue);\n  return prefix ? newValue : oldValue;\n}\nfunction _set__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (typeof variableName === 'object') {\n    Object.keys(variableName).forEach(function (name) {\n      rewireData[name] = variableName[name];\n    });\n    return function () {\n      Object.keys(variableName).forEach(function (name) {\n        _reset__(variableName);\n      });\n    };\n  } else {\n    _maybe_update_export__(variableName, value);\n    if (value === undefined) {\n      rewireData[variableName] = INTENTIONAL_UNDEFINED;\n    } else {\n      rewireData[variableName] = value;\n    }\n    return function () {\n      _reset__(variableName);\n    };\n  }\n}\nfunction _reset__(variableName) {\n  let rewireData = _getRewiredData__();\n  delete rewireData[variableName];\n  if (Object.keys(rewireData).length == 0) {\n    delete _getRewireRegistry__()[_getRewireModuleId__];\n  }\n  if (_exports_to_reset__.has(variableName)) {\n    exports[variableName] = _exports_to_reset__.get(variableName);\n    _exports_to_reset__.delete(variableName);\n  }\n}\nfunction _with__(object) {\n  let rewireData = _getRewiredData__();\n  var rewiredVariableNames = Object.keys(object);\n  var previousValues = {};\n  function reset() {\n    rewiredVariableNames.forEach(function (variableName) {\n      rewireData[variableName] = previousValues[variableName];\n    });\n  }\n  return function (callback) {\n    rewiredVariableNames.forEach(function (variableName) {\n      previousValues[variableName] = rewireData[variableName];\n      rewireData[variableName] = object[variableName];\n    });\n    let result = callback();\n    if (!!result && typeof result.then == 'function') {\n      result.then(reset).catch(reset);\n    } else {\n      reset();\n    }\n    return result;\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_RewireAPI__);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@c3/ui/UiSdlFilterPanel.ts_uiComponentLibrary\n");

/***/ })

}]);