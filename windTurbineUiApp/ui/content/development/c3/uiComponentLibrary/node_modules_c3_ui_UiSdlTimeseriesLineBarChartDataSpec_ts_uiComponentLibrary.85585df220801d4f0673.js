"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkjs_webpack_c3_client_node"] = self["webpackChunkjs_webpack_c3_client_node"] || []).push([["node_modules_c3_ui_UiSdlTimeseriesLineBarChartDataSpec_ts_uiComponentLibrary"],{

/***/ "./node_modules/@c3/ui/UiSdlTimeseriesLineBarChartDataSpec.ts_uiComponentLibrary":
/*!********************************************************************!*\
  !*** ./node_modules/@c3/ui/UiSdlTimeseriesLineBarChartDataSpec.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __GetDependency__: () => (/* binding */ _get__),\n/* harmony export */   __ResetDependency__: () => (/* binding */ _reset__),\n/* harmony export */   __RewireAPI__: () => (/* binding */ _RewireAPI__),\n/* harmony export */   __Rewire__: () => (/* binding */ _set__),\n/* harmony export */   __get__: () => (/* binding */ _get__),\n/* harmony export */   __set__: () => (/* binding */ _set__),\n/* harmony export */   adjustDateToTimeZone: () => (/* reexport safe */ _c3_ui_UiSdlWithTimeZone__WEBPACK_IMPORTED_MODULE_9__.adjustDateToTimeZone),\n/* harmony export */   alignDate: () => (/* binding */ alignDate),\n/* harmony export */   applyDataTransforms: () => (/* reexport safe */ _c3_ui_WithDataTransforms__WEBPACK_IMPORTED_MODULE_12__.applyDataTransforms),\n/* harmony export */   applyTransformArgs: () => (/* reexport safe */ _c3_ui_WithDataTransforms__WEBPACK_IMPORTED_MODULE_12__.applyTransformArgs),\n/* harmony export */   dateToString: () => (/* binding */ dateToString),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaultValues: () => (/* binding */ defaultValues),\n/* harmony export */   formatTimeZone: () => (/* reexport safe */ _c3_ui_UiSdlWithTimeZone__WEBPACK_IMPORTED_MODULE_9__.formatTimeZone),\n/* harmony export */   generateFilterFromContextVars: () => (/* reexport safe */ _c3_ui_UiSdlComponentDataSpec__WEBPACK_IMPORTED_MODULE_5__.generateFilterFromContextVars),\n/* harmony export */   generateFilterFromDataPathAndContextVars: () => (/* reexport safe */ _c3_ui_UiSdlComponentDataSpec__WEBPACK_IMPORTED_MODULE_5__.generateFilterFromDataPathAndContextVars),\n/* harmony export */   getDataTypeName: () => (/* reexport safe */ _c3_ui_UiSdlComponentDataSpec__WEBPACK_IMPORTED_MODULE_5__.getDataTypeName),\n/* harmony export */   getEndDate: () => (/* binding */ getEndDate),\n/* harmony export */   getOffsetFromLocalTimeZone: () => (/* reexport safe */ _c3_ui_UiSdlWithTimeZone__WEBPACK_IMPORTED_MODULE_9__.getOffsetFromLocalTimeZone),\n/* harmony export */   getStartDate: () => (/* binding */ getStartDate),\n/* harmony export */   getTimeZone: () => (/* reexport safe */ _c3_ui_UiSdlWithTimeZone__WEBPACK_IMPORTED_MODULE_9__.getTimeZone),\n/* harmony export */   isValidTimeZoneId: () => (/* reexport safe */ _c3_ui_UiSdlWithTimeZone__WEBPACK_IMPORTED_MODULE_9__.isValidTimeZoneId),\n/* harmony export */   recursivelyGetField: () => (/* reexport safe */ _c3_ui_UiSdlComponentDataSpec__WEBPACK_IMPORTED_MODULE_5__.recursivelyGetField),\n/* harmony export */   toPartiallyAppliedActions: () => (/* binding */ toPartiallyAppliedActions),\n/* harmony export */   toPartiallyAppliedAdvancedActions: () => (/* reexport safe */ _c3_ui_UiSdlComponentDataSpec__WEBPACK_IMPORTED_MODULE_5__.toPartiallyAppliedAdvancedActions)\n/* harmony export */ });\n/* harmony import */ var moment_timezone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment-timezone */ \"./node_modules/moment-timezone/index.js_uiComponentLibrary\");\n/* harmony import */ var moment_timezone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment_timezone__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_uniq__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/uniq */ \"webpack/sharing/consume/default/lodash/uniq/lodash/uniq_uiComponentLibrary\");\n/* harmony import */ var lodash_uniq__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_uniq__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_extend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/extend */ \"webpack/sharing/consume/default/lodash/extend/lodash/extend_uiComponentLibrary\");\n/* harmony import */ var lodash_extend__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_extend__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/isEqual */ \"webpack/sharing/consume/default/lodash/isEqual/lodash/isEqual_uiComponentLibrary\");\n/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_isEqual__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/isEmpty */ \"webpack/sharing/consume/default/lodash/isEmpty/lodash/isEmpty_uiComponentLibrary\");\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _c3_ui_UiSdlComponentDataSpec__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @c3/ui/UiSdlComponentDataSpec */ \"webpack/container/remote/@c3/ui/UiSdlComponentDataSpec_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlComponentDataSpec__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlComponentDataSpec__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _c3_ui_UiSdlTimeseriesLineBarChartXAxisConfig__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @c3/ui/UiSdlTimeseriesLineBarChartXAxisConfig */ \"webpack/container/remote/@c3/ui/UiSdlTimeseriesLineBarChartXAxisConfig_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlTimeseriesLineBarChartXAxisConfig__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlTimeseriesLineBarChartXAxisConfig__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _c3_ui_UiSdlTimeseriesLineBarChartXAxisStaticConfig__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @c3/ui/UiSdlTimeseriesLineBarChartXAxisStaticConfig */ \"webpack/container/remote/@c3/ui/UiSdlTimeseriesLineBarChartXAxisStaticConfig_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlTimeseriesLineBarChartXAxisStaticConfig__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlTimeseriesLineBarChartXAxisStaticConfig__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _c3_ui_UiSdlTransformEvalMetricsResultToUiSdlChartData__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @c3/ui/UiSdlTransformEvalMetricsResultToUiSdlChartData */ \"webpack/container/remote/@c3/ui/UiSdlTransformEvalMetricsResultToUiSdlChartData_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlTransformEvalMetricsResultToUiSdlChartData__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlTransformEvalMetricsResultToUiSdlChartData__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _c3_ui_UiSdlWithTimeZone__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @c3/ui/UiSdlWithTimeZone */ \"webpack/container/remote/@c3/ui/UiSdlWithTimeZone_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlWithTimeZone__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlWithTimeZone__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _c3_ui_Interval__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @c3/ui/Interval */ \"webpack/container/remote/@c3/ui/Interval_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_Interval__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_Interval__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _c3_ui_UiSdlDateTime__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @c3/ui/UiSdlDateTime */ \"webpack/container/remote/@c3/ui/UiSdlDateTime_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlDateTime__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlDateTime__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _c3_ui_WithDataTransforms__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @c3/ui/WithDataTransforms */ \"webpack/sharing/consume/default/@c3/ui/WithDataTransforms_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_WithDataTransforms__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_WithDataTransforms__WEBPACK_IMPORTED_MODULE_12__);\n/*\n * Copyright 2009-2024 C3 AI (www.c3.ai). All Rights Reserved.\n * This material, including without limitation any software, is the confidential trade secret and proprietary\n * information of C3 and its licensors. Reproduction, use and/or distribution of this material in any form is\n * strictly prohibited except as set forth in a written license agreement with C3 and/or its authorized distributors.\n * This material may be covered by one or more patents or pending patent applications.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction alignDate(date, interval, timeZone) {\n  // For intervals from one to sixty minutes, we can truncate the timestamp using the minute of the hour.\n  const minuteIntervalDurations = {\n    FIVE_MINUTE: 5,\n    TEN_MINUTE: 10,\n    QUARTER_HOUR: 15,\n    HALF_HOUR: 30\n  };\n  const dateWithTz = _get__(\"getMomentDateWithTimeZone\")(timeZone, typeof date === 'string' ? date : date.toDate());\n  if (interval in minuteIntervalDurations) {\n    const intervalDurationMinutes = minuteIntervalDurations[interval];\n    const minutesSinceHour = dateWithTz.minutes();\n    const intervalsSinceHour = Math.floor(minutesSinceHour / intervalDurationMinutes);\n    dateWithTz.minute(intervalsSinceHour * intervalDurationMinutes).startOf('minute');\n  } else {\n    dateWithTz.startOf(interval === null || interval === void 0 ? void 0 : interval.toLowerCase());\n  }\n  return new (_get__(\"DateTime\"))(dateWithTz.format());\n}\n\n/**\n * Takes a date or string representing relative time and returns its ISO 8601 string representation.\n *\n * @param dateObj An object representing a date or relative date\n *\n * @returns A string representing the date in  ISO 8601 format\n */\nconst dateToString = (date, axisType, start, interval, timeZone) => {\n  let dateString;\n  // If the date is static and we have a value, use the value (string or Date)\n  if (date && axisType === 'UiSdlTimeseriesLineBarChartXAxisStaticConfig') {\n    if (date instanceof Date) {\n      dateString = new (_get__(\"DateTime\"))(date.toISOString()).toString();\n    } else {\n      dateString = new (_get__(\"DateTime\"))(date).toString();\n    }\n  } else {\n    /*\n     * If the date should not be a static value, it should be a string, use getStartDate andgetEndDate\n     * When the date is not specified, we also use this logic to provide a default.\n     */\n    if (date instanceof Date) {\n      throw new Error('Chart axis specified a date but it is not using UiSdlTimeseriesLineBarChartXAxisStaticConfig, ' + 'please use a valid value as specified in UiSdlTimeseriesLineBarChartStartDate or UiSdlTimeseriesLineBarChartEndDate');\n    }\n    if (start) {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      const startDate = _get__(\"getStartDate\")(date, timeZone);\n      const dateAligned = _get__(\"alignDate\")(startDate, interval, timeZone);\n      dateString = _get__(\"getMomentDateWithTimeZone\")(timeZone, dateAligned.toDate()).format();\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      const endDate = _get__(\"getEndDate\")(date, timeZone);\n      const dateAligned = _get__(\"alignDate\")(endDate, interval, timeZone);\n      dateString = _get__(\"getMomentDateWithTimeZone\")(timeZone, dateAligned.toDate()).format();\n    }\n  }\n  return dateString;\n};\n\n/**\n * Takes metric key and assigns values into eval metrics object\n *\n * @param {Record<string, Omit<EvalMetricsSpec, \"interval\" | \"start\" | \"end\" | \"expressions\">>} evalMetrics Eval metrics\n * @param {string} metricKey Metric key\n * @param {any} yAxisField Y Axis field of the metric\n * @param {any} typeForMetric An object containing the types for a metric\n * @param {string} evalMetricsActionName Name of the eval metric action\n * @param {string} defaultDataType Default data type\n *\n * @returns A string representing the date in  ISO 8601 format\n */\nfunction assignMetricKeyToEvalMetrics(evalMetrics, metricKey, yAxisField, typeForMetric, evalMetricsActionName, defaultDataType, options) {\n  var _yAxisField$unit$id, _yAxisField$unit, _yAxisField$bindings, _evalMetrics$evalMetr;\n  /**\n   * Bindings and units comparison.\n   * If the yAxisField has a unit, we need to check if the binding or unit is the same as the one in the evalMetrics object,\n   * if they are not the same, we need to create a new metric key with a suffix.\n   */\n  const yAxisFieldUnit = (_yAxisField$unit$id = yAxisField === null || yAxisField === void 0 || (_yAxisField$unit = yAxisField.unit) === null || _yAxisField$unit === void 0 ? void 0 : _yAxisField$unit.id) !== null && _yAxisField$unit$id !== void 0 ? _yAxisField$unit$id : null;\n  let yAxisFieldBindings = {};\n  if (yAxisField !== null && yAxisField !== void 0 && yAxisField.bindings && !(yAxisField !== null && yAxisField !== void 0 && (_yAxisField$bindings = yAxisField.bindings) !== null && _yAxisField$bindings !== void 0 && _yAxisField$bindings.type)) {\n    const keyTypePair = {\n      type: 'map<string, any>'\n    };\n    yAxisFieldBindings = {\n      ...yAxisField.bindings,\n      ...keyTypePair\n    };\n  }\n  const evalMetricsBindingsUnitKey = Object.keys(evalMetrics).find(key => {\n    var _evalMetrics$key, _evalMetrics$key2;\n    return key.startsWith(metricKey) && evalMetrics[key].unitId === yAxisFieldUnit && (_get__(\"isEqual\")((_evalMetrics$key = evalMetrics[key]) === null || _evalMetrics$key === void 0 ? void 0 : _evalMetrics$key.bindings, yAxisFieldBindings) || ((_evalMetrics$key2 = evalMetrics[key]) === null || _evalMetrics$key2 === void 0 ? void 0 : _evalMetrics$key2.bindings));\n  });\n\n  /**\n   * Statement to create a new metric key and assign it to evalMetrics if the bindings or unit are different.\n   * If both are the same, they get grouped, so it does a single evalMetrics call.\n   */\n  if (!(metricKey in evalMetrics) && !evalMetricsBindingsUnitKey) {\n    const metricKeySuffix = !evalMetricsBindingsUnitKey ? `_${_get__(\"uniq\")(Object.keys(evalMetrics)).length}` : '';\n    metricKey = `${metricKey}${metricKeySuffix}`;\n    evalMetrics[metricKey] = {\n      ids: [],\n      bindings: {\n        type: 'map<string, any>',\n        value: {}\n      },\n      options: options,\n      unitId: yAxisField.unit ? yAxisField.unit.id : null\n    };\n  }\n  const currentEvalMetrics = (_evalMetrics$evalMetr = evalMetrics[evalMetricsBindingsUnitKey]) !== null && _evalMetrics$evalMetr !== void 0 ? _evalMetrics$evalMetr : evalMetrics[metricKey];\n  currentEvalMetrics.metricName = yAxisField === null || yAxisField === void 0 ? void 0 : yAxisField.metricName;\n  if (yAxisField.entityId) {\n    currentEvalMetrics.ids.push(yAxisField.entityId);\n  }\n  _get__(\"extend\")(currentEvalMetrics.bindings, yAxisField.bindings);\n  typeForMetric[evalMetricsActionName + metricKey] = yAxisField.dataType || defaultDataType;\n}\n\n/**\n * Gets the date using moment with time zone.\n *\n * @param {string} timeZone A valid Time zone name or offset.\n * @param {string} date Date\n *\n * @returns A moment date with time zone\n */\nfunction getMomentDateWithTimeZone(timeZone = 'NONE', date) {\n  if (timeZone === 'NONE') {\n    return _get__(\"momentTZ\")(date).tz('UTC', true);\n  } else if (_get__(\"momentTZ\").tz.zone(timeZone) !== null) {\n    return _get__(\"momentTZ\")(_get__(\"momentTZ\")(date).tz(timeZone));\n  } else {\n    // If timeZone is not a valid IANA timezone, we use the UTC offset\n    return _get__(\"momentTZ\")(date).utcOffset(timeZone);\n  }\n}\nfunction getStartDate(date, timeZone = 'NONE') {\n  let startDate = _get__(\"getMomentDateWithTimeZone\")(timeZone);\n  switch (date) {\n    case 'LAST_HOUR':\n      {\n        startDate.subtract(1, 'hours');\n        break;\n      }\n    case 'LAST_DAY':\n      {\n        startDate.subtract(1, 'days');\n        break;\n      }\n    case 'LAST_WEEK':\n      {\n        startDate.subtract(1, 'weeks');\n        break;\n      }\n    case 'LAST_THREE_MONTHS':\n      {\n        startDate.subtract(3, 'months');\n        break;\n      }\n    case 'LAST_MONTH':\n      {\n        startDate.subtract(1, 'months');\n        break;\n      }\n    case 'LAST_YEAR':\n      {\n        startDate.subtract(1, 'years');\n        break;\n      }\n    case 'LAST_TWO_YEARS':\n      {\n        startDate.subtract(2, 'years');\n        break;\n      }\n    default:\n      {\n        startDate.subtract(1, 'years');\n        break;\n      }\n  }\n  return new (_get__(\"DateTime\"))(startDate.format());\n}\nfunction getEndDate(date, timeZone = 'NONE') {\n  let endDate = _get__(\"getMomentDateWithTimeZone\")(timeZone);\n  switch (date) {\n    case 'NEXT_HOUR':\n      {\n        endDate.add(1, 'hours');\n        break;\n      }\n    case 'NEXT_DAY':\n      {\n        endDate.add(1, 'days');\n        break;\n      }\n    case 'NEXT_WEEK':\n      {\n        endDate.add(1, 'weeks');\n        break;\n      }\n    case 'NEXT_MONTH':\n      {\n        endDate.add(1, 'months');\n        break;\n      }\n    case 'NEXT_THREE_MONTHS':\n      {\n        endDate.add(3, 'months');\n        break;\n      }\n    case 'NEXT_YEAR':\n      {\n        endDate.add(1, 'years');\n        break;\n      }\n    case 'NEXT_TWO_YEARS':\n      {\n        endDate.add(2, 'years');\n        break;\n      }\n    default:\n      {\n        // Do nothing, endDate is already our default date (today)\n      }\n  }\n  return new (_get__(\"DateTime\"))(endDate.format());\n}\nfunction toPartiallyAppliedActions(dataSpec, config) {\n  var _config$xAxis, _config$xAxis2, _config$xAxis3, _config$xAxis4, _config$xAxis5, _config$xAxis6, _config$xAxis7;\n  const evalMetrics = {};\n  const rollupMetrics = {};\n  const {\n    tunnelConfiguration,\n    contextVars,\n    disableContextVarsFilter\n  } = dataSpec;\n  const startDate = (_config$xAxis = config.xAxis) === null || _config$xAxis === void 0 ? void 0 : _config$xAxis.startDate;\n  const endDate = (_config$xAxis2 = config.xAxis) === null || _config$xAxis2 === void 0 ? void 0 : _config$xAxis2.endDate;\n  const interval = ((_config$xAxis3 = config.xAxis) === null || _config$xAxis3 === void 0 ? void 0 : _config$xAxis3.interval) || (((_config$xAxis4 = config.xAxis) === null || _config$xAxis4 === void 0 ? void 0 : _config$xAxis4.type) === 'UiSdlTimeseriesLineBarChartXAxisConfig' ? _get__(\"defaultXAxisProps\").interval : ((_config$xAxis5 = config.xAxis) === null || _config$xAxis5 === void 0 ? void 0 : _config$xAxis5.type) === 'UiSdlTimeseriesLineBarChartXAxisStaticConfig' ? _get__(\"defaultStaticXAxisProps\").interval : _get__(\"Interval\").DAY);\n  const noTimeZoneConversion = config.noTimeZoneConversion;\n  const timeZone = _get__(\"getTimeZone\")(noTimeZoneConversion, dataSpec.timeZone);\n  const startDateParsed = _get__(\"dateToString\")(startDate, config === null || config === void 0 || (_config$xAxis6 = config.xAxis) === null || _config$xAxis6 === void 0 ? void 0 : _config$xAxis6.type, true, interval, timeZone);\n  const endDateParsed = _get__(\"dateToString\")(endDate, config === null || config === void 0 || (_config$xAxis7 = config.xAxis) === null || _config$xAxis7 === void 0 ? void 0 : _config$xAxis7.type, false, interval, timeZone);\n  const defaultDataType = _get__(\"getDataTypeName\")(dataSpec);\n  const evalMetricsActionName = 'evalMetrics';\n  const rollupMetricsActionName = 'rollupMetrics';\n  const typeForMetric = {};\n  let filter = null;\n  filter = _get__(\"generateFilterFromContextVars\")(filter, contextVars, disableContextVarsFilter !== null && disableContextVarsFilter !== void 0 ? disableContextVarsFilter : false);\n  dataSpec && dataSpec.yAxisFields && dataSpec.yAxisFields.map(function (yAxisField) {\n    let typeName = '';\n    if (yAxisField.dataType) {\n      typeName = yAxisField.dataType;\n    } else if (dataSpec.dataType) {\n      typeName = _get__(\"getDataTypeName\")(dataSpec);\n    }\n    const metricKey = yAxisField.metricName + typeName;\n    if (yAxisField.evaluateAction === 'ROLLUP') {\n      if (!(metricKey in rollupMetrics)) {\n        rollupMetrics[metricKey] = {\n          ids: [],\n          rollupFunc: yAxisField.aggregation,\n          bindings: {\n            type: 'map<string, any>',\n            value: {}\n          },\n          filter: yAxisField.filter,\n          options: yAxisField.options\n        };\n      }\n      rollupMetrics[metricKey].metricName = yAxisField.metricName;\n      if (yAxisField.entityId) {\n        rollupMetrics[metricKey].ids.push(yAxisField.entityId);\n      }\n      if (yAxisField.unit) {\n        rollupMetrics[metricKey].unitId = yAxisField.unit.id;\n      } else {\n        rollupMetrics[metricKey].unitId = null;\n      }\n      rollupMetrics[metricKey].rollupFunc = yAxisField.aggregation;\n      Object.assign(rollupMetrics[metricKey].bindings, yAxisField.bindings);\n      typeForMetric[rollupMetricsActionName + metricKey] = yAxisField.dataType || defaultDataType;\n    } else {\n      _get__(\"assignMetricKeyToEvalMetrics\")(evalMetrics, metricKey, yAxisField, typeForMetric, evalMetricsActionName, defaultDataType, yAxisField.options);\n\n      // Check upper and lower bound\n      const {\n        upperBound,\n        lowerBound\n      } = yAxisField;\n      if (upperBound) {\n        const upperBoundMetricKey = upperBound.metricName + typeName + '_upperBound';\n        _get__(\"assignMetricKeyToEvalMetrics\")(evalMetrics, upperBoundMetricKey, upperBound, typeForMetric, evalMetricsActionName, defaultDataType, null);\n      }\n      if (lowerBound) {\n        const lowerBoundMetricKey = lowerBound.metricName + typeName + '_lowerBound';\n        _get__(\"assignMetricKeyToEvalMetrics\")(evalMetrics, lowerBoundMetricKey, lowerBound, typeForMetric, evalMetricsActionName, defaultDataType, null);\n      }\n    }\n  });\n  const partiallyAppliedActions = [];\n  const specs = [];\n  let specsTypes = [];\n  function resultKey() {\n    return {\n      type: 'Lambda',\n      language: 'JavaScript',\n      implementation: _get__(\"generateEvalMetricResultKey\").toString(),\n      appliedArgs: {},\n      environment: {}\n    };\n  }\n  Object.keys(evalMetrics).forEach(function (evalMetric, index) {\n    const metric = evalMetrics[evalMetric];\n\n    // Metrics with the same bindings, entityIds, and unit can be grouped into the same evalMetrics action\n    const similarEvalMetricActionIndex = specs.findIndex((s, i) => _get__(\"isEqual\")(s.bindings, metric.bindings) && _get__(\"isEqual\")(s.ids, metric.ids) && _get__(\"isEqual\")(s.unitId, metric.unitId) &&\n    // Check if the dataType is the same, if not, we need to create a new action\n    evalMetric.includes(specsTypes[i]));\n    if (similarEvalMetricActionIndex > -1) {\n      const evalMetricsSpec = specs[similarEvalMetricActionIndex];\n      evalMetricsSpec.expressions.push(metric.metricName);\n    } else {\n      const evalMetricsSpec = {\n        expressions: [metric.metricName],\n        start: startDateParsed,\n        end: endDateParsed,\n        unitId: metric.unitId,\n        interval: interval,\n        bindings: metric.bindings,\n        resultKey: resultKey(),\n        options: metric.options,\n        timeZone\n      };\n      if (!_get__(\"isEmpty\")(metric.ids)) {\n        metric.ids = _get__(\"uniq\")(metric.ids);\n        evalMetricsSpec.ids = metric.ids;\n      } else {\n        evalMetricsSpec.filter = filter ? filter.toString() : '1 == 1';\n      }\n      const type = typeForMetric[evalMetricsActionName + evalMetric];\n      specs.push(evalMetricsSpec);\n      specsTypes.push(type);\n      const evalMetricsAction = {\n        typeName: type,\n        actionName: evalMetricsActionName,\n        args: {\n          spec: evalMetricsSpec\n        }\n      };\n      partiallyAppliedActions.push({\n        actionId: 'evalMetrics' + index,\n        contextVars,\n        tunnelConfiguration,\n        partiallyAppliedAction: evalMetricsAction\n      });\n    }\n  });\n  Object.keys(rollupMetrics).forEach(function (rollupMetric, index) {\n    const metric = rollupMetrics[rollupMetric];\n    const rollupMetricsSpec = {\n      expressions: [metric.metricName],\n      start: startDateParsed,\n      end: endDateParsed,\n      unitId: metric.unitId,\n      interval: interval,\n      bindings: metric.bindings,\n      resultKey: resultKey(),\n      rollupFunc: metric.rollupFunc,\n      options: metric.options,\n      timeZone\n    };\n    if (metric.ids.length > 0) {\n      metric.ids = _get__(\"uniq\")(metric.ids);\n      rollupMetricsSpec.ids = metric.ids;\n    } else if (filter && metric.filter) {\n      rollupMetricsSpec.filter = filter.toString + ' && ' + metric.filter;\n    } else if (filter) {\n      rollupMetricsSpec.filter = filter.toString();\n    } else if (metric.filter) {\n      rollupMetricsSpec.filter = metric.filter;\n    } else {\n      rollupMetricsSpec.filter = '1 == 1';\n    }\n    const type = typeForMetric[rollupMetricsActionName + rollupMetric];\n    const rollupMetricsAction = {\n      typeName: type,\n      actionName: rollupMetricsActionName,\n      args: {\n        spec: rollupMetricsSpec\n      }\n    };\n    partiallyAppliedActions.push({\n      actionId: 'rollupMetrics' + index,\n      contextVars,\n      tunnelConfiguration,\n      partiallyAppliedAction: rollupMetricsAction\n    });\n  });\n  return partiallyAppliedActions;\n}\n\n\n\n\n\n\n\n\n\n\n\n\nconst defaultValues = {\n  \"dataTransforms\": [\"UiSdlTransformEvalMetricsResultToUiSdlChartData\", \"UiSdlTransformUiSdlChartDataToEChartConfig\"],\n  \"disableDataRequestOnFirstRender\": false,\n  \"dataSpecDependence\": [{\n    \"configField\": \"xAxis.interval\",\n    \"argumentSpecField\": \"interval\"\n  }, {\n    \"configField\": \"xAxis.startDate\",\n    \"argumentSpecField\": \"start\",\n    \"transformFunction\": \"getStartDate\"\n  }, {\n    \"configField\": \"xAxis.endDate\",\n    \"argumentSpecField\": \"end\",\n    \"transformFunction\": \"getEndDate\"\n  }]\n};\n\n\n\n\n\n\n\n\n\n\n\n\nfunction _getGlobalObject() {\n  try {\n    if (!!__webpack_require__.g) {\n      return __webpack_require__.g;\n    }\n  } catch (e) {\n    try {\n      if (!!window) {\n        return window;\n      }\n    } catch (e) {\n      return this;\n    }\n  }\n}\n;\nvar _RewireModuleId__ = null;\nfunction _getRewireModuleId__() {\n  if (_RewireModuleId__ === null) {\n    let globalVariable = _getGlobalObject();\n    if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {\n      globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0;\n    }\n    _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++;\n  }\n  return _RewireModuleId__;\n}\nfunction _getRewireRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__;\n}\nfunction _getRewireExportsRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__;\n}\nconst _sync_internal_state_with_exports__ = false;\nconst _exports_to_reset__ = new Map();\nfunction _record_export_to_reset__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  if (!_exports_to_reset__.has(variableName)) {\n    _exports_to_reset__.set(variableName, value);\n  }\n}\nfunction _restore_exports__() {\n  const entries = _exports_to_reset__.entries();\n  for (const [variableName, value] of entries) {\n    exports[variableName] = value;\n  }\n  _exports_to_reset__.clear();\n}\nfunction _maybe_update_export__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  _record_export_to_reset__(variableName, exports[variableName]);\n  exports[variableName] = value;\n}\nfunction _getRewiredData__() {\n  let moduleId = _getRewireModuleId__();\n  let registry = _getRewireRegistry__();\n  let rewireData = registry[moduleId];\n  if (!rewireData) {\n    registry[moduleId] = Object.create(null);\n    rewireData = registry[moduleId];\n  }\n  let exportsRegistry = _getRewireExportsRegistry__();\n  if (!exportsRegistry[moduleId]) {\n    exportsRegistry[moduleId] = _restore_exports__;\n  }\n  return rewireData;\n}\n(function registerResetAll() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable['__rewire_reset_all__']) {\n    theGlobalVariable['__rewire_reset_all__'] = function () {\n      theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n      const exportsRegistry = _getRewireExportsRegistry__();\n      for (const restoreFunc of Object.values(exportsRegistry)) {\n        restoreFunc();\n      }\n      theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n    };\n  }\n})();\nvar INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';\nlet _RewireAPI__ = {};\n(function () {\n  function addPropertyToAPIObject(name, value) {\n    Object.defineProperty(_RewireAPI__, name, {\n      value: value,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  addPropertyToAPIObject('__get__', _get__);\n  addPropertyToAPIObject('__GetDependency__', _get__);\n  addPropertyToAPIObject('__Rewire__', _set__);\n  addPropertyToAPIObject('__set__', _set__);\n  addPropertyToAPIObject('__reset__', _reset__);\n  addPropertyToAPIObject('__ResetDependency__', _reset__);\n  addPropertyToAPIObject('__with__', _with__);\n})();\nfunction _get__(variableName) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _get_original__(variableName);\n  } else {\n    var value = rewireData[variableName];\n    if (value === INTENTIONAL_UNDEFINED) {\n      return undefined;\n    } else {\n      return value;\n    }\n  }\n}\nfunction _get_original__(variableName) {\n  switch (variableName) {\n    case \"getMomentDateWithTimeZone\":\n      return getMomentDateWithTimeZone;\n    case \"DateTime\":\n      return (_c3_ui_UiSdlDateTime__WEBPACK_IMPORTED_MODULE_11___default());\n    case \"getStartDate\":\n      return getStartDate;\n    case \"alignDate\":\n      return alignDate;\n    case \"getEndDate\":\n      return getEndDate;\n    case \"isEqual\":\n      return (lodash_isEqual__WEBPACK_IMPORTED_MODULE_3___default());\n    case \"uniq\":\n      return (lodash_uniq__WEBPACK_IMPORTED_MODULE_1___default());\n    case \"extend\":\n      return (lodash_extend__WEBPACK_IMPORTED_MODULE_2___default());\n    case \"momentTZ\":\n      return (moment_timezone__WEBPACK_IMPORTED_MODULE_0___default());\n    case \"defaultXAxisProps\":\n      return _c3_ui_UiSdlTimeseriesLineBarChartXAxisConfig__WEBPACK_IMPORTED_MODULE_6__.defaultValues;\n    case \"defaultStaticXAxisProps\":\n      return _c3_ui_UiSdlTimeseriesLineBarChartXAxisStaticConfig__WEBPACK_IMPORTED_MODULE_7__.defaultValues;\n    case \"Interval\":\n      return (_c3_ui_Interval__WEBPACK_IMPORTED_MODULE_10___default());\n    case \"getTimeZone\":\n      return _c3_ui_UiSdlWithTimeZone__WEBPACK_IMPORTED_MODULE_9__.getTimeZone;\n    case \"dateToString\":\n      return dateToString;\n    case \"getDataTypeName\":\n      return _c3_ui_UiSdlComponentDataSpec__WEBPACK_IMPORTED_MODULE_5__.getDataTypeName;\n    case \"generateFilterFromContextVars\":\n      return _c3_ui_UiSdlComponentDataSpec__WEBPACK_IMPORTED_MODULE_5__.generateFilterFromContextVars;\n    case \"assignMetricKeyToEvalMetrics\":\n      return assignMetricKeyToEvalMetrics;\n    case \"generateEvalMetricResultKey\":\n      return _c3_ui_UiSdlTransformEvalMetricsResultToUiSdlChartData__WEBPACK_IMPORTED_MODULE_8__.generateEvalMetricResultKey;\n    case \"isEmpty\":\n      return (lodash_isEmpty__WEBPACK_IMPORTED_MODULE_4___default());\n  }\n  return undefined;\n}\nfunction _assign__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _set_original__(variableName, value);\n  } else {\n    _maybe_update_export__(variableName, value);\n    return rewireData[variableName] = value;\n  }\n}\nfunction _set_original__(variableName, _value) {\n  switch (variableName) {}\n  return undefined;\n}\nfunction _update_operation__(operation, variableName, prefix) {\n  var oldValue = _get__(variableName);\n  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;\n  _assign__(variableName, newValue);\n  return prefix ? newValue : oldValue;\n}\nfunction _set__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (typeof variableName === 'object') {\n    Object.keys(variableName).forEach(function (name) {\n      rewireData[name] = variableName[name];\n    });\n    return function () {\n      Object.keys(variableName).forEach(function (name) {\n        _reset__(variableName);\n      });\n    };\n  } else {\n    _maybe_update_export__(variableName, value);\n    if (value === undefined) {\n      rewireData[variableName] = INTENTIONAL_UNDEFINED;\n    } else {\n      rewireData[variableName] = value;\n    }\n    return function () {\n      _reset__(variableName);\n    };\n  }\n}\nfunction _reset__(variableName) {\n  let rewireData = _getRewiredData__();\n  delete rewireData[variableName];\n  if (Object.keys(rewireData).length == 0) {\n    delete _getRewireRegistry__()[_getRewireModuleId__];\n  }\n  if (_exports_to_reset__.has(variableName)) {\n    exports[variableName] = _exports_to_reset__.get(variableName);\n    _exports_to_reset__.delete(variableName);\n  }\n}\nfunction _with__(object) {\n  let rewireData = _getRewiredData__();\n  var rewiredVariableNames = Object.keys(object);\n  var previousValues = {};\n  function reset() {\n    rewiredVariableNames.forEach(function (variableName) {\n      rewireData[variableName] = previousValues[variableName];\n    });\n  }\n  return function (callback) {\n    rewiredVariableNames.forEach(function (variableName) {\n      previousValues[variableName] = rewireData[variableName];\n      rewireData[variableName] = object[variableName];\n    });\n    let result = callback();\n    if (!!result && typeof result.then == 'function') {\n      result.then(reset).catch(reset);\n    } else {\n      reset();\n    }\n    return result;\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_RewireAPI__);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@c3/ui/UiSdlTimeseriesLineBarChartDataSpec.ts_uiComponentLibrary\n");

/***/ })

}]);