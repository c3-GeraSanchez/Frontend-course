"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkjs_webpack_c3_client_node"] = self["webpackChunkjs_webpack_c3_client_node"] || []).push([["node_modules_c3_ui_UiSdlSearchable_ts_uiComponentLibrary"],{

/***/ "./node_modules/@c3/ui/UiSdlSearchable.ts_uiComponentLibrary":
/*!************************************************!*\
  !*** ./node_modules/@c3/ui/UiSdlSearchable.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __GetDependency__: () => (/* binding */ _get__),\n/* harmony export */   __ResetDependency__: () => (/* binding */ _reset__),\n/* harmony export */   __RewireAPI__: () => (/* binding */ _RewireAPI__),\n/* harmony export */   __Rewire__: () => (/* binding */ _set__),\n/* harmony export */   __get__: () => (/* binding */ _get__),\n/* harmony export */   __set__: () => (/* binding */ _set__),\n/* harmony export */   actionCreators: () => (/* binding */ actionCreators),\n/* harmony export */   changeSearchAction: () => (/* binding */ changeSearchAction),\n/* harmony export */   changeSearchQueryAction: () => (/* binding */ changeSearchQueryAction),\n/* harmony export */   dataSourceFieldMapSetEffect: () => (/* binding */ dataSourceFieldMapSetEffect),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaultValues: () => (/* binding */ defaultValues),\n/* harmony export */   epics: () => (/* binding */ epics),\n/* harmony export */   generateCombinedFilter: () => (/* binding */ generateCombinedFilter),\n/* harmony export */   generateSearchArguments: () => (/* binding */ generateSearchArguments),\n/* harmony export */   generateSearchFilter: () => (/* binding */ generateSearchFilter),\n/* harmony export */   loadDataSourceTypesAction: () => (/* binding */ loadDataSourceTypesAction),\n/* harmony export */   loadSearchDataSourceAction: () => (/* binding */ loadSearchDataSourceAction),\n/* harmony export */   reducers: () => (/* binding */ reducers),\n/* harmony export */   searchChangeEffect: () => (/* binding */ searchChangeEffect),\n/* harmony export */   searchDataSourceLoadEpic: () => (/* binding */ searchDataSourceLoadEpic),\n/* harmony export */   searchLoadingSetReducer: () => (/* binding */ searchLoadingSetReducer),\n/* harmony export */   searchQueryChangeEpic: () => (/* binding */ searchQueryChangeEpic),\n/* harmony export */   searchValueSetEffect: () => (/* binding */ searchValueSetEffect),\n/* harmony export */   selectSearchResultAction: () => (/* binding */ selectSearchResultAction),\n/* harmony export */   setDataSourceFieldMapAction: () => (/* binding */ setDataSourceFieldMapAction),\n/* harmony export */   setSearchLoadingAction: () => (/* binding */ setSearchLoadingAction),\n/* harmony export */   setSearchValueAction: () => (/* binding */ setSearchValueAction),\n/* harmony export */   sourceFiltersMapUpdateEffect: () => (/* binding */ sourceFiltersMapUpdateEffect),\n/* harmony export */   unformatNumberParamKindFormatQueryString: () => (/* binding */ unformatNumberParamKindFormatQueryString),\n/* harmony export */   updateSourceFiltersMapAction: () => (/* binding */ updateSourceFiltersMapAction)\n/* harmony export */ });\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js_uiComponentLibrary\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ \"webpack/sharing/consume/default/rxjs/operators_uiComponentLibrary\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ \"webpack/sharing/consume/default/rxjs_uiComponentLibrary\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(rxjs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @c3/ui/UiSdlDataRedux */ \"webpack/container/remote/@c3/ui/UiSdlDataRedux_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @c3/ui/UiSdlConnected */ \"webpack/sharing/consume/default/@c3/ui/UiSdlConnected_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _c3_ui_UiSdlFilter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @c3/ui/UiSdlFilter */ \"webpack/container/remote/@c3/ui/UiSdlFilter_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlFilter__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlFilter__WEBPACK_IMPORTED_MODULE_5__);\n/*\n * Copyright 2009-2023 C3 AI (www.c3.ai). All Rights Reserved.\n * This material, including without limitation any software, is the confidential trade secret and proprietary\n * information of C3 and its licensors. Reproduction, use and/or distribution of this material in any form is\n * strictly prohibited except as set forth in a written license agreement with C3 and/or its authorized distributors.\n * This material may be covered by one or more patents or pending patent applications.\n */\n\n\n\n\n\n\n\nfunction setSearchValueAction(id, value) {\n  return {\n    type: id + '.SEARCH_VALUE_SET',\n    payload: {\n      value: value,\n      componentId: id\n    }\n  };\n}\nfunction loadSearchDataSourceAction(id) {\n  return {\n    type: id + '.SEARCH_DATA_SOURCE_LOAD',\n    payload: id\n  };\n}\nfunction setDataSourceFieldMapAction(id, searchDataSourceId, fieldMap) {\n  return {\n    type: id + '.DATA_SOURCE_FIELD_MAP_SET',\n    payload: {\n      componentId: id,\n      searchDataSourceId: searchDataSourceId,\n      fieldMap: fieldMap\n    }\n  };\n}\nfunction loadDataSourceTypesAction(id, searchDataSourceId) {\n  return {\n    type: id + '.DATA_SOURCE_TYPES_LOAD',\n    payload: {\n      componentId: id,\n      searchDataSourceId: searchDataSourceId\n    }\n  };\n}\nfunction changeSearchAction(id, value, idValue) {\n  return {\n    type: id + '.SEARCH_CHANGE',\n    payload: {\n      value: value,\n      idValue: idValue,\n      componentId: id\n    }\n  };\n}\nfunction setSearchLoadingAction(id, loading) {\n  return {\n    type: id + '.SEARCH_LOADING_SET',\n    payload: {\n      loading,\n      componentId: id\n    }\n  };\n}\nfunction changeSearchQueryAction(id, query, searchProps) {\n  return {\n    type: id + '.SEARCH_QUERY_CHANGE',\n    payload: {\n      searchDataSourceId: searchProps.searchDataSourceId,\n      componentId: id,\n      caseSensitive: searchProps.caseSensitive,\n      dataSource: searchProps.searchDataSource,\n      field: searchProps.field,\n      filterComparator: searchProps.filterComparator,\n      generateFilter: searchProps.generateFilter,\n      queryString: query,\n      searchFields: searchProps.searchFields\n    }\n  };\n}\nfunction selectSearchResultAction(id, selection) {\n  return {\n    type: id + '.SEARCH_RESULT_SELECT',\n    payload: selection\n  };\n}\nfunction updateSourceFiltersMapAction(id, sourceComponentId, filterString) {\n  return {\n    type: id + '.SOURCE_FILTERS_MAP_UPDATE',\n    payload: {\n      componentId: id,\n      sourceComponentId: sourceComponentId,\n      value: filterString\n    }\n  };\n}\n\n/**\n * Parse a localized number to a float.\n * @param {string} stringNumber - the localized number\n * @param {string} locale - [optional] the locale that the number is represented in. Omit this parameter to use the current locale.\n * @returns {number}\n * https://stackoverflow.com/questions/29255843/is-there-a-way-to-reverse-the-formatting-by-intl-numberformat-in-javascript\n */\nfunction parseLocaleNumber(stringNumber, locale) {\n  var thousandSeparator = Intl.NumberFormat(locale).format(11111).replace(/\\p{Number}/gu, '');\n  var decimalSeparator = Intl.NumberFormat(locale).format(1.1).replace(/\\p{Number}/gu, '');\n  return parseFloat(stringNumber.replace(new RegExp('\\\\' + thousandSeparator, 'g'), '').replace(new RegExp('\\\\' + decimalSeparator), '.'));\n}\nfunction unformatNumberParamKindFormatQueryString(queryString, format) {\n  if (!(format && format.spec)) return queryString;\n\n  // If anything fails, we should fall back to the original query string.\n  try {\n    const formatSpecType = format.spec.style;\n\n    // Reformat the query string to undo notation changes\n    const formatNotation = format.spec.notation;\n    // TODO: Improve transformed notation searches https://c3energy.atlassian.net/browse/PLAT-64665\n    switch (formatNotation) {\n      case 'standard':\n        // Do nothing\n        break;\n      case 'scientific':\n        queryString = Number(queryString).toString();\n        break;\n      case 'engineering':\n        queryString = Number(queryString).toString();\n        break;\n      case 'compact':\n        // Replace all commas with empty strings and replace the dot with a decimal point\n        queryString = queryString.replace(/,/g, '').replace(/\\./, '.');\n        // Parse the string as a float and return the result\n        queryString = parseFloat(queryString).toString();\n        break;\n      default:\n        // Do nothing\n        break;\n    }\n    switch (formatSpecType) {\n      case 'decimal':\n        // Replace any commas\n        return queryString.replace(/,/g, '');\n      case 'currency':\n        const currencyLocale = format.spec.currency;\n        // Keep the commas and periods\n        const unLocalizedNumber = _get__(\"parseLocaleNumber\")(queryString.replace(/[^\\d,.]/g, ''), currencyLocale);\n        if (unLocalizedNumber) return unLocalizedNumber.toString();\n        break;\n      case 'percent':\n        // Clean up the query string first\n        const rawPercent = parseFloat(queryString.replace(/,|%|\\s/g, '')) * 100 / 10000.0;\n        if (rawPercent) return rawPercent.toString();\n        break;\n      case 'unit':\n        // Remove commas, periods, and unit to clean up the query\n        return queryString.replace(/[^\\d]/g, '').toString();\n    }\n    return queryString;\n  } catch (e) {\n    return null;\n  }\n}\nfunction generateSearchFilter(payload, dataSourceFieldMaps, searchableFormattedColumnFields = []) {\n  const fieldValueTypesMap = dataSourceFieldMaps;\n  const filterArray = [];\n  let searchFields;\n  if (_get__(\"isEmpty\")(payload.queryString)) {\n    return {\n      filter: payload.queryString\n    };\n  }\n  if (_get__(\"isEmpty\")(payload.searchFields)) {\n    searchFields = payload.field ? [payload.field] : [];\n  } else {\n    searchFields = payload.searchFields;\n  }\n  let needsStringification = false;\n  let currentValueType = null;\n  let queryFieldName = '';\n  _get__(\"each\")(searchFields, function (field) {\n    var _transformedQueryStri;\n    queryFieldName = field;\n    currentValueType = fieldValueTypesMap && fieldValueTypesMap[field];\n    /*\n     * Explicitly tell the server to cast the field to a string before doing any 'contains' or 'lowercase' operations.\n     * When the type of the current field is undefined, stringify it to avoid generating invalid filter string\n     */\n    needsStringification = _get__(\"isUndefined\")(currentValueType) ? true : !(currentValueType.toString() === 'string');\n    if (needsStringification) {\n      queryFieldName = 'string(' + field + ')';\n    }\n    let queryString = payload.queryString;\n    let transformedQueryString;\n\n    /**\n     * If `queryString` is a valid number, we should clean the string, and append it to the combinedFilter.\n     * \"100,000,000.12\" => \"100000000.12\"\n     */\n    const isValidNumber = /^\\d{1,3}(,\\d{0,3})*(\\.\\d+)?$/.test(queryString);\n    if (isValidNumber) {\n      queryString = queryString.replace(',', '');\n    }\n\n    /**\n     * Find the format spec of a specified column field if it exists.\n     */\n    const formattedField = searchableFormattedColumnFields.find(column => column.fieldName === field);\n    if (formattedField) {\n      transformedQueryString = _get__(\"unformatNumberParamKindFormatQueryString\")(queryString, formattedField.format);\n    }\n\n    // If the transformed query string exists and it's not the same as the original query string\n    if ((_transformedQueryStri = transformedQueryString) !== null && _transformedQueryStri !== void 0 && _transformedQueryStri.length && transformedQueryString !== queryString) {\n      // Append the transformed query string component for the current field\n      if (payload.caseSensitive) {\n        filterArray.push(new (_get__(\"Filter\"))()[payload.filterComparator](queryFieldName, transformedQueryString));\n      } else {\n        var _transformedQueryStri2;\n        filterArray.push(new (_get__(\"Filter\"))()[payload.filterComparator]('lowerCase(' + queryFieldName + ')', (_transformedQueryStri2 = transformedQueryString) === null || _transformedQueryStri2 === void 0 ? void 0 : _transformedQueryStri2.toLowerCase()));\n      }\n    }\n\n    // Finish building the query string component for the current field\n    if (payload.caseSensitive) {\n      filterArray.push(new (_get__(\"Filter\"))()[payload.filterComparator](queryFieldName, queryString));\n    } else {\n      var _queryString;\n      filterArray.push(new (_get__(\"Filter\"))()[payload.filterComparator]('lowerCase(' + queryFieldName + ')', (_queryString = queryString) === null || _queryString === void 0 ? void 0 : _queryString.toLowerCase()));\n    }\n  });\n  return {\n    filter: _get__(\"compact\")(filterArray).join(' || ')\n  };\n}\nfunction generateCombinedFilter(componentId, state, sourceComponentId, filterString) {\n  // Get all the keys under `activeFilters` for the component.\n  let currentMappings = _get__(\"getConfigFromState\")(componentId, state, 'activeFilters');\n  /*\n   * If any mappings exist, combine the filter string with the current filter string, but don't use the\n   * value from the state for the current source component, since that value is stale, and the updated\n   * value has been passed as an argument to this function (`sourceComponentId` and `filterString`).\n   */\n  if (currentMappings && currentMappings.toJS()) {\n    currentMappings = _get__(\"omit\")(currentMappings.toJS(), sourceComponentId);\n    // CurrentMappings will be empty if has been filtered against but cleaned up\n    if (_get__(\"isEmpty\")(currentMappings)) return filterString;\n    const filters = filterString ? ['( ' + filterString + ' )'] : [];\n    _get__(\"each\")(Object.values(currentMappings), function (f) {\n      f && filters.push('( ' + f + ' )');\n    });\n    return filters.join(' && ');\n  }\n  // If currentMappings is empty, then just return `filterString` as is.\n  return filterString;\n}\nfunction generateSearchArguments(payload, dataSourceFieldMaps, replaceArgument, searchableFormattedColumnFields = []) {\n  const argumentObject = {};\n  if (payload.generateFilter) {\n    argumentObject[replaceArgument] = _get__(\"generateSearchFilter\")(payload, dataSourceFieldMaps, searchableFormattedColumnFields);\n  } else {\n    argumentObject[replaceArgument] = payload.queryString;\n  }\n  return argumentObject;\n}\nfunction searchValueSetEffect(state, action) {\n  const {\n    value,\n    componentId\n  } = action.payload;\n  const newState = _get__(\"setConfigInState\")(componentId, state, ['idValue'], value);\n  return _get__(\"setConfigInState\")(componentId, newState, ['value'], value);\n}\nfunction dataSourceFieldMapSetEffect(state, action) {\n  const dataSourceFieldMaps = {};\n  const componentId = action.payload.componentId;\n  const searchDataSourceId = action.payload.searchDataSourceId;\n  if (searchDataSourceId) {\n    dataSourceFieldMaps[searchDataSourceId] = action.payload.fieldMap;\n  }\n  return _get__(\"setConfigInState\")(componentId, state, ['dataSourceFieldMaps'], dataSourceFieldMaps);\n}\nfunction searchChangeEffect(state, action) {\n  const payload = action.payload;\n  if (typeof payload.value === 'undefined') {\n    return state;\n  }\n  let newState = _get__(\"setConfigInState\")(action.payload.componentId, state, ['value'], payload.value, true);\n  newState = _get__(\"setConfigInState\")(action.payload.componentId, newState, ['idValue'], payload.idValue, true);\n  return _get__(\"setConfigInState\")(action.payload.componentId, newState, ['state'], payload.state, true);\n}\nfunction searchLoadingSetReducer(state, action) {\n  const {\n    payload: {\n      componentId,\n      loading\n    }\n  } = action;\n  return _get__(\"setConfigInState\")(componentId, state, ['isLoading'], loading);\n}\nconst searchDataSourceLoadEpic = (actionStream, _stateStream) => {\n  return actionStream.pipe(_get__(\"flatMap\")(function (action) {\n    const datasourceId = action.payload.searchDataSourceId;\n    return _get__(\"of\")(_get__(\"requestDataAction\")({\n      id: datasourceId\n    }));\n  }));\n};\nconst searchQueryChangeEpic = (actionStream, stateStream) => {\n  return actionStream.pipe(_get__(\"flatMap\")(function (action) {\n    const datasourceId = action.payload.searchDataSourceId;\n    const componentId = action.payload.componentId;\n    let dataSourceFieldMaps = _get__(\"getConfigFromState\")(componentId, stateStream.value, ['dataSourceFieldMaps']);\n    const replaceArgument = 'spec';\n    dataSourceFieldMaps = dataSourceFieldMaps && dataSourceFieldMaps.toJS() || {};\n    let searchArgument = _get__(\"generateSearchArguments\")(action.payload, dataSourceFieldMaps[datasourceId], replaceArgument);\n    const searchFilter = searchArgument && searchArgument.spec ? searchArgument.spec.filter : '';\n    let combinedFilter = searchFilter;\n    /*\n     * Update the filter string if applicable to include filters from other components that pass their filter\n     * to this component, by checking the component's state at the field `activeFilters`.\n     */\n    if (action.payload.generateFilter) {\n      combinedFilter = _get__(\"generateCombinedFilter\")(componentId, stateStream.value, componentId, combinedFilter);\n      searchArgument[replaceArgument]['filter'] = combinedFilter;\n    }\n    const queryString = action.payload.queryString;\n\n    /**\n     * 1. Merge the arguments of the data source.\n     * 2. Trigger a data request on the data source with the new arguments.\n     * 3. Update the value in `activeFilters` corresponding to the key of the current source component which\n     *    triggered the new filter.\n     */\n    return _get__(\"of\")(_get__(\"changeSearchAction\")(componentId, queryString, queryString), _get__(\"setSearchLoadingAction\")(componentId, true), _get__(\"mergeArgumentsAction\")(datasourceId, searchArgument, componentId), _get__(\"requestDataAction\")(datasourceId), _get__(\"updateSourceFiltersMapAction\")(componentId, componentId, combinedFilter));\n  }));\n};\nfunction sourceFiltersMapUpdateEffect(state, action) {\n  return action.payload.sourceComponentId ? _get__(\"setConfigInState\")(action.payload.componentId, state, ['activeFilters', action.payload.sourceComponentId], action.payload.value) : state;\n}\nconst epics = {\n  SEARCH_QUERY_CHANGE: _get__(\"searchQueryChangeEpic\"),\n  SEARCH_DATA_SOURCE_LOAD: _get__(\"searchDataSourceLoadEpic\")\n};\nconst reducers = {\n  SEARCH_VALUE_SET: _get__(\"searchValueSetEffect\"),\n  SEARCH_CHANGE: _get__(\"searchChangeEffect\"),\n  SEARCH_LOADING_SET: _get__(\"searchLoadingSetReducer\"),\n  DATA_SOURCE_FIELD_MAP_SET: _get__(\"dataSourceFieldMapSetEffect\"),\n  SOURCE_FILTERS_MAP_UPDATE: _get__(\"sourceFiltersMapUpdateEffect\")\n};\nconst actionCreators = {\n  setSearchValueAction: _get__(\"setSearchValueAction\"),\n  loadSearchDataSourceAction: _get__(\"loadSearchDataSourceAction\"),\n  setDataSourceFieldMapAction: _get__(\"setDataSourceFieldMapAction\"),\n  loadDataSourceTypesAction: _get__(\"loadDataSourceTypesAction\"),\n  changeSearchAction: _get__(\"changeSearchAction\"),\n  setSearchLoadingAction: _get__(\"setSearchLoadingAction\"),\n  selectSearchResultAction: _get__(\"selectSearchResultAction\"),\n  changeSearchQueryAction: _get__(\"changeSearchQueryAction\"),\n  updateSourceFiltersMapAction: _get__(\"updateSourceFiltersMapAction\")\n};\nconst defaultValues = {\n  \"caseSensitive\": false,\n  \"filterComparator\": \"contains\",\n  \"isLoading\": false,\n  \"replaceArgument\": \"spec\"\n};\nfunction _getGlobalObject() {\n  try {\n    if (!!__webpack_require__.g) {\n      return __webpack_require__.g;\n    }\n  } catch (e) {\n    try {\n      if (!!window) {\n        return window;\n      }\n    } catch (e) {\n      return this;\n    }\n  }\n}\n;\nvar _RewireModuleId__ = null;\nfunction _getRewireModuleId__() {\n  if (_RewireModuleId__ === null) {\n    let globalVariable = _getGlobalObject();\n    if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {\n      globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0;\n    }\n    _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++;\n  }\n  return _RewireModuleId__;\n}\nfunction _getRewireRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__;\n}\nfunction _getRewireExportsRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__;\n}\nconst _sync_internal_state_with_exports__ = false;\nconst _exports_to_reset__ = new Map();\nfunction _record_export_to_reset__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  if (!_exports_to_reset__.has(variableName)) {\n    _exports_to_reset__.set(variableName, value);\n  }\n}\nfunction _restore_exports__() {\n  const entries = _exports_to_reset__.entries();\n  for (const [variableName, value] of entries) {\n    exports[variableName] = value;\n  }\n  _exports_to_reset__.clear();\n}\nfunction _maybe_update_export__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  _record_export_to_reset__(variableName, exports[variableName]);\n  exports[variableName] = value;\n}\nfunction _getRewiredData__() {\n  let moduleId = _getRewireModuleId__();\n  let registry = _getRewireRegistry__();\n  let rewireData = registry[moduleId];\n  if (!rewireData) {\n    registry[moduleId] = Object.create(null);\n    rewireData = registry[moduleId];\n  }\n  let exportsRegistry = _getRewireExportsRegistry__();\n  if (!exportsRegistry[moduleId]) {\n    exportsRegistry[moduleId] = _restore_exports__;\n  }\n  return rewireData;\n}\n(function registerResetAll() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable['__rewire_reset_all__']) {\n    theGlobalVariable['__rewire_reset_all__'] = function () {\n      theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n      const exportsRegistry = _getRewireExportsRegistry__();\n      for (const restoreFunc of Object.values(exportsRegistry)) {\n        restoreFunc();\n      }\n      theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n    };\n  }\n})();\nvar INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';\nlet _RewireAPI__ = {};\n(function () {\n  function addPropertyToAPIObject(name, value) {\n    Object.defineProperty(_RewireAPI__, name, {\n      value: value,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  addPropertyToAPIObject('__get__', _get__);\n  addPropertyToAPIObject('__GetDependency__', _get__);\n  addPropertyToAPIObject('__Rewire__', _set__);\n  addPropertyToAPIObject('__set__', _set__);\n  addPropertyToAPIObject('__reset__', _reset__);\n  addPropertyToAPIObject('__ResetDependency__', _reset__);\n  addPropertyToAPIObject('__with__', _with__);\n})();\nfunction _get__(variableName) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _get_original__(variableName);\n  } else {\n    var value = rewireData[variableName];\n    if (value === INTENTIONAL_UNDEFINED) {\n      return undefined;\n    } else {\n      return value;\n    }\n  }\n}\nfunction _get_original__(variableName) {\n  switch (variableName) {\n    case \"parseLocaleNumber\":\n      return parseLocaleNumber;\n    case \"isEmpty\":\n      return lodash__WEBPACK_IMPORTED_MODULE_0__.isEmpty;\n    case \"each\":\n      return lodash__WEBPACK_IMPORTED_MODULE_0__.each;\n    case \"isUndefined\":\n      return lodash__WEBPACK_IMPORTED_MODULE_0__.isUndefined;\n    case \"unformatNumberParamKindFormatQueryString\":\n      return unformatNumberParamKindFormatQueryString;\n    case \"Filter\":\n      return (_c3_ui_UiSdlFilter__WEBPACK_IMPORTED_MODULE_5___default());\n    case \"compact\":\n      return lodash__WEBPACK_IMPORTED_MODULE_0__.compact;\n    case \"getConfigFromState\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_4__.getConfigFromState;\n    case \"omit\":\n      return lodash__WEBPACK_IMPORTED_MODULE_0__.omit;\n    case \"generateSearchFilter\":\n      return generateSearchFilter;\n    case \"setConfigInState\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_4__.setConfigInState;\n    case \"flatMap\":\n      return rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.flatMap;\n    case \"of\":\n      return rxjs__WEBPACK_IMPORTED_MODULE_2__.of;\n    case \"requestDataAction\":\n      return _c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_3__.requestDataAction;\n    case \"generateSearchArguments\":\n      return generateSearchArguments;\n    case \"generateCombinedFilter\":\n      return generateCombinedFilter;\n    case \"changeSearchAction\":\n      return changeSearchAction;\n    case \"setSearchLoadingAction\":\n      return setSearchLoadingAction;\n    case \"mergeArgumentsAction\":\n      return _c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_3__.mergeArgumentsAction;\n    case \"updateSourceFiltersMapAction\":\n      return updateSourceFiltersMapAction;\n    case \"searchQueryChangeEpic\":\n      return searchQueryChangeEpic;\n    case \"searchDataSourceLoadEpic\":\n      return searchDataSourceLoadEpic;\n    case \"searchValueSetEffect\":\n      return searchValueSetEffect;\n    case \"searchChangeEffect\":\n      return searchChangeEffect;\n    case \"searchLoadingSetReducer\":\n      return searchLoadingSetReducer;\n    case \"dataSourceFieldMapSetEffect\":\n      return dataSourceFieldMapSetEffect;\n    case \"sourceFiltersMapUpdateEffect\":\n      return sourceFiltersMapUpdateEffect;\n    case \"setSearchValueAction\":\n      return setSearchValueAction;\n    case \"loadSearchDataSourceAction\":\n      return loadSearchDataSourceAction;\n    case \"setDataSourceFieldMapAction\":\n      return setDataSourceFieldMapAction;\n    case \"loadDataSourceTypesAction\":\n      return loadDataSourceTypesAction;\n    case \"selectSearchResultAction\":\n      return selectSearchResultAction;\n    case \"changeSearchQueryAction\":\n      return changeSearchQueryAction;\n  }\n  return undefined;\n}\nfunction _assign__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _set_original__(variableName, value);\n  } else {\n    _maybe_update_export__(variableName, value);\n    return rewireData[variableName] = value;\n  }\n}\nfunction _set_original__(variableName, _value) {\n  switch (variableName) {}\n  return undefined;\n}\nfunction _update_operation__(operation, variableName, prefix) {\n  var oldValue = _get__(variableName);\n  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;\n  _assign__(variableName, newValue);\n  return prefix ? newValue : oldValue;\n}\nfunction _set__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (typeof variableName === 'object') {\n    Object.keys(variableName).forEach(function (name) {\n      rewireData[name] = variableName[name];\n    });\n    return function () {\n      Object.keys(variableName).forEach(function (name) {\n        _reset__(variableName);\n      });\n    };\n  } else {\n    _maybe_update_export__(variableName, value);\n    if (value === undefined) {\n      rewireData[variableName] = INTENTIONAL_UNDEFINED;\n    } else {\n      rewireData[variableName] = value;\n    }\n    return function () {\n      _reset__(variableName);\n    };\n  }\n}\nfunction _reset__(variableName) {\n  let rewireData = _getRewiredData__();\n  delete rewireData[variableName];\n  if (Object.keys(rewireData).length == 0) {\n    delete _getRewireRegistry__()[_getRewireModuleId__];\n  }\n  if (_exports_to_reset__.has(variableName)) {\n    exports[variableName] = _exports_to_reset__.get(variableName);\n    _exports_to_reset__.delete(variableName);\n  }\n}\nfunction _with__(object) {\n  let rewireData = _getRewiredData__();\n  var rewiredVariableNames = Object.keys(object);\n  var previousValues = {};\n  function reset() {\n    rewiredVariableNames.forEach(function (variableName) {\n      rewireData[variableName] = previousValues[variableName];\n    });\n  }\n  return function (callback) {\n    rewiredVariableNames.forEach(function (variableName) {\n      previousValues[variableName] = rewireData[variableName];\n      rewireData[variableName] = object[variableName];\n    });\n    let result = callback();\n    if (!!result && typeof result.then == 'function') {\n      result.then(reset).catch(reset);\n    } else {\n      reset();\n    }\n    return result;\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_RewireAPI__);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@c3/ui/UiSdlSearchable.ts_uiComponentLibrary\n");

/***/ })

}]);