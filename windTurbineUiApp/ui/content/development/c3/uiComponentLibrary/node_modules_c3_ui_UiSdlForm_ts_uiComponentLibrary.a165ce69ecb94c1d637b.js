"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkjs_webpack_c3_client_node"] = self["webpackChunkjs_webpack_c3_client_node"] || []).push([["node_modules_c3_ui_UiSdlForm_ts_uiComponentLibrary"],{

/***/ "./node_modules/@c3/ui/UiSdlForm.ts_uiComponentLibrary":
/*!******************************************!*\
  !*** ./node_modules/@c3/ui/UiSdlForm.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __GetDependency__: () => (/* binding */ _get__),\n/* harmony export */   __ResetDependency__: () => (/* binding */ _reset__),\n/* harmony export */   __RewireAPI__: () => (/* binding */ _RewireAPI__),\n/* harmony export */   __Rewire__: () => (/* binding */ _set__),\n/* harmony export */   __get__: () => (/* binding */ _get__),\n/* harmony export */   __set__: () => (/* binding */ _set__),\n/* harmony export */   actionButtonStateChangeEffect: () => (/* binding */ actionButtonStateChangeEffect),\n/* harmony export */   actionCreators: () => (/* binding */ actionCreators),\n/* harmony export */   beforeSubmitFormAction: () => (/* binding */ beforeSubmitFormAction),\n/* harmony export */   beforeSubmitFormEpic: () => (/* binding */ beforeSubmitFormEpic),\n/* harmony export */   cancelFormAction: () => (/* binding */ cancelFormAction),\n/* harmony export */   changeActionButtonStateAction: () => (/* binding */ changeActionButtonStateAction),\n/* harmony export */   changeDefaultConfigAction: () => (/* binding */ changeDefaultConfigAction),\n/* harmony export */   changeDefaultConfigReducer: () => (/* binding */ changeDefaultConfigReducer),\n/* harmony export */   changeFieldSetActionButtonStateAction: () => (/* binding */ changeFieldSetActionButtonStateAction),\n/* harmony export */   changeMultipleInputsAction: () => (/* binding */ changeMultipleInputsAction),\n/* harmony export */   changedInputAction: () => (/* binding */ changedInputAction),\n/* harmony export */   clearFormStatusAction: () => (/* binding */ clearFormStatusAction),\n/* harmony export */   clickFieldSetButtonAction: () => (/* binding */ clickFieldSetButtonAction),\n/* harmony export */   clickFieldSetLinkAction: () => (/* binding */ clickFieldSetLinkAction),\n/* harmony export */   configForField: () => (/* binding */ configForField),\n/* harmony export */   customSubmitFormAction: () => (/* binding */ customSubmitFormAction),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaultValues: () => (/* binding */ defaultValues),\n/* harmony export */   enableDisableInputAction: () => (/* binding */ enableDisableInputAction),\n/* harmony export */   enableDisableInputEffect: () => (/* binding */ enableDisableInputEffect),\n/* harmony export */   epics: () => (/* binding */ epics),\n/* harmony export */   externalValidateInputAction: () => (/* binding */ externalValidateInputAction),\n/* harmony export */   fieldHideEffect: () => (/* reexport safe */ _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_0__.fieldHideEffect),\n/* harmony export */   fieldHideShowEffect: () => (/* reexport safe */ _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_0__.fieldHideShowEffect),\n/* harmony export */   fieldRequireEpic: () => (/* binding */ fieldRequireEpic),\n/* harmony export */   fieldRequireReducer: () => (/* binding */ fieldRequireReducer),\n/* harmony export */   fieldSetButtonStateChangeReducer: () => (/* binding */ fieldSetButtonStateChangeReducer),\n/* harmony export */   fieldSetVisibilityUpdateEffect: () => (/* binding */ fieldSetVisibilityUpdateEffect),\n/* harmony export */   fieldShowEffect: () => (/* reexport safe */ _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_0__.fieldShowEffect),\n/* harmony export */   fieldValidityUpdateEffect: () => (/* binding */ fieldValidityUpdateEffect),\n/* harmony export */   formResetEffect: () => (/* binding */ formResetEffect),\n/* harmony export */   formStatusClearReducer: () => (/* binding */ formStatusClearReducer),\n/* harmony export */   formStatusUpdateReducer: () => (/* binding */ formStatusUpdateReducer),\n/* harmony export */   formSubmitEpic: () => (/* binding */ formSubmitEpic),\n/* harmony export */   generateFormObject: () => (/* binding */ generateFormObject),\n/* harmony export */   getFields: () => (/* binding */ getFields),\n/* harmony export */   getFormFieldValuesFromState: () => (/* reexport safe */ _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_0__.getFormFieldValuesFromState),\n/* harmony export */   getStepFromFieldName: () => (/* binding */ getStepFromFieldName),\n/* harmony export */   hideShowFieldAction: () => (/* reexport safe */ _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_0__.hideShowFieldAction),\n/* harmony export */   inputChangeAction: () => (/* reexport safe */ _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_0__.inputChangeAction),\n/* harmony export */   inputChangeEffect: () => (/* reexport safe */ _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_0__.inputChangeEffect),\n/* harmony export */   inputDisableEffect: () => (/* binding */ inputDisableEffect),\n/* harmony export */   inputEnableEffect: () => (/* binding */ inputEnableEffect),\n/* harmony export */   inputHasChangedAction: () => (/* binding */ inputHasChangedAction),\n/* harmony export */   mapFieldConfig: () => (/* binding */ mapFieldConfig),\n/* harmony export */   multipleInputsChangeEffect: () => (/* binding */ multipleInputsChangeEffect),\n/* harmony export */   multipleInputsChangeEpic: () => (/* binding */ multipleInputsChangeEpic),\n/* harmony export */   prepareFieldSetsForRendering: () => (/* reexport safe */ _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_0__.prepareFieldSetsForRendering),\n/* harmony export */   reducers: () => (/* binding */ reducers),\n/* harmony export */   registerTriggersAction: () => (/* reexport safe */ _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_17__.registerTriggersAction),\n/* harmony export */   renderInitialAction: () => (/* reexport safe */ _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_17__.renderInitialAction),\n/* harmony export */   requireFieldAction: () => (/* binding */ requireFieldAction),\n/* harmony export */   resetFormAction: () => (/* binding */ resetFormAction),\n/* harmony export */   stepIndexUpdateEffect: () => (/* binding */ stepIndexUpdateEffect),\n/* harmony export */   storeChildComponentIdsAction: () => (/* reexport safe */ _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_0__.storeChildComponentIdsAction),\n/* harmony export */   submitFormAction: () => (/* binding */ submitFormAction),\n/* harmony export */   triggerInputAction: () => (/* reexport safe */ _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_0__.triggerInputAction),\n/* harmony export */   triggersRegisterEffect: () => (/* reexport safe */ _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_17__.triggersRegisterEffect),\n/* harmony export */   updateFieldSetVisibilityAction: () => (/* binding */ updateFieldSetVisibilityAction),\n/* harmony export */   updateFieldValidityAction: () => (/* binding */ updateFieldValidityAction),\n/* harmony export */   updateFormStatusAction: () => (/* binding */ updateFormStatusAction),\n/* harmony export */   updateStepIndexAction: () => (/* binding */ updateStepIndexAction),\n/* harmony export */   validateAndSubmitAction: () => (/* binding */ validateAndSubmitAction),\n/* harmony export */   validateAndSubmitEpic: () => (/* binding */ validateAndSubmitEpic),\n/* harmony export */   validateInputAction: () => (/* binding */ validateInputAction),\n/* harmony export */   validateInputEpic: () => (/* binding */ validateInputEpic)\n/* harmony export */ });\n/* harmony import */ var _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @c3/ui/UiSdlFormBase */ \"webpack/container/remote/@c3/ui/UiSdlFormBase_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @c3/ui/UiSdlConnected */ \"webpack/sharing/consume/default/@c3/ui/UiSdlConnected_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_find__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/find */ \"webpack/sharing/consume/default/lodash/find/lodash/find_uiComponentLibrary\");\n/* harmony import */ var lodash_find__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_find__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/each */ \"webpack/sharing/consume/default/lodash/each/lodash/each_uiComponentLibrary\");\n/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_each__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/camelCase */ \"webpack/sharing/consume/default/lodash/camelCase/lodash/camelCase_uiComponentLibrary\");\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_camelCase__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var lodash_isDate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/isDate */ \"webpack/sharing/consume/default/lodash/isDate/lodash/isDate_uiComponentLibrary\");\n/* harmony import */ var lodash_isDate__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_isDate__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/isEmpty */ \"webpack/sharing/consume/default/lodash/isEmpty/lodash/isEmpty_uiComponentLibrary\");\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var lodash_flatten__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash/flatten */ \"webpack/sharing/consume/default/lodash/flatten/lodash/flatten_uiComponentLibrary\");\n/* harmony import */ var lodash_flatten__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(lodash_flatten__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ \"webpack/sharing/consume/default/rxjs/operators_uiComponentLibrary\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @c3/ui/UiSdlDataRedux */ \"webpack/container/remote/@c3/ui/UiSdlDataRedux_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs */ \"webpack/sharing/consume/default/rxjs_uiComponentLibrary\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(rxjs__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var lodash_map__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash/map */ \"webpack/sharing/consume/default/lodash/map/lodash/map_uiComponentLibrary\");\n/* harmony import */ var lodash_map__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(lodash_map__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash/get */ \"webpack/sharing/consume/default/lodash/get/lodash/get_uiComponentLibrary\");\n/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(lodash_get__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var lodash_isBoolean__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! lodash/isBoolean */ \"webpack/sharing/consume/default/lodash/isBoolean/lodash/isBoolean_uiComponentLibrary\");\n/* harmony import */ var lodash_isBoolean__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(lodash_isBoolean__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var lodash_isNumber__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lodash/isNumber */ \"webpack/sharing/consume/default/lodash/isNumber/lodash/isNumber_uiComponentLibrary\");\n/* harmony import */ var lodash_isNumber__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(lodash_isNumber__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! lodash/isUndefined */ \"webpack/sharing/consume/default/lodash/isUndefined/lodash/isUndefined_uiComponentLibrary\");\n/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(lodash_isUndefined__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! lodash/cloneDeep */ \"webpack/sharing/consume/default/lodash/cloneDeep/lodash/cloneDeep_uiComponentLibrary\");\n/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @c3/ui/UiSdlComponent */ \"webpack/sharing/consume/default/@c3/ui/UiSdlComponent_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_17__);\n/*\n * Copyright 2009-2023 C3 AI (www.c3.ai). All Rights Reserved.\n * This material, including without limitation any software, is the confidential trade secret and proprietary\n * information of C3 and its licensors. Reproduction, use and/or distribution of this material in any form is\n * strictly prohibited except as set forth in a written license agreement with C3 and/or its authorized distributors.\n * This material may be covered by one or more patents or pending patent applications.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Checks if the given field is a `UiSdlFormFieldSet`.\n * @param field The field to check.\n * @returns `true` if the field is a `UiSdlFormFieldSet`, `false` otherwise.\n */\nfunction isFormFieldSet(field) {\n  return 'fields' in field;\n}\n\n/**\n * Checks if the given field is a `UiSdlFieldGroup`.\n * @param field The field to check.\n * @returns `true` if the field is a `UiSdlFieldGroup`, `false` otherwise.\n */\nfunction isFormFieldFieldGroup(field) {\n  if (!(field !== null && field !== void 0 && field.inputElement)) return false;\n  return 'fieldGroupFields' in field.inputElement;\n}\n\n/**\n * Checks if the given field set is a {@link UiSdlMultiStepFormFieldSet}\n * @param fieldSet The field set to check\n * @returns `true` if the field is a {@link UiSdlMultiStepFormFieldSet}, `false` otherwise.\n */\nfunction isMultiStepFormFieldSet(fieldSet) {\n  return 'fieldSets' in fieldSet;\n}\n\n/**\n * Helper function to get a flattened array of all the available fields.\n * This makes searching the fieldset much simpler.\n * @param fieldSet\n *                    The fieldset to flatten.  This will flatten fields at each level.\n * @param type\n *                    The type of field set the field is. It could be a UiSdlFormFieldSet and UiSdlFieldGroup\n * @returns A single dimensional array of field config objects\n */\nfunction flattenFieldConfig(fieldSet, type = 'UiSdlFormFieldSet') {\n  let fields = [];\n  const fieldTypeToName = {\n    UiSdlFormFieldSet: 'fields',\n    UiSdlFieldGroup: 'fieldGroupFields'\n  };\n  const fieldType = fieldTypeToName[type];\n  _get__(\"each\")(fieldSet[fieldType], field => {\n    if (_get__(\"isFormFieldSet\")(field)) {\n      fields = fields.concat(_get__(\"flattenFieldConfig\")(field));\n    } else if (_get__(\"isFormFieldFieldGroup\")(field)) {\n      fields = fields.concat(_get__(\"flattenFieldConfig\")(field.inputElement, 'UiSdlFieldGroup'));\n    } else {\n      fields.push(field);\n    }\n  });\n  return fields;\n}\nfunction getFieldsFromFieldSets(fieldSets) {\n  return _get__(\"flatten\")(_get__(\"map\")(fieldSets, 'fields'));\n}\nfunction getFieldsFromMultiStepFieldSets(fieldSets) {\n  // `fieldSets` is an array of object of array\n  const flattenedFieldSets = _get__(\"flatten\")(_get__(\"map\")(_get__(\"flatten\")(fieldSets), 'fieldSets'));\n  return _get__(\"getFieldsFromFieldSets\")(flattenedFieldSets);\n}\n\n/**\n * Helper function to determine whether or not a field is valid solely based on its\n * required attribute.\n *\n * @param fieldConfig The configuration of the field to validate.\n * @param fieldValue The value of the field to validate.\n *\n * @return `true` if the field is required and not empty, `false` if the field is required and empty, and\n * `undefined` if either the field is not required or `fieldConfig` is `undefined`.\n */\nfunction isRequiredFieldValid(fieldConfig, fieldValue) {\n  if (fieldConfig && fieldConfig.required) {\n    /**\n     * We need lodash/isDate because lodash/isEmpty always returns true for date objects:\n     * https://github.com/jashkenas/underscore/issues/445\n     */\n    return !_get__(\"isEmpty\")(fieldValue) || _get__(\"isNumber\")(fieldValue) || _get__(\"isBoolean\")(fieldValue) || _get__(\"isDate\")(fieldValue);\n  }\n}\n\n/**\n * Gets the {@link UiSdlInputComponent} input element for the given field setting.\n *\n * @param {UiSdlFieldSetFormFieldSetting} fieldSetting\n * The field setting configuration.\n * @return {UiSdlComponentInput} An input element configuration.\n */\nfunction getInputElementForFieldSetting(fieldSetting) {\n  return fieldSetting.inputElement;\n}\n\n// TODO: UI-7894 This shouldn't be needed anymore, data merging is done by doDataMerge\nfunction mapDataForFieldSetting(fieldSetting, dataSourceKey) {\n  const data = {};\n  if (fieldSetting && fieldSetting.dataSpec) {\n    // Set the value to be the dataDestinationField for UiSdlFormFieldDataSpecSetting\n    data[dataSourceKey] = fieldSetting.fieldCollection;\n  }\n  return data;\n}\nfunction enableDisableInputAction(id, field, disable) {\n  const actionType = disable ? 'DISABLE' : 'ENABLE';\n  return {\n    type: id + '.INPUT_' + actionType,\n    payload: {\n      field: field,\n      componentId: id\n    }\n  };\n}\n\n/**\n * Returns array of all fields in the field configs\n * @param fieldConfigs - javascript array of field sets. Should not be UiSdlImmutableJS array\n * @param ignoreHidden - whether to include hidden fieldset fields in the result\n */\nfunction getFields(fieldConfigs, ignoreHidden = false) {\n  let fields = [];\n  _get__(\"each\")(_get__(\"flatten\")(fieldConfigs), fieldConfig => {\n    // Ignore hidden fields\n    if (!(fieldConfig.hidden && ignoreHidden)) {\n      if (fieldConfig.fields && typeof fieldConfig.fields !== 'function') {\n        fields = fields.concat(_get__(\"getFields\")(fieldConfig.fields, ignoreHidden));\n        // @ts-expect-error TODO: UI-8930 Investigate whether childFields is used for forms. Update typescript types as necessary.\n      } else if (fieldConfig.childFields) {\n        // @ts-expect-error TODO: UI-8930 Investigate whether childFields is used for forms. Update typescript types as necessary.\n        fields = fields.concat(_get__(\"getFields\")(fieldConfig.childFields, ignoreHidden));\n      } else {\n        fields.push(fieldConfig);\n      }\n    }\n  });\n  return fields;\n}\n\n/**\n * Finds the configuration for the given field name from the given set of field configurations.\n *\n * @param fieldName The name of the field for which to find the configuration.\n * @param fieldSets Array of field sets to search for the configuration.\n *          Should not be an Immutable JS object.\n * @return The config for the given `fieldName`.\n */\nfunction configForField(fieldName, fieldSets) {\n  // Flatten all the fields arrays from all fieldSets, whether single-step or multi-step\n  const fieldConfigs = _get__(\"isMultiStepFormFieldSet\")(fieldSets[0]) ? _get__(\"getFieldsFromMultiStepFieldSets\")(fieldSets) : _get__(\"getFieldsFromFieldSets\")(fieldSets);\n  let fieldConfig;\n  while (fieldConfigs.length > 0) {\n    var _fieldConfig$inputEle;\n    fieldConfig = fieldConfigs.pop();\n    if (fieldConfig.fieldName === fieldName) {\n      return fieldConfig;\n    }\n    if (((_fieldConfig$inputEle = fieldConfig.inputElement) === null || _fieldConfig$inputEle === void 0 ? void 0 : _fieldConfig$inputEle.type) === 'UiSdlFieldGroup') {\n      for (let i = 0; i < ((_fieldConfig$inputEle2 = fieldConfig.inputElement.fieldGroupFields) === null || _fieldConfig$inputEle2 === void 0 ? void 0 : _fieldConfig$inputEle2.length); i++) {\n        var _fieldConfig$inputEle2;\n        const field = fieldConfig.inputElement.fieldGroupFields[i];\n        if (field.fieldName === fieldName) {\n          return field;\n        }\n      }\n    }\n    if (_get__(\"isFormFieldSet\")(fieldConfig)) {\n      [].push.apply(fieldConfigs, fieldConfig.fields);\n    }\n    // @ts-expect-error TODO: UI-8930 Investigate whether childFields is used for forms. Update typescript types as necessary.\n    if (fieldConfig.childFields) {\n      // @ts-expect-error TODO: UI-8930 Investigate whether childFields is used for forms. Update typescript types as necessary.\n      [].push.apply(fieldConfigs, fieldConfig.childFields);\n    }\n  }\n  return undefined;\n}\nfunction enableDisableInputEffect(state, fieldName, disable, componentId) {\n  var _get__2;\n  const fieldSetConfigsState = (_get__2 = _get__(\"getConfigFromState\")(componentId, state, ['dataSpec', 'fieldSets', 'value'])) === null || _get__2 === void 0 ? void 0 : _get__2.toJS();\n  const field = _get__(\"configForField\")(fieldName, fieldSetConfigsState);\n  if (field && !field.required) {\n    field.disabled = disable;\n    return _get__(\"setConfigInState\")(componentId, state, ['dataSpec', 'fieldSets', 'value'], fieldSetConfigsState);\n  }\n  return state;\n}\nfunction inputEnableEffect(state, action) {\n  var _action$payload, _action$payload2;\n  const field = (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.field;\n  const componentId = (_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.componentId;\n  return _get__(\"enableDisableInputEffect\")(state, field, false, componentId);\n}\nfunction inputDisableEffect(state, action) {\n  var _action$payload3, _action$payload4;\n  const field = (_action$payload3 = action.payload) === null || _action$payload3 === void 0 ? void 0 : _action$payload3.field;\n  const componentId = (_action$payload4 = action.payload) === null || _action$payload4 === void 0 ? void 0 : _action$payload4.componentId;\n  return _get__(\"enableDisableInputEffect\")(state, field, true, componentId);\n}\nfunction resetFormAction(id) {\n  return {\n    type: id + '.FORM_RESET',\n    payload: {\n      componentId: id\n    }\n  };\n}\nfunction formResetEffect(state, action) {\n  var _action$payload5, _originalConfig;\n  const componentId = (_action$payload5 = action.payload) === null || _action$payload5 === void 0 ? void 0 : _action$payload5.componentId;\n  // Reset to the original state if anything was pre-set\n  let originalConfig = _get__(\"cloneDeep\")(_get__(\"getConfigFromState\")(componentId, state, ['defaultConfig']));\n  let defaultConfig = true;\n  if (!originalConfig) {\n    defaultConfig = false;\n    originalConfig = _get__(\"getInitialConfigFromState\")(componentId, state, []);\n  }\n  state = _get__(\"setConfigInState\")(componentId, state, [], originalConfig);\n  if (defaultConfig) {\n    // Ensure that defaultConfig gets reset\n    state = _get__(\"setConfigInState\")(componentId, state, ['defaultConfig'], originalConfig);\n  }\n\n  // Also clear values for all dynamically rendered children\n  const fieldValues = (_originalConfig = originalConfig) === null || _originalConfig === void 0 || (_originalConfig = _originalConfig.toJSON()) === null || _originalConfig === void 0 ? void 0 : _originalConfig.formFieldValues;\n  if (fieldValues) {\n    const childIds = _get__(\"getConfigFromState\")(componentId, state, ['childIds']);\n    childIds === null || childIds === void 0 || childIds.forEach(id => {\n      let value = undefined;\n      const childField = Object.keys(fieldValues).find(field => id.split('-')[2] === _get__(\"camelCase\")(field));\n      if (childField) {\n        value = fieldValues[childField];\n      }\n      state = _get__(\"setConfigInState\")(id, state, ['value'], value);\n      state = _get__(\"setConfigInState\")(id, state, ['invalid'], false);\n    });\n  }\n  return state;\n}\nfunction externalValidateInputAction(id, field, value) {\n  return {\n    type: id + '.INPUT_EXTERNAL_VALIDITY',\n    payload: {\n      field: field,\n      value: value,\n      componentId: id\n    }\n  };\n}\nfunction submitFormAction(id) {\n  return {\n    type: id + '.FORM_SUBMIT',\n    payload: {\n      componentId: id\n    }\n  };\n}\nfunction inputHasChangedAction(id, _event, data, inputHasChanged) {\n  return {\n    type: id + '.INPUT_CHANGE',\n    payload: {\n      ...data,\n      inputHasChanged: inputHasChanged\n    }\n  };\n}\nfunction changeMultipleInputsAction(id, data) {\n  return {\n    type: id + '.MULTIPLE_INPUTS_CHANGE',\n    payload: {\n      changes: data,\n      componentId: id\n    }\n  };\n}\nfunction changeDefaultConfigAction(id, data) {\n  return {\n    type: id + '.DEFAULT_CONFIG_CHANGE',\n    payload: {\n      config: data,\n      componentId: id\n    }\n  };\n}\nfunction changeDefaultConfigReducer(state, action) {\n  var _get__3;\n  const config = action.payload.config;\n  const componentId = action.payload.componentId;\n  if (_get__(\"isEmpty\")(config)) {\n    return state;\n  }\n  let newState = state;\n  config.forEach(inputChange => {\n    const payload = {\n      payload: {\n        componentId,\n        ...inputChange\n      }\n    };\n    newState = _get__(\"inputChangeEffect\")(newState, payload);\n  });\n  const componentDefault = (_get__3 = _get__(\"cloneDeep\")(_get__(\"getConfigFromState\")(componentId, newState, []))) === null || _get__3 === void 0 ? void 0 : _get__3.toJS();\n  if (componentDefault !== null && componentDefault !== void 0 && componentDefault.defaultConfig) {\n    delete componentDefault.defaultConfig;\n  }\n  newState = _get__(\"setConfigInState\")(componentId, state, ['defaultConfig'], componentDefault);\n  return newState;\n}\nfunction multipleInputsChangeEffect(state, action) {\n  const changes = action.payload.changes;\n  const componentId = action.payload.componentId;\n  if (_get__(\"isEmpty\")(changes)) {\n    return state;\n  }\n  let newState = state;\n  changes.forEach(inputChange => {\n    const payload = {\n      payload: {\n        componentId,\n        ...inputChange\n      }\n    };\n    newState = _get__(\"inputChangeEffect\")(newState, payload);\n  });\n  return newState;\n}\nconst multipleInputsChangeEpic = (actionStream, _stateStream) => actionStream.pipe(_get__(\"mergeMap\")(action => {\n  const componentId = action.payload.componentId;\n  const changed = action.payload.changes;\n  const inputChangeActions = [];\n  _get__(\"each\")(changed, change => {\n    inputChangeActions.push(_get__(\"of\")(_get__(\"inputHasChangedAction\")(componentId, null, change, true)));\n  });\n  return _get__(\"from\")(inputChangeActions).pipe(_get__(\"concatAll\")());\n}));\nfunction generateFormObject(state, formDataSourceId, componentId) {\n  var _get__4;\n  const formMap = _get__(\"UiSdlFormBase_getFormFieldValuesFromState\")(componentId, state);\n  const fieldSets = (_get__4 = _get__(\"getConfigFromState\")(componentId, state, ['dataSpec', 'fieldSets', 'value'])) === null || _get__4 === void 0 ? void 0 : _get__4.toJS();\n  if (formDataSourceId) {\n    const originalData = _get__(\"getDataFromState\")(formDataSourceId, state, true);\n    if (originalData && originalData.id) {\n      formMap.id = originalData.id;\n    }\n  }\n\n  // Get data from nested components\n  _get__(\"each\")(_get__(\"flatten\")(fieldSets), function (fieldSetConfig) {\n    const fields = _get__(\"flattenFieldConfig\")(fieldSetConfig);\n    _get__(\"each\")(fields, function (fieldConfig) {\n      if (fieldConfig.componentRef) {\n        const refComponentId = fieldConfig.componentRef.id;\n        const dataSourceId = _get__(\"getCollectionDataSourceId\")('dataSpec', refComponentId);\n        let dataSourceValue = _get__(\"getDataFromState\")(dataSourceId, state);\n        if (dataSourceValue && dataSourceValue.objs) {\n          // If the value is wrapped in a FetchSpec, the`objs` value will be used to construct the formObject.\n          dataSourceValue = dataSourceValue.objs;\n        }\n\n        /*\n         * Once there is a larger use case for componentRefs that have multiple datasouces, this can be refined.\n         * For now:\n         *  Only use the high level data spec\n         *\n         * Only using the high level data spec for the use case when a UiSdlFormDataGrid is a componentRef and the\n         * cellElements in the UiSdlFormDataGrid have their own data sources we do not want to track those values\n         */\n        formMap[fieldConfig.fieldName] = dataSourceValue;\n      }\n    });\n  });\n  return formMap;\n}\nconst formSubmitEpic = (actionStream, stateStream) => actionStream.pipe(_get__(\"filter\")(action => {\n  var _action$payload6;\n  const componentId = (_action$payload6 = action.payload) === null || _action$payload6 === void 0 ? void 0 : _action$payload6.componentId;\n\n  // Continue only if there is a `submitDataSpec` defined.\n  return !!_get__(\"getConfigFromState\")(componentId, stateStream.value, ['submitDataSpec']);\n}), _get__(\"mergeMap\")(action => {\n  var _action$payload7;\n  const state = stateStream.value;\n  const componentId = (_action$payload7 = action.payload) === null || _action$payload7 === void 0 ? void 0 : _action$payload7.componentId;\n  const submitDataSourceId = _get__(\"getCollectionDataSourceId\")('submitDataSpec', componentId);\n  const submitArgument = _get__(\"getConfigFromState\")(componentId, state, ['submitDataSpec', 'submitArgument']);\n  const requestPayload = {\n    [submitArgument]: _get__(\"generateFormObject\")(state, _get__(\"getCollectionDataSourceId\")('dataSpec', componentId), componentId)\n  };\n  return _get__(\"of\")(_get__(\"mergeArgumentsAction\")(submitDataSourceId, requestPayload, componentId), _get__(\"requestDataAction\")(submitDataSourceId, null));\n}));\nfunction beforeSubmitFormAction(id) {\n  return {\n    type: id + '.BEFORE_SUBMIT_ACTION',\n    payload: {\n      componentId: id\n    }\n  };\n}\nconst beforeSubmitFormEpic = (actionStream, stateStream) => actionStream.pipe(_get__(\"mergeMap\")(action => {\n  var _action$payload8;\n  const componentId = (_action$payload8 = action.payload) === null || _action$payload8 === void 0 ? void 0 : _action$payload8.componentId;\n  const state = stateStream.value;\n  const invalid = _get__(\"getConfigFromState\")(componentId, state, ['primaryActionButtonDisabled']);\n  return !invalid ? _get__(\"of\")(_get__(\"submitFormAction\")(componentId)) : _get__(\"EMPTY\");\n}));\nfunction clickFieldSetButtonAction(id, actionSuffix) {\n  return {\n    type: `${id}.FIELD_SET_ACTION_BUTTON_CLICK_${actionSuffix}`,\n    payload: {\n      componentId: id\n    }\n  };\n}\nfunction changeFieldSetActionButtonStateAction(id, actionSuffix, disable) {\n  return {\n    type: `${id}.FIELD_SET_ACTION_BUTTON_STATE_CHANGE`,\n    payload: {\n      actionSuffix: actionSuffix,\n      componentId: id,\n      disable: disable\n    }\n  };\n}\nfunction fieldSetButtonStateChangeReducer(state, action) {\n  const suffixAction = action.payload.actionSuffix;\n  const fieldSets = _get__(\"getConfigFromState\")(action.payload.componentId, state, ['dataSpec', 'fieldSets']);\n  const newFieldSets = (fieldSets === null || fieldSets === void 0 ? void 0 : fieldSets.toJS()) || [];\n  newFieldSets.every(function (fs) {\n    var _fs$actionButton;\n    if (((_fs$actionButton = fs.actionButton) === null || _fs$actionButton === void 0 ? void 0 : _fs$actionButton.actionSuffix) === suffixAction) {\n      fs.actionButton.disabled = action.payload.disable;\n      return false;\n    }\n  });\n  return _get__(\"setConfigInState\")(action.payload.componentId, state, ['dataSpec', 'fieldSets'], newFieldSets);\n}\nfunction customSubmitFormAction(id, event) {\n  event && event.preventDefault();\n  return {\n    type: id + '.CUSTOM_FORM_SUBMIT',\n    payload: {\n      componentId: id\n    }\n  };\n}\nfunction cancelFormAction(id) {\n  return {\n    type: id + '.FORM_CANCEL',\n    payload: {\n      componentId: id\n    }\n  };\n}\nfunction validateAndSubmitAction(id, event) {\n  event && event.preventDefault();\n  return {\n    type: id + '.VALIDATE_AND_SUBMIT',\n    payload: {\n      componentId: id\n    }\n  };\n}\nfunction updateFieldValidityAction(id, field, valid) {\n  return {\n    type: id + '.FIELD_VALIDITY_UPDATE',\n    payload: {\n      field: field,\n      valid: valid,\n      componentId: id\n    }\n  };\n}\nconst validateAndSubmitEpic = (actionStream, stateStream) => actionStream.pipe(_get__(\"mergeMap\")(action => {\n  var _action$payload9, _get__5;\n  const state = stateStream.value;\n  const componentId = (_action$payload9 = action.payload) === null || _action$payload9 === void 0 ? void 0 : _action$payload9.componentId;\n  const fieldSetConfigsState = (_get__5 = _get__(\"getConfigFromState\")(componentId, state, ['dataSpec', 'fieldSets', 'value'])) === null || _get__5 === void 0 ? void 0 : _get__5.toJS();\n  // Ignore hidden fields during validation\n  const fields = _get__(\"getFields\")(fieldSetConfigsState, true);\n  let newFields = [];\n  _get__(\"each\")(fields, field => {\n    var _field$inputElement;\n    // Destruct 'UiSdlFieldGroup'\n    if (((_field$inputElement = field.inputElement) === null || _field$inputElement === void 0 ? void 0 : _field$inputElement.type) === 'UiSdlFieldGroup') {\n      var _field$inputElement2;\n      _get__(\"each\")((_field$inputElement2 = field.inputElement) === null || _field$inputElement2 === void 0 ? void 0 : _field$inputElement2.fieldGroupFields, fieldGroup => {\n        newFields = newFields.concat(fieldGroup);\n      });\n    } else {\n      newFields = newFields.concat(field);\n    }\n  });\n  const fieldValuesState = _get__(\"UiSdlFormBase_getFormFieldValuesFromState\")(componentId, state);\n  const validateFieldsObservable = newFields.map(function (field) {\n    const fieldValue = fieldValuesState === null || fieldValuesState === void 0 ? void 0 : fieldValuesState[field.fieldName];\n    const fieldConfig = _get__(\"configForField\")(field.fieldName, fieldSetConfigsState);\n    const requiredFieldValidity = _get__(\"isRequiredFieldValid\")(fieldConfig, fieldValue);\n    if (requiredFieldValidity === false) {\n      // Field is required and invalid\n      return _get__(\"of\")(_get__(\"updateFieldValidityAction\")(componentId, field.fieldName, false));\n    } else if (fieldConfig !== null && fieldConfig !== void 0 && fieldConfig.required) {\n      return _get__(\"of\")(_get__(\"updateFieldValidityAction\")(componentId, field.fieldName, requiredFieldValidity), _get__(\"externalValidateInputAction\")(componentId, field.fieldName, fieldValue));\n    }\n    return _get__(\"of\")(_get__(\"externalValidateInputAction\")(componentId, field.fieldName, fieldValue));\n  });\n  return _get__(\"concat\")(_get__(\"from\")(validateFieldsObservable).pipe(_get__(\"mergeAll\")()), _get__(\"of\")(_get__(\"beforeSubmitFormAction\")(componentId)));\n}));\nfunction validateInputAction(id, _event, data) {\n  data.componentId = id;\n  return {\n    type: id + '.INPUT_VALIDATE',\n    payload: data\n  };\n}\nconst changedInputAction = (id, fieldName, fieldValue) => {\n  return {\n    type: id + '.INPUT_CHANGED',\n    payload: {\n      componentId: id,\n      fieldName: fieldName,\n      fieldValue: fieldValue\n    }\n  };\n};\nconst requireFieldAction = (id, fieldName, required) => {\n  return {\n    type: id + '.FIELD_REQUIRE',\n    payload: {\n      componentId: id,\n      fieldName: fieldName,\n      required: required\n    }\n  };\n};\nconst fieldRequireReducer = (state, action) => {\n  var _action$payload10, _action$payload11, _action$payload12, _get__6;\n  const fieldName = (_action$payload10 = action.payload) === null || _action$payload10 === void 0 ? void 0 : _action$payload10.fieldName;\n  const componentId = (_action$payload11 = action.payload) === null || _action$payload11 === void 0 ? void 0 : _action$payload11.componentId;\n  const required = (_action$payload12 = action.payload) === null || _action$payload12 === void 0 ? void 0 : _action$payload12.required;\n  const fieldSetConfigsState = (_get__6 = _get__(\"getConfigFromState\")(componentId, state, ['dataSpec', 'fieldSets', 'value'])) === null || _get__6 === void 0 ? void 0 : _get__6.toJS();\n  const field = _get__(\"configForField\")(fieldName, fieldSetConfigsState);\n  if (field && !field.disable) {\n    field.required = required;\n    return _get__(\"setConfigInState\")(componentId, state, ['dataSpec', 'fieldSets', 'value'], fieldSetConfigsState);\n  }\n  return state;\n};\nconst fieldRequireEpic = (actionStream, stateStream) => {\n  return actionStream.pipe(_get__(\"mergeMap\")(action => {\n    var _action$payload13, _action$payload14, _get__7;\n    const state = stateStream.value;\n    const componentId = (_action$payload13 = action.payload) === null || _action$payload13 === void 0 ? void 0 : _action$payload13.componentId;\n    const fieldName = (_action$payload14 = action.payload) === null || _action$payload14 === void 0 ? void 0 : _action$payload14.fieldName;\n    const fieldSets = (_get__7 = _get__(\"getConfigFromState\")(componentId, state, ['dataSpec', 'fieldSets', 'value'])) === null || _get__7 === void 0 ? void 0 : _get__7.toJS();\n    if (!fieldSets) {\n      return _get__(\"EMPTY\");\n    }\n    const fieldConfig = _get__(\"configForField\")(fieldName, fieldSets);\n    const fieldValuesState = _get__(\"UiSdlFormBase_getFormFieldValuesFromState\")(componentId, state);\n    const fieldValue = fieldValuesState === null || fieldValuesState === void 0 ? void 0 : fieldValuesState[fieldName];\n    const disabled = fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.disabled;\n    // Do not update validity if field is disabled\n    if (!disabled) {\n      let requiredFieldValidity = _get__(\"isRequiredFieldValid\")(fieldConfig, fieldValue);\n      // Field is not required, so it should always be valid\n      requiredFieldValidity = _get__(\"isUndefined\")(requiredFieldValidity) ? true : requiredFieldValidity;\n      return _get__(\"of\")(_get__(\"updateFieldValidityAction\")(componentId, fieldName, requiredFieldValidity));\n    }\n    return _get__(\"EMPTY\");\n  }));\n};\nconst validateInputEpic = (actionStream, stateStream) => actionStream.pipe(_get__(\"mergeMap\")(action => {\n  var _action$payload15, _action$payload16, _action$payload17, _get__8;\n  const componentId = (_action$payload15 = action.payload) === null || _action$payload15 === void 0 ? void 0 : _action$payload15.componentId;\n  const fieldName = (_action$payload16 = action.payload) === null || _action$payload16 === void 0 ? void 0 : _action$payload16.field;\n  const fieldValue = (_action$payload17 = action.payload) === null || _action$payload17 === void 0 ? void 0 : _action$payload17.value;\n  const fieldSets = (_get__8 = _get__(\"getConfigFromState\")(componentId, stateStream.value, ['dataSpec', 'fieldSets', 'value'])) === null || _get__8 === void 0 ? void 0 : _get__8.toJS();\n  if (!fieldSets) {\n    return _get__(\"EMPTY\");\n  }\n  const fieldConfig = _get__(\"configForField\")(fieldName, fieldSets);\n  const requiredFieldValidity = _get__(\"isRequiredFieldValid\")(fieldConfig, fieldValue);\n  if (requiredFieldValidity === false) {\n    // Field is required and invalid\n    return _get__(\"of\")(_get__(\"updateFieldValidityAction\")(componentId, fieldName, false));\n  } else if (fieldConfig !== null && fieldConfig !== void 0 && fieldConfig.required) {\n    return _get__(\"of\")(_get__(\"updateFieldValidityAction\")(componentId, fieldName, true), _get__(\"externalValidateInputAction\")(componentId, fieldName, fieldValue), _get__(\"changedInputAction\")(componentId, fieldName, fieldValue));\n  }\n  return _get__(\"of\")(_get__(\"externalValidateInputAction\")(componentId, fieldName, fieldValue), _get__(\"changedInputAction\")(componentId, fieldName, fieldValue));\n}));\nfunction fieldValidityUpdateEffect(state, action) {\n  var _action$payload18, _action$payload19, _action$payload20, _get__9;\n  const field = (_action$payload18 = action.payload) === null || _action$payload18 === void 0 ? void 0 : _action$payload18.field;\n  const componentId = (_action$payload19 = action.payload) === null || _action$payload19 === void 0 ? void 0 : _action$payload19.componentId;\n  if (!field) {\n    return state;\n  }\n  let currentState = state;\n  const newFieldValidity = (_action$payload20 = action.payload) === null || _action$payload20 === void 0 ? void 0 : _action$payload20.valid;\n  const currentDisableSubmitState = _get__(\"getConfigFromState\")(componentId, currentState, ['primaryActionButtonDisabled']);\n  const formType = _get__(\"getConfigFromState\")(componentId, currentState, ['formType']);\n  let allFieldsValidity = _get__(\"getConfigFromState\")(componentId, currentState, ['fieldValidity']);\n  if (!allFieldsValidity || !allFieldsValidity.size) {\n    allFieldsValidity = {};\n  }\n  const children = (_get__9 = _get__(\"getConfigFromState\")(componentId, state, ['childIds'])) === null || _get__9 === void 0 ? void 0 : _get__9.toJS();\n  let child;\n  for (const dynamic in children) {\n    if (children[dynamic].split('-')[2] === _get__(\"camelCase\")(field)) {\n      child = children[dynamic];\n    }\n  }\n  currentState = _get__(\"setConfigInState\")(child, state, ['invalid'], newFieldValidity === 'null' || _get__(\"isUndefined\")(newFieldValidity) ? false : !newFieldValidity);\n\n  // C3 map doesn't implement toJSON(), so we need to do some ugliness here\n  allFieldsValidity = JSON.parse(JSON.stringify(allFieldsValidity));\n  if (formType === 'multiStep') {\n    var _get__10;\n    const fieldSets = (_get__10 = _get__(\"getConfigFromState\")(componentId, state, ['dataSpec', 'fieldSets', 'value'])) === null || _get__10 === void 0 ? void 0 : _get__10.toJS();\n    const currentStep = _get__(\"getConfigFromState\")(componentId, currentState, ['currentStepIndex']);\n    const step = _get__(\"getStepFromFieldName\")(fieldSets, field, currentStep);\n    if (allFieldsValidity[step]) {\n      allFieldsValidity[step][field] = newFieldValidity;\n    } else {\n      allFieldsValidity[step] = {};\n      allFieldsValidity[step][field] = newFieldValidity;\n    }\n  } else {\n    allFieldsValidity[field] = newFieldValidity;\n  }\n\n  /**\n   * Check if we need to update the primaryActionButtonDisabled state.\n   * We need to update if:\n   * 1) the new field is invalid AND the button state is enabled (need to disable button) or\n   * 2) the new field is valid AND all other fields are valid AND the button state is disabled (need to enable button)\n   */\n  if (newFieldValidity === false && !currentDisableSubmitState) {\n    currentState = _get__(\"setConfigInState\")(componentId, currentState, ['primaryActionButtonDisabled'], true);\n  } else if (newFieldValidity && currentDisableSubmitState) {\n    var _get__11;\n    const formMap = _get__(\"UiSdlFormBase_getFormFieldValuesFromState\")(componentId, state);\n    const fieldSets = (_get__11 = _get__(\"getConfigFromState\")(componentId, state, ['dataSpec', 'fieldSets', 'value'])) === null || _get__11 === void 0 ? void 0 : _get__11.toJS();\n    let allFieldConfigs = [];\n    _get__(\"each\")(_get__(\"flatten\")(fieldSets), fieldSet => {\n      allFieldConfigs = allFieldConfigs.concat(_get__(\"flattenFieldConfig\")(fieldSet));\n    });\n    allFieldConfigs = _get__(\"flatten\")(allFieldConfigs);\n\n    /*\n     * Need to check if all other fields are valid by checking against the allFieldsValidity c3 Map.\n     * If not present, make sure that if required, their fields are populated\n     */\n    const invalidField = _get__(\"find\")(allFieldConfigs, fieldConfig => {\n      const fieldId = fieldConfig.fieldName;\n      if (_get__(\"get\")(allFieldsValidity, fieldId) === false) {\n        return fieldId;\n      } else if (!fieldConfig.componentRef) {\n        const fieldValue = formMap === null || formMap === void 0 ? void 0 : formMap[fieldId];\n        if (_get__(\"isRequiredFieldValid\")(fieldConfig, fieldValue) === false) {\n          return fieldId;\n        }\n      }\n    });\n    if (!invalidField) {\n      currentState = _get__(\"setConfigInState\")(componentId, currentState, ['primaryActionButtonDisabled'], false);\n    }\n  }\n  return _get__(\"setConfigInState\")(componentId, currentState, ['fieldValidity'], allFieldsValidity);\n}\n\n/**\n * Helper function for fieldValidityUpdateEffect, Should only be called if the formType is MULTISTEP\n * @param fieldSetConfigsState The field sets\n * @param fieldName The name of the field we are updating the validity of\n * @param currentStep The current step of the mutistep form\n * @returns The form page where the field is from\n */\nfunction getStepFromFieldName(fieldSetConfigsState, fieldName, currentStep) {\n  let step = currentStep;\n  // For Each form page in the form\n  fieldSetConfigsState.forEach((page, pageIndex) => {\n    // For each field set in the page of the form\n    const currentPageFieldSets = page.fieldSets;\n    currentPageFieldSets.forEach(currentFieldsList => {\n      // For each field in the field set\n      const currentFields = currentFieldsList.fields;\n      currentFields.forEach(field => {\n        // If the field is found, return the form page it was found on\n        if (field.fieldName === fieldName) {\n          step = pageIndex;\n        }\n      });\n    });\n  });\n\n  // If the field cannot be found, return the current index of the multistep form\n  return step;\n}\nfunction updateStepIndexAction(id, updateToIndex) {\n  return {\n    type: id + '.STEP_INDEX_UPDATE',\n    payload: {\n      updateToIndex: updateToIndex,\n      componentId: id\n    }\n  };\n}\nfunction stepIndexUpdateEffect(state, action) {\n  var _action$payload21, _action$payload22;\n  return _get__(\"setConfigInState\")((_action$payload21 = action.payload) === null || _action$payload21 === void 0 ? void 0 : _action$payload21.componentId, state, ['currentStepIndex'], (_action$payload22 = action.payload) === null || _action$payload22 === void 0 ? void 0 : _action$payload22.updateToIndex);\n}\nfunction updateFormStatusAction(id, formStatus) {\n  return {\n    type: id + '.FORM_STATUS_UPDATE',\n    payload: {\n      componentId: id,\n      formStatus: formStatus\n    }\n  };\n}\nfunction formStatusUpdateReducer(state, action) {\n  return _get__(\"setConfigInState\")(action.payload.componentId, state, ['formStatus'], action.payload.formStatus);\n}\nfunction clearFormStatusAction(id) {\n  return {\n    type: id + '.FORM_STATUS_CLEAR',\n    payload: {\n      componentId: id\n    }\n  };\n}\nfunction formStatusClearReducer(state, action) {\n  return _get__(\"setConfigInState\")(action.payload.componentId, state, ['formStatus'], null);\n}\nfunction changeActionButtonStateAction(id, buttonType, disable, loading) {\n  return {\n    type: id + '.ACTION_BUTTON_STATE_CHANGE',\n    payload: {\n      componentId: id,\n      buttonType: buttonType,\n      loading: loading,\n      disable: disable\n    }\n  };\n}\nfunction actionButtonStateChangeEffect(state, action) {\n  var _action$payload23, _action$payload24, _action$payload25, _action$payload26;\n  const componentId = (_action$payload23 = action.payload) === null || _action$payload23 === void 0 ? void 0 : _action$payload23.componentId;\n  const buttonType = (_action$payload24 = action.payload) === null || _action$payload24 === void 0 ? void 0 : _action$payload24.buttonType;\n  const loading = (_action$payload25 = action.payload) === null || _action$payload25 === void 0 ? void 0 : _action$payload25.loading;\n  const disable = (_action$payload26 = action.payload) === null || _action$payload26 === void 0 ? void 0 : _action$payload26.disable;\n  let modifiedState = state;\n  const loadingKey = buttonType === 'PRIMARY' ? 'primaryActionButtonLoading' : 'secondaryActionButtonLoading';\n  const disableKey = buttonType === 'PRIMARY' ? 'primaryActionButtonDisabled' : 'secondaryActionButtonDisabled';\n  if (_get__(\"isBoolean\")(loading)) {\n    modifiedState = _get__(\"setConfigInState\")(componentId, modifiedState, [loadingKey], loading);\n  }\n  if (_get__(\"isBoolean\")(disable)) {\n    modifiedState = _get__(\"setConfigInState\")(componentId, modifiedState, [disableKey], disable);\n  }\n  return modifiedState;\n}\nfunction updateFieldSetVisibilityAction(id, index, hidden) {\n  return {\n    type: id + '.FORM_SECTION_VISIBILITY_UPDATE',\n    payload: {\n      index: index,\n      hidden: hidden,\n      componentId: id\n    }\n  };\n}\nfunction fieldSetVisibilityUpdateEffect(state, action) {\n  var _action$payload27, _action$payload28, _action$payload29;\n  const componentId = (_action$payload27 = action.payload) === null || _action$payload27 === void 0 ? void 0 : _action$payload27.componentId;\n  const fieldSetConfigsState = _get__(\"getConfigFromState\")(componentId, state, ['dataSpec', 'fieldSets', 'value']);\n  const index = (_action$payload28 = action.payload) === null || _action$payload28 === void 0 ? void 0 : _action$payload28.index;\n  const hidden = (_action$payload29 = action.payload) === null || _action$payload29 === void 0 ? void 0 : _action$payload29.hidden;\n  const fieldSetConfigStateOfIndex = fieldSetConfigsState.get(index);\n  if (fieldSetConfigStateOfIndex) {\n    if (hidden !== fieldSetConfigStateOfIndex.get('hidden')) {\n      const newFieldSetConfigStateOfIndex = fieldSetConfigStateOfIndex.set('hidden', hidden);\n      return _get__(\"setConfigInState\")(componentId, state, ['dataSpec', 'fieldSets', 'value'], fieldSetConfigsState.set(index, newFieldSetConfigStateOfIndex));\n    }\n  }\n  return state;\n}\nfunction clickFieldSetLinkAction(id, actionSuffix) {\n  return {\n    type: `${id}.FIELD_SET_LINK_CLICK_${actionSuffix}`,\n    payload: {\n      componentId: id\n    }\n  };\n}\n\n/**\n * Extendable helper function.  Exported explicity to be used in UiSdlFormReact.tsx and passed to\n * UiSdlFormBase#prepareFieldSetsForRendering\n */\nfunction mapFieldConfig(fieldSetting, dataConfig, componentDataSourceKey) {\n  var _fieldSetting$inputEl, _fieldSetting$inputEl2, _fieldSetting$inputEl3, _inputElement, _dataToPropsSpecs;\n  const undefinedDataProps = {\n    dataPath: undefined,\n    dataSource: undefined,\n    descriptionField: undefined,\n    displayField: undefined,\n    valueField: undefined\n  };\n\n  // If this is a componentRef, just remap fieldName to field\n  if (fieldSetting.componentRef) {\n    return Object.assign({}, fieldSetting, {\n      field: fieldSetting.fieldName\n    }, undefinedDataProps);\n  }\n  if (((_fieldSetting$inputEl = fieldSetting.inputElement) === null || _fieldSetting$inputEl === void 0 ? void 0 : _fieldSetting$inputEl.type) === 'UiSdlFieldGroup') {\n    fieldSetting = {\n      ...fieldSetting,\n      inputElement: {\n        ...fieldSetting.inputElement\n      }\n    };\n    fieldSetting.inputElement.fieldGroupFields = fieldSetting.inputElement.fieldGroupFields.map(fieldGroup => {\n      return _get__(\"mapFieldConfig\")(fieldGroup, dataConfig, componentDataSourceKey);\n    });\n\n    // TODO: UI-5854 Eliminate hardcoded type check for nested components\n  } else if (((_fieldSetting$inputEl2 = fieldSetting.inputElement) === null || _fieldSetting$inputEl2 === void 0 ? void 0 : _fieldSetting$inputEl2.type) === 'UiSdlGroupedInput') {\n    fieldSetting = {\n      ...fieldSetting,\n      inputElement: {\n        ...fieldSetting.inputElement\n      }\n    };\n    if (fieldSetting.inputElement.postfixGroupField) {\n      fieldSetting.inputElement.postfixGroupField = _get__(\"mapFieldConfig\")(fieldSetting.inputElement.postfixGroupField, dataConfig, componentDataSourceKey);\n    }\n    fieldSetting.inputElement.groupField = _get__(\"mapFieldConfig\")(fieldSetting.inputElement.groupField, dataConfig, componentDataSourceKey);\n  } else if (((_fieldSetting$inputEl3 = fieldSetting.inputElement) === null || _fieldSetting$inputEl3 === void 0 ? void 0 : _fieldSetting$inputEl3.type) === 'UiSdlRadioButtonWithInputValueGroup') {\n    fieldSetting = {\n      ...fieldSetting,\n      inputElement: {\n        ...fieldSetting.inputElement\n      }\n    };\n    fieldSetting.inputElement.radioButtons = fieldSetting.inputElement.radioButtons.map(radioButton => _get__(\"mapFieldConfig\")(radioButton, dataConfig, componentDataSourceKey));\n  }\n  const sanitizedFieldSetting = _get__(\"sanitizeFieldSetting\")(fieldSetting);\n\n  // TODO: UI-7894 This used to contain other props related to data sources, but it shouldn't anymore\n  let inputElement = {};\n  let dataToPropsSpecs = {};\n  if (fieldSetting.inputElement) {\n    // It is not required that all nested situations have an inputElement (ex: UiSdlRadioButtonWithInputValueGroup)\n    const rawInputElement = _get__(\"getInputElementForFieldSetting\")(fieldSetting);\n    inputElement = _get__(\"getInputElementForFieldSetting\")(sanitizedFieldSetting);\n    const dataSourceKey = _get__(\"getFieldSettingDataConfigId\")(fieldSetting);\n    // TODO: UI-7894 This used to contain other props related to data sources, but it shouldn't anymore\n    Object.assign(dataConfig, _get__(\"mapDataForFieldSetting\")(rawInputElement, dataSourceKey));\n    dataToPropsSpecs = _get__(\"mapDataPropsForFieldSetting\")(fieldSetting, componentDataSourceKey);\n  }\n  const fieldName = _get__(\"getFieldSettingDataConfigId\")(sanitizedFieldSetting);\n  return Object.assign({}, inputElement, {\n    component: (_inputElement = inputElement) === null || _inputElement === void 0 ? void 0 : _inputElement.type,\n    field: fieldName,\n    label: sanitizedFieldSetting.label,\n    hint: sanitizedFieldSetting.hintText,\n    required: sanitizedFieldSetting.required,\n    disabled: sanitizedFieldSetting.disabled,\n    hidden: sanitizedFieldSetting.hidden,\n    infoTooltipText: sanitizedFieldSetting.infoTooltipText,\n    dataToPropsSpecs: (_dataToPropsSpecs = dataToPropsSpecs) === null || _dataToPropsSpecs === void 0 ? void 0 : _dataToPropsSpecs.dataToPropsSpecs,\n    width: sanitizedFieldSetting.width,\n    maxWidth: sanitizedFieldSetting.maxWidth\n  });\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst epics = {\n  ..._get__(\"epics1\"),\n  ..._get__(\"epics0\"),\n  MULTIPLE_INPUTS_CHANGE: _get__(\"multipleInputsChangeEpic\"),\n  VALIDATE_AND_SUBMIT: _get__(\"validateAndSubmitEpic\"),\n  FORM_SUBMIT: _get__(\"formSubmitEpic\"),\n  INPUT_VALIDATE: _get__(\"validateInputEpic\"),\n  BEFORE_SUBMIT_ACTION: _get__(\"beforeSubmitFormEpic\"),\n  FIELD_REQUIRE: _get__(\"fieldRequireEpic\")\n};\nconst reducers = {\n  ..._get__(\"reducers1\"),\n  ..._get__(\"reducers0\"),\n  FORM_STATUS_UPDATE: _get__(\"formStatusUpdateReducer\"),\n  FORM_STATUS_CLEAR: _get__(\"formStatusClearReducer\"),\n  ACTION_BUTTON_STATE_CHANGE: _get__(\"actionButtonStateChangeEffect\"),\n  INPUT_ENABLE: _get__(\"inputEnableEffect\"),\n  INPUT_DISABLE: _get__(\"inputDisableEffect\"),\n  MULTIPLE_INPUTS_CHANGE: _get__(\"multipleInputsChangeEffect\"),\n  DEFAULT_CONFIG_CHANGE: _get__(\"changeDefaultConfigReducer\"),\n  FIELD_VALIDITY_UPDATE: _get__(\"fieldValidityUpdateEffect\"),\n  FORM_RESET: _get__(\"formResetEffect\"),\n  FIELD_REQUIRE: _get__(\"fieldRequireReducer\"),\n  STEP_INDEX_UPDATE: _get__(\"stepIndexUpdateEffect\"),\n  FIELD_SET_ACTION_BUTTON_STATE_CHANGE: _get__(\"fieldSetButtonStateChangeReducer\"),\n  FORM_SECTION_VISIBILITY_UPDATE: _get__(\"fieldSetVisibilityUpdateEffect\")\n};\nconst actionCreators = {\n  ..._get__(\"actionCreators1\"),\n  ..._get__(\"actionCreators0\"),\n  updateFormStatusAction: _get__(\"updateFormStatusAction\"),\n  clearFormStatusAction: _get__(\"clearFormStatusAction\"),\n  changeActionButtonStateAction: _get__(\"changeActionButtonStateAction\"),\n  inputHasChangedAction: _get__(\"inputHasChangedAction\"),\n  changeMultipleInputsAction: _get__(\"changeMultipleInputsAction\"),\n  changeDefaultConfigAction: _get__(\"changeDefaultConfigAction\"),\n  enableDisableInputAction: _get__(\"enableDisableInputAction\"),\n  updateFieldValidityAction: _get__(\"updateFieldValidityAction\"),\n  resetFormAction: _get__(\"resetFormAction\"),\n  externalValidateInputAction: _get__(\"externalValidateInputAction\"),\n  validateAndSubmitAction: _get__(\"validateAndSubmitAction\"),\n  submitFormAction: _get__(\"submitFormAction\"),\n  customSubmitFormAction: _get__(\"customSubmitFormAction\"),\n  cancelFormAction: _get__(\"cancelFormAction\"),\n  validateInputAction: _get__(\"validateInputAction\"),\n  changedInputAction: _get__(\"changedInputAction\"),\n  requireFieldAction: _get__(\"requireFieldAction\"),\n  beforeSubmitFormAction: _get__(\"beforeSubmitFormAction\"),\n  updateStepIndexAction: _get__(\"updateStepIndexAction\"),\n  updateFieldSetVisibilityAction: _get__(\"updateFieldSetVisibilityAction\"),\n  changeFieldSetActionButtonStateAction: _get__(\"changeFieldSetActionButtonStateAction\"),\n  clickFieldSetButtonAction: _get__(\"clickFieldSetButtonAction\"),\n  clickFieldSetLinkAction: _get__(\"clickFieldSetLinkAction\")\n};\nconst defaultValues = {\n  \"triggersRegistered\": false,\n  \"wrapWithMetadataId\": false,\n  \"formType\": \"single\",\n  \"useDefaultConfig\": true,\n  \"submitButtonText\": {\n    \"dynamicValue\": \"UiSdlForm.submitButtonText\"\n  },\n  \"cancelButtonText\": {\n    \"dynamicValue\": \"UiSdlForm.cancelButtonText\"\n  },\n  \"continueButtonText\": {\n    \"dynamicValue\": \"UiSdlForm.continueButtonText\"\n  },\n  \"backButtonText\": {\n    \"dynamicValue\": \"UiSdlForm.backButtonText\"\n  },\n  \"currentStepIndex\": 0,\n  \"debounceTime\": 300,\n  \"multiStepProgressBarOrientation\": \"HORIZONTAL\",\n  \"multiStepAnyOrder\": false\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction _getGlobalObject() {\n  try {\n    if (!!__webpack_require__.g) {\n      return __webpack_require__.g;\n    }\n  } catch (e) {\n    try {\n      if (!!window) {\n        return window;\n      }\n    } catch (e) {\n      return this;\n    }\n  }\n}\n;\nvar _RewireModuleId__ = null;\nfunction _getRewireModuleId__() {\n  if (_RewireModuleId__ === null) {\n    let globalVariable = _getGlobalObject();\n    if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {\n      globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0;\n    }\n    _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++;\n  }\n  return _RewireModuleId__;\n}\nfunction _getRewireRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__;\n}\nfunction _getRewireExportsRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__;\n}\nconst _sync_internal_state_with_exports__ = false;\nconst _exports_to_reset__ = new Map();\nfunction _record_export_to_reset__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  if (!_exports_to_reset__.has(variableName)) {\n    _exports_to_reset__.set(variableName, value);\n  }\n}\nfunction _restore_exports__() {\n  const entries = _exports_to_reset__.entries();\n  for (const [variableName, value] of entries) {\n    exports[variableName] = value;\n  }\n  _exports_to_reset__.clear();\n}\nfunction _maybe_update_export__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  _record_export_to_reset__(variableName, exports[variableName]);\n  exports[variableName] = value;\n}\nfunction _getRewiredData__() {\n  let moduleId = _getRewireModuleId__();\n  let registry = _getRewireRegistry__();\n  let rewireData = registry[moduleId];\n  if (!rewireData) {\n    registry[moduleId] = Object.create(null);\n    rewireData = registry[moduleId];\n  }\n  let exportsRegistry = _getRewireExportsRegistry__();\n  if (!exportsRegistry[moduleId]) {\n    exportsRegistry[moduleId] = _restore_exports__;\n  }\n  return rewireData;\n}\n(function registerResetAll() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable['__rewire_reset_all__']) {\n    theGlobalVariable['__rewire_reset_all__'] = function () {\n      theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n      const exportsRegistry = _getRewireExportsRegistry__();\n      for (const restoreFunc of Object.values(exportsRegistry)) {\n        restoreFunc();\n      }\n      theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n    };\n  }\n})();\nvar INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';\nlet _RewireAPI__ = {};\n(function () {\n  function addPropertyToAPIObject(name, value) {\n    Object.defineProperty(_RewireAPI__, name, {\n      value: value,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  addPropertyToAPIObject('__get__', _get__);\n  addPropertyToAPIObject('__GetDependency__', _get__);\n  addPropertyToAPIObject('__Rewire__', _set__);\n  addPropertyToAPIObject('__set__', _set__);\n  addPropertyToAPIObject('__reset__', _reset__);\n  addPropertyToAPIObject('__ResetDependency__', _reset__);\n  addPropertyToAPIObject('__with__', _with__);\n})();\nfunction _get__(variableName) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _get_original__(variableName);\n  } else {\n    var value = rewireData[variableName];\n    if (value === INTENTIONAL_UNDEFINED) {\n      return undefined;\n    } else {\n      return value;\n    }\n  }\n}\nfunction _get_original__(variableName) {\n  switch (variableName) {\n    case \"each\":\n      return (lodash_each__WEBPACK_IMPORTED_MODULE_3___default());\n    case \"isFormFieldSet\":\n      return isFormFieldSet;\n    case \"flattenFieldConfig\":\n      return flattenFieldConfig;\n    case \"isFormFieldFieldGroup\":\n      return isFormFieldFieldGroup;\n    case \"flatten\":\n      return (lodash_flatten__WEBPACK_IMPORTED_MODULE_7___default());\n    case \"map\":\n      return (lodash_map__WEBPACK_IMPORTED_MODULE_11___default());\n    case \"getFieldsFromFieldSets\":\n      return getFieldsFromFieldSets;\n    case \"isEmpty\":\n      return (lodash_isEmpty__WEBPACK_IMPORTED_MODULE_6___default());\n    case \"isNumber\":\n      return (lodash_isNumber__WEBPACK_IMPORTED_MODULE_14___default());\n    case \"isBoolean\":\n      return (lodash_isBoolean__WEBPACK_IMPORTED_MODULE_13___default());\n    case \"isDate\":\n      return (lodash_isDate__WEBPACK_IMPORTED_MODULE_5___default());\n    case \"getFields\":\n      return getFields;\n    case \"isMultiStepFormFieldSet\":\n      return isMultiStepFormFieldSet;\n    case \"getFieldsFromMultiStepFieldSets\":\n      return getFieldsFromMultiStepFieldSets;\n    case \"getConfigFromState\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_1__.getConfigFromState;\n    case \"configForField\":\n      return configForField;\n    case \"setConfigInState\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_1__.setConfigInState;\n    case \"enableDisableInputEffect\":\n      return enableDisableInputEffect;\n    case \"cloneDeep\":\n      return (lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_16___default());\n    case \"getInitialConfigFromState\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_1__.getInitialConfigFromState;\n    case \"camelCase\":\n      return (lodash_camelCase__WEBPACK_IMPORTED_MODULE_4___default());\n    case \"inputChangeEffect\":\n      return _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_0__.inputChangeEffect;\n    case \"mergeMap\":\n      return rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.mergeMap;\n    case \"of\":\n      return rxjs__WEBPACK_IMPORTED_MODULE_10__.of;\n    case \"inputHasChangedAction\":\n      return inputHasChangedAction;\n    case \"from\":\n      return rxjs__WEBPACK_IMPORTED_MODULE_10__.from;\n    case \"concatAll\":\n      return rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.concatAll;\n    case \"UiSdlFormBase_getFormFieldValuesFromState\":\n      return _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_0__.getFormFieldValuesFromState;\n    case \"getDataFromState\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_1__.getDataFromState;\n    case \"getCollectionDataSourceId\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_1__.getCollectionDataSourceId;\n    case \"filter\":\n      return rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.filter;\n    case \"generateFormObject\":\n      return generateFormObject;\n    case \"mergeArgumentsAction\":\n      return _c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_9__.mergeArgumentsAction;\n    case \"requestDataAction\":\n      return _c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_9__.requestDataAction;\n    case \"submitFormAction\":\n      return submitFormAction;\n    case \"EMPTY\":\n      return rxjs__WEBPACK_IMPORTED_MODULE_10__.EMPTY;\n    case \"isRequiredFieldValid\":\n      return isRequiredFieldValid;\n    case \"updateFieldValidityAction\":\n      return updateFieldValidityAction;\n    case \"externalValidateInputAction\":\n      return externalValidateInputAction;\n    case \"concat\":\n      return rxjs__WEBPACK_IMPORTED_MODULE_10__.concat;\n    case \"mergeAll\":\n      return rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.mergeAll;\n    case \"beforeSubmitFormAction\":\n      return beforeSubmitFormAction;\n    case \"isUndefined\":\n      return (lodash_isUndefined__WEBPACK_IMPORTED_MODULE_15___default());\n    case \"changedInputAction\":\n      return changedInputAction;\n    case \"getStepFromFieldName\":\n      return getStepFromFieldName;\n    case \"find\":\n      return (lodash_find__WEBPACK_IMPORTED_MODULE_2___default());\n    case \"get\":\n      return (lodash_get__WEBPACK_IMPORTED_MODULE_12___default());\n    case \"mapFieldConfig\":\n      return mapFieldConfig;\n    case \"sanitizeFieldSetting\":\n      return _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_0__.sanitizeFieldSetting;\n    case \"getInputElementForFieldSetting\":\n      return getInputElementForFieldSetting;\n    case \"getFieldSettingDataConfigId\":\n      return _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_0__.getFieldSettingDataConfigId;\n    case \"mapDataForFieldSetting\":\n      return mapDataForFieldSetting;\n    case \"mapDataPropsForFieldSetting\":\n      return _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_0__.mapDataPropsForFieldSetting;\n    case \"epics1\":\n      return _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_17__.epics;\n    case \"epics0\":\n      return _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_0__.epics;\n    case \"multipleInputsChangeEpic\":\n      return multipleInputsChangeEpic;\n    case \"validateAndSubmitEpic\":\n      return validateAndSubmitEpic;\n    case \"formSubmitEpic\":\n      return formSubmitEpic;\n    case \"validateInputEpic\":\n      return validateInputEpic;\n    case \"beforeSubmitFormEpic\":\n      return beforeSubmitFormEpic;\n    case \"fieldRequireEpic\":\n      return fieldRequireEpic;\n    case \"reducers1\":\n      return _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_17__.reducers;\n    case \"reducers0\":\n      return _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_0__.reducers;\n    case \"formStatusUpdateReducer\":\n      return formStatusUpdateReducer;\n    case \"formStatusClearReducer\":\n      return formStatusClearReducer;\n    case \"actionButtonStateChangeEffect\":\n      return actionButtonStateChangeEffect;\n    case \"inputEnableEffect\":\n      return inputEnableEffect;\n    case \"inputDisableEffect\":\n      return inputDisableEffect;\n    case \"multipleInputsChangeEffect\":\n      return multipleInputsChangeEffect;\n    case \"changeDefaultConfigReducer\":\n      return changeDefaultConfigReducer;\n    case \"fieldValidityUpdateEffect\":\n      return fieldValidityUpdateEffect;\n    case \"formResetEffect\":\n      return formResetEffect;\n    case \"fieldRequireReducer\":\n      return fieldRequireReducer;\n    case \"stepIndexUpdateEffect\":\n      return stepIndexUpdateEffect;\n    case \"fieldSetButtonStateChangeReducer\":\n      return fieldSetButtonStateChangeReducer;\n    case \"fieldSetVisibilityUpdateEffect\":\n      return fieldSetVisibilityUpdateEffect;\n    case \"actionCreators1\":\n      return _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_17__.actionCreators;\n    case \"actionCreators0\":\n      return _c3_ui_UiSdlFormBase__WEBPACK_IMPORTED_MODULE_0__.actionCreators;\n    case \"updateFormStatusAction\":\n      return updateFormStatusAction;\n    case \"clearFormStatusAction\":\n      return clearFormStatusAction;\n    case \"changeActionButtonStateAction\":\n      return changeActionButtonStateAction;\n    case \"changeMultipleInputsAction\":\n      return changeMultipleInputsAction;\n    case \"changeDefaultConfigAction\":\n      return changeDefaultConfigAction;\n    case \"enableDisableInputAction\":\n      return enableDisableInputAction;\n    case \"resetFormAction\":\n      return resetFormAction;\n    case \"validateAndSubmitAction\":\n      return validateAndSubmitAction;\n    case \"customSubmitFormAction\":\n      return customSubmitFormAction;\n    case \"cancelFormAction\":\n      return cancelFormAction;\n    case \"validateInputAction\":\n      return validateInputAction;\n    case \"requireFieldAction\":\n      return requireFieldAction;\n    case \"updateStepIndexAction\":\n      return updateStepIndexAction;\n    case \"updateFieldSetVisibilityAction\":\n      return updateFieldSetVisibilityAction;\n    case \"changeFieldSetActionButtonStateAction\":\n      return changeFieldSetActionButtonStateAction;\n    case \"clickFieldSetButtonAction\":\n      return clickFieldSetButtonAction;\n    case \"clickFieldSetLinkAction\":\n      return clickFieldSetLinkAction;\n  }\n  return undefined;\n}\nfunction _assign__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _set_original__(variableName, value);\n  } else {\n    _maybe_update_export__(variableName, value);\n    return rewireData[variableName] = value;\n  }\n}\nfunction _set_original__(variableName, _value) {\n  switch (variableName) {}\n  return undefined;\n}\nfunction _update_operation__(operation, variableName, prefix) {\n  var oldValue = _get__(variableName);\n  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;\n  _assign__(variableName, newValue);\n  return prefix ? newValue : oldValue;\n}\nfunction _set__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (typeof variableName === 'object') {\n    Object.keys(variableName).forEach(function (name) {\n      rewireData[name] = variableName[name];\n    });\n    return function () {\n      Object.keys(variableName).forEach(function (name) {\n        _reset__(variableName);\n      });\n    };\n  } else {\n    _maybe_update_export__(variableName, value);\n    if (value === undefined) {\n      rewireData[variableName] = INTENTIONAL_UNDEFINED;\n    } else {\n      rewireData[variableName] = value;\n    }\n    return function () {\n      _reset__(variableName);\n    };\n  }\n}\nfunction _reset__(variableName) {\n  let rewireData = _getRewiredData__();\n  delete rewireData[variableName];\n  if (Object.keys(rewireData).length == 0) {\n    delete _getRewireRegistry__()[_getRewireModuleId__];\n  }\n  if (_exports_to_reset__.has(variableName)) {\n    exports[variableName] = _exports_to_reset__.get(variableName);\n    _exports_to_reset__.delete(variableName);\n  }\n}\nfunction _with__(object) {\n  let rewireData = _getRewiredData__();\n  var rewiredVariableNames = Object.keys(object);\n  var previousValues = {};\n  function reset() {\n    rewiredVariableNames.forEach(function (variableName) {\n      rewireData[variableName] = previousValues[variableName];\n    });\n  }\n  return function (callback) {\n    rewiredVariableNames.forEach(function (variableName) {\n      previousValues[variableName] = rewireData[variableName];\n      rewireData[variableName] = object[variableName];\n    });\n    let result = callback();\n    if (!!result && typeof result.then == 'function') {\n      result.then(reset).catch(reset);\n    } else {\n      reset();\n    }\n    return result;\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_RewireAPI__);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@c3/ui/UiSdlForm.ts_uiComponentLibrary\n");

/***/ })

}]);