"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkjs_webpack_c3_client_node"] = self["webpackChunkjs_webpack_c3_client_node"] || []).push([["node_modules_c3_ui_UiSdlTransformUiSdlChartDataToUiSdlHeatMapEChartConfig_ts_uiComponentLibrary"],{

/***/ "./node_modules/@c3/ui/UiSdlTransformUiSdlChartDataToUiSdlHeatMapEChartConfig.ts_uiComponentLibrary":
/*!***************************************************************************************!*\
  !*** ./node_modules/@c3/ui/UiSdlTransformUiSdlChartDataToUiSdlHeatMapEChartConfig.ts ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __GetDependency__: () => (/* binding */ _get__),\n/* harmony export */   __ResetDependency__: () => (/* binding */ _reset__),\n/* harmony export */   __RewireAPI__: () => (/* binding */ _RewireAPI__),\n/* harmony export */   __Rewire__: () => (/* binding */ _set__),\n/* harmony export */   __get__: () => (/* binding */ _get__),\n/* harmony export */   __set__: () => (/* binding */ _set__),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaultValues: () => (/* binding */ defaultValues),\n/* harmony export */   generateDataArray: () => (/* binding */ generateDataArray),\n/* harmony export */   getWeeks: () => (/* binding */ getWeeks),\n/* harmony export */   getYears: () => (/* binding */ getYears),\n/* harmony export */   transform: () => (/* binding */ transform)\n/* harmony export */ });\n/*\n * Copyright 2009-2023 C3 AI (www.c3.ai). All Rights Reserved.\n * This material, including without limitation any software, is the confidential trade secret and proprietary\n * information of C3 and its licensors. Reproduction, use and/or distribution of this material in any form is\n * strictly prohibited except as set forth in a written license agreement with C3 and/or its authorized distributors.\n * This material may be covered by one or more patents or pending patent applications.\n */\n\nfunction getDays(startDate, endDate) {\n  const days = [];\n  while (startDate <= endDate) {\n    days.push(startDate.toISOString().slice(0, 10));\n    startDate.setDate(startDate.getDate() + 1);\n  }\n  return days;\n}\nfunction getWeeks(startDate, endDate) {\n  const weeks = [];\n  while (startDate <= endDate) {\n    weeks.push(startDate.toISOString().slice(0, 10));\n    startDate.setDate(startDate.getDate() + 7);\n  }\n  return weeks;\n}\nfunction getYears(startDate, endDate) {\n  const years = [];\n  while (startDate <= endDate) {\n    years.push(startDate.getFullYear().toString());\n    startDate.setFullYear(startDate.getFullYear() + 1);\n  }\n  return years;\n}\nfunction generateDataArray(xResult, yResult, data, interval) {\n  if (data) {\n    const series = data.series[0].values;\n    const dateLabels = data.labels;\n    const result = [];\n    let index = -1;\n    let dateTimeFormatOptions;\n    let dateTimeStringLength;\n    let incrementDate;\n    switch (interval) {\n      case 'HOUR':\n        dateTimeFormatOptions = {\n          year: 'numeric',\n          month: 'short',\n          day: 'numeric',\n          hour: 'numeric',\n          minute: 'numeric',\n          hour12: false\n        };\n        dateTimeStringLength = 13;\n        incrementDate = currYdate => {\n          currYdate.setHours(currYdate.getHours() + 1);\n        };\n        break;\n      case 'DAY':\n        dateTimeFormatOptions = {\n          year: 'numeric',\n          month: 'short',\n          day: 'numeric'\n        };\n        dateTimeStringLength = 10;\n        incrementDate = currYdate => {\n          currYdate.setDate(currYdate.getDate() + 1);\n        };\n        break;\n      case 'MONTH':\n        dateTimeFormatOptions = {\n          year: 'numeric',\n          month: 'short'\n        };\n        dateTimeStringLength = 7;\n        incrementDate = currYdate => {\n          currYdate.setMonth(currYdate.getMonth() + 1);\n        };\n        break;\n    }\n    const dateTimeFormat = Intl.DateTimeFormat(undefined, dateTimeFormatOptions).format;\n    for (let y = 0; y < yResult.length; y++) {\n      let currYdate;\n      if (interval === 'MONTH') {\n        // For MONTH interval, the format of yResult[y] is yyyy\n        currYdate = new Date(yResult[y] + '-01-01');\n      } else {\n        // For other intervals, the format of yResult[y] is yyyy-MM-dd\n        currYdate = new Date(yResult[y]);\n      }\n      for (let x = 0; x < xResult.length; x++) {\n        if (index < 0) {\n          // DateLabels is sorted, so after we find the first value, we can increment the index to find the next value.\n          const dateString = currYdate.toISOString().slice(0, dateTimeStringLength);\n          // We only compare with the dateLabels[0] because dateLabels is a subset\n          if (dateLabels[0].slice(0, dateString.length) !== dateString) {\n            index = -1;\n          } else {\n            index = 0;\n          }\n        } else {\n          index++;\n        }\n\n        // TO DO: For missing data, we want to color it grey. This currently isn't supported.\n        if (index >= series.length || index < 0) {\n          result.push({\n            value: [x, y, '-'],\n            label: 'No Data',\n            itemStyle: {\n              normal: {\n                color: '#818181'\n              }\n            }\n          });\n        } else {\n          result.push({\n            value: [x, y, series[index]],\n            label: dateTimeFormat(currYdate)\n          });\n        }\n        incrementDate(currYdate);\n      }\n    }\n    return result;\n  }\n}\nfunction transform(data) {\n  const eChartsConfig = {};\n  let parameters;\n  let paramData;\n  if (data) {\n    let xResult = [];\n    let yResult = [];\n    const labels = data.labels;\n    const startDate = new Date(labels[0]);\n    const endDate = new Date(labels[labels.length - 1]);\n    switch (data.interval) {\n      case 'HOUR':\n        yResult = _get__(\"getDays\")(startDate, endDate);\n        xResult = Array.from(Array(24).keys());\n        paramData = _get__(\"generateDataArray\")(xResult, yResult, data, 'HOUR');\n        break;\n      case 'DAY':\n        yResult = _get__(\"getWeeks\")(startDate, endDate);\n        xResult = Array.from(Array(7).keys());\n        paramData = _get__(\"generateDataArray\")(xResult, yResult, data, 'DAY');\n        break;\n      case 'MONTH':\n        yResult = _get__(\"getYears\")(startDate, endDate);\n        xResult = Array.from(Array(13).keys()).splice(1);\n        paramData = _get__(\"generateDataArray\")(xResult, yResult, data, 'MONTH');\n        break;\n    }\n    eChartsConfig.xLabels = xResult;\n    eChartsConfig.yLabels = yResult;\n  } else {\n    eChartsConfig.xLabels = [];\n    eChartsConfig.yLabels = [];\n    paramData = [{}];\n  }\n  const series = data.series[0];\n  const eChartSeriesConfig = {\n    id: series.id,\n    name: series.name,\n    data: paramData\n  };\n  eChartsConfig.series = eChartSeriesConfig;\n  eChartsConfig.missing = data.missing[0];\n  return eChartsConfig;\n}\nconst defaultValues = {};\nfunction _getGlobalObject() {\n  try {\n    if (!!__webpack_require__.g) {\n      return __webpack_require__.g;\n    }\n  } catch (e) {\n    try {\n      if (!!window) {\n        return window;\n      }\n    } catch (e) {\n      return this;\n    }\n  }\n}\n;\nvar _RewireModuleId__ = null;\nfunction _getRewireModuleId__() {\n  if (_RewireModuleId__ === null) {\n    let globalVariable = _getGlobalObject();\n    if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {\n      globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0;\n    }\n    _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++;\n  }\n  return _RewireModuleId__;\n}\nfunction _getRewireRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__;\n}\nfunction _getRewireExportsRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__;\n}\nconst _sync_internal_state_with_exports__ = false;\nconst _exports_to_reset__ = new Map();\nfunction _record_export_to_reset__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  if (!_exports_to_reset__.has(variableName)) {\n    _exports_to_reset__.set(variableName, value);\n  }\n}\nfunction _restore_exports__() {\n  const entries = _exports_to_reset__.entries();\n  for (const [variableName, value] of entries) {\n    exports[variableName] = value;\n  }\n  _exports_to_reset__.clear();\n}\nfunction _maybe_update_export__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  _record_export_to_reset__(variableName, exports[variableName]);\n  exports[variableName] = value;\n}\nfunction _getRewiredData__() {\n  let moduleId = _getRewireModuleId__();\n  let registry = _getRewireRegistry__();\n  let rewireData = registry[moduleId];\n  if (!rewireData) {\n    registry[moduleId] = Object.create(null);\n    rewireData = registry[moduleId];\n  }\n  let exportsRegistry = _getRewireExportsRegistry__();\n  if (!exportsRegistry[moduleId]) {\n    exportsRegistry[moduleId] = _restore_exports__;\n  }\n  return rewireData;\n}\n(function registerResetAll() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable['__rewire_reset_all__']) {\n    theGlobalVariable['__rewire_reset_all__'] = function () {\n      theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n      const exportsRegistry = _getRewireExportsRegistry__();\n      for (const restoreFunc of Object.values(exportsRegistry)) {\n        restoreFunc();\n      }\n      theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n    };\n  }\n})();\nvar INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';\nlet _RewireAPI__ = {};\n(function () {\n  function addPropertyToAPIObject(name, value) {\n    Object.defineProperty(_RewireAPI__, name, {\n      value: value,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  addPropertyToAPIObject('__get__', _get__);\n  addPropertyToAPIObject('__GetDependency__', _get__);\n  addPropertyToAPIObject('__Rewire__', _set__);\n  addPropertyToAPIObject('__set__', _set__);\n  addPropertyToAPIObject('__reset__', _reset__);\n  addPropertyToAPIObject('__ResetDependency__', _reset__);\n  addPropertyToAPIObject('__with__', _with__);\n})();\nfunction _get__(variableName) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _get_original__(variableName);\n  } else {\n    var value = rewireData[variableName];\n    if (value === INTENTIONAL_UNDEFINED) {\n      return undefined;\n    } else {\n      return value;\n    }\n  }\n}\nfunction _get_original__(variableName) {\n  switch (variableName) {\n    case \"getDays\":\n      return getDays;\n    case \"generateDataArray\":\n      return generateDataArray;\n    case \"getWeeks\":\n      return getWeeks;\n    case \"getYears\":\n      return getYears;\n  }\n  return undefined;\n}\nfunction _assign__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _set_original__(variableName, value);\n  } else {\n    _maybe_update_export__(variableName, value);\n    return rewireData[variableName] = value;\n  }\n}\nfunction _set_original__(variableName, _value) {\n  switch (variableName) {}\n  return undefined;\n}\nfunction _update_operation__(operation, variableName, prefix) {\n  var oldValue = _get__(variableName);\n  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;\n  _assign__(variableName, newValue);\n  return prefix ? newValue : oldValue;\n}\nfunction _set__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (typeof variableName === 'object') {\n    Object.keys(variableName).forEach(function (name) {\n      rewireData[name] = variableName[name];\n    });\n    return function () {\n      Object.keys(variableName).forEach(function (name) {\n        _reset__(variableName);\n      });\n    };\n  } else {\n    _maybe_update_export__(variableName, value);\n    if (value === undefined) {\n      rewireData[variableName] = INTENTIONAL_UNDEFINED;\n    } else {\n      rewireData[variableName] = value;\n    }\n    return function () {\n      _reset__(variableName);\n    };\n  }\n}\nfunction _reset__(variableName) {\n  let rewireData = _getRewiredData__();\n  delete rewireData[variableName];\n  if (Object.keys(rewireData).length == 0) {\n    delete _getRewireRegistry__()[_getRewireModuleId__];\n  }\n  if (_exports_to_reset__.has(variableName)) {\n    exports[variableName] = _exports_to_reset__.get(variableName);\n    _exports_to_reset__.delete(variableName);\n  }\n}\nfunction _with__(object) {\n  let rewireData = _getRewiredData__();\n  var rewiredVariableNames = Object.keys(object);\n  var previousValues = {};\n  function reset() {\n    rewiredVariableNames.forEach(function (variableName) {\n      rewireData[variableName] = previousValues[variableName];\n    });\n  }\n  return function (callback) {\n    rewiredVariableNames.forEach(function (variableName) {\n      previousValues[variableName] = rewireData[variableName];\n      rewireData[variableName] = object[variableName];\n    });\n    let result = callback();\n    if (!!result && typeof result.then == 'function') {\n      result.then(reset).catch(reset);\n    } else {\n      reset();\n    }\n    return result;\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_RewireAPI__);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@c3/ui/UiSdlTransformUiSdlChartDataToUiSdlHeatMapEChartConfig.ts_uiComponentLibrary\n");

/***/ })

}]);