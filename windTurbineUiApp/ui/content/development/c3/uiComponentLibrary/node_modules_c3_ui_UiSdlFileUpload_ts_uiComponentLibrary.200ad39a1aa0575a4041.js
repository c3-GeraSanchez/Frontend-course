"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkjs_webpack_c3_client_node"] = self["webpackChunkjs_webpack_c3_client_node"] || []).push([["node_modules_c3_ui_UiSdlFileUpload_ts_uiComponentLibrary"],{

/***/ "./node_modules/@c3/ui/UiSdlFileUpload.ts_uiComponentLibrary":
/*!************************************************!*\
  !*** ./node_modules/@c3/ui/UiSdlFileUpload.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __GetDependency__: () => (/* binding */ _get__),\n/* harmony export */   __ResetDependency__: () => (/* binding */ _reset__),\n/* harmony export */   __RewireAPI__: () => (/* binding */ _RewireAPI__),\n/* harmony export */   __Rewire__: () => (/* binding */ _set__),\n/* harmony export */   __get__: () => (/* binding */ _get__),\n/* harmony export */   __set__: () => (/* binding */ _set__),\n/* harmony export */   actionCreators: () => (/* binding */ actionCreators),\n/* harmony export */   allFilesUploadCancelEffect: () => (/* binding */ allFilesUploadCancelEffect),\n/* harmony export */   cancelAllFilesUploadAction: () => (/* binding */ cancelAllFilesUploadAction),\n/* harmony export */   cancelConfirmationModalOpenEpic: () => (/* binding */ cancelConfirmationModalOpenEpic),\n/* harmony export */   checkForDuplicateFiles: () => (/* binding */ checkForDuplicateFiles),\n/* harmony export */   checkForInvalidExtensionFiles: () => (/* binding */ checkForInvalidExtensionFiles),\n/* harmony export */   checkForInvalidSizeFiles: () => (/* binding */ checkForInvalidSizeFiles),\n/* harmony export */   constructFileRef: () => (/* binding */ constructFileRef),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaultValues: () => (/* binding */ defaultValues),\n/* harmony export */   duplicateFilesWarningModalOpenEpic: () => (/* binding */ duplicateFilesWarningModalOpenEpic),\n/* harmony export */   epics: () => (/* binding */ epics),\n/* harmony export */   fileUpdateUploadStatusEffect: () => (/* binding */ fileUpdateUploadStatusEffect),\n/* harmony export */   filesQueuedEffect: () => (/* binding */ filesQueuedEffect),\n/* harmony export */   filesRemoveEffect: () => (/* binding */ filesRemoveEffect),\n/* harmony export */   filesValidateEffect: () => (/* binding */ filesValidateEffect),\n/* harmony export */   filesValidateEpic: () => (/* binding */ filesValidateEpic),\n/* harmony export */   handleValidFiles: () => (/* binding */ handleValidFiles),\n/* harmony export */   isDuplicate: () => (/* binding */ isDuplicate),\n/* harmony export */   isValidExtension: () => (/* binding */ isValidExtension),\n/* harmony export */   isValidSize: () => (/* binding */ isValidSize),\n/* harmony export */   openCancelConfirmationModalAction: () => (/* binding */ openCancelConfirmationModalAction),\n/* harmony export */   openDuplicateFilesWarningModalAction: () => (/* binding */ openDuplicateFilesWarningModalAction),\n/* harmony export */   queuedFilesAction: () => (/* binding */ queuedFilesAction),\n/* harmony export */   reducers: () => (/* binding */ reducers),\n/* harmony export */   registerTriggersAction: () => (/* reexport safe */ _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_9__.registerTriggersAction),\n/* harmony export */   removeFilesAction: () => (/* binding */ removeFilesAction),\n/* harmony export */   renderInitialAction: () => (/* reexport safe */ _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_9__.renderInitialAction),\n/* harmony export */   triggersRegisterEffect: () => (/* reexport safe */ _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_9__.triggersRegisterEffect),\n/* harmony export */   updateFileUploadStatusAction: () => (/* binding */ updateFileUploadStatusAction),\n/* harmony export */   validateFilesAction: () => (/* binding */ validateFilesAction)\n/* harmony export */ });\n/* harmony import */ var _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @c3/ui/UiSdlConnected */ \"webpack/sharing/consume/default/@c3/ui/UiSdlConnected_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var immutable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! immutable */ \"webpack/sharing/consume/default/immutable_uiComponentLibrary\");\n/* harmony import */ var immutable__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(immutable__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isEmpty */ \"webpack/sharing/consume/default/lodash/isEmpty/lodash/isEmpty_uiComponentLibrary\");\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_filter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/filter */ \"webpack/sharing/consume/default/lodash/filter/lodash/filter_uiComponentLibrary\");\n/* harmony import */ var lodash_filter__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_filter__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_isArray__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/isArray */ \"webpack/sharing/consume/default/lodash/isArray/lodash/isArray_uiComponentLibrary\");\n/* harmony import */ var lodash_isArray__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_isArray__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ \"webpack/sharing/consume/default/rxjs/operators_uiComponentLibrary\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ \"webpack/sharing/consume/default/rxjs_uiComponentLibrary\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(rxjs__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _c3_ui_UiSdlFileUploadEventModal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @c3/ui/UiSdlFileUploadEventModal */ \"webpack/container/remote/@c3/ui/UiSdlFileUploadEventModal_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlFileUploadEventModal__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlFileUploadEventModal__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _c3_ui_UiSdlModal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @c3/ui/UiSdlModal */ \"webpack/container/remote/@c3/ui/UiSdlModal_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlModal__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlModal__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @c3/ui/UiSdlComponent */ \"webpack/sharing/consume/default/@c3/ui/UiSdlComponent_uiComponentLibrary\");\n/* harmony import */ var _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_9__);\n/*\n * Copyright 2009-2024 C3 AI (www.c3.ai). All Rights Reserved.\n * This material, including without limitation any software, is the confidential trade secret and proprietary\n * information of C3 and its licensors. Reproduction, use and/or distribution of this material in any form is\n * strictly prohibited except as set forth in a written license agreement with C3 and/or its authorized distributors.\n * This material may be covered by one or more patents or pending patent applications.\n */\n\n\n\n\n\n\n\n\n\n\nfunction updateFileUploadStatusAction(id, fileNames, status) {\n  if (!(fileNames instanceof Array)) {\n    fileNames = [fileNames];\n  }\n  return {\n    type: id + '.FILE_UPDATE_UPLOAD_STATUS',\n    payload: {\n      componentId: id,\n      fileNames: fileNames,\n      status: status\n    }\n  };\n}\nfunction fileUpdateUploadStatusEffect(state, action) {\n  const componentId = action.payload.componentId;\n  action.payload.fileNames.forEach(function (fileName) {\n    state = _get__(\"setConfigInState\")(componentId, state, ['fileStatus', fileName], action.payload.status);\n  });\n  return state;\n}\nfunction queuedFilesAction(id, fileRefs, files) {\n  const action = {\n    type: id + '.FILE_QUEUED',\n    payload: {\n      fileRefs: fileRefs,\n      componentId: id\n    }\n  };\n  if (files && files instanceof Array && files.length) {\n    action.payload.files = files;\n  }\n  return action;\n}\nfunction filesQueuedEffect(state, action) {\n  var _action$payload, _action$payload2;\n  // Get all fileRefs from redux store\n  const componentId = (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.componentId;\n  let allFileRefs = _get__(\"getConfigFromState\")(componentId, state, ['files']);\n  if (allFileRefs && _get__(\"Iterable\").isIterable(allFileRefs)) {\n    allFileRefs = allFileRefs.toJS();\n  }\n  let fileRefs = (_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.fileRefs;\n  // Concat two portions\n  if (!_get__(\"isEmpty\")(allFileRefs)) {\n    fileRefs = allFileRefs.concat(fileRefs);\n  }\n  // Set redux state\n  return _get__(\"setConfigInState\")(componentId, state, ['files'], fileRefs);\n}\nfunction removeFilesAction(id, fileNames) {\n  return {\n    type: id + '.FILES_REMOVE',\n    payload: {\n      fileNames: fileNames,\n      componentId: id\n    }\n  };\n}\nfunction filesRemoveEffect(state, action) {\n  var _action$payload3, _get__2, _get__3, _action$payload4;\n  const componentId = (_action$payload3 = action.payload) === null || _action$payload3 === void 0 ? void 0 : _action$payload3.componentId;\n  let allFileRefs = _get__(\"getConfigFromState\")(componentId, state, ['files']).toJS();\n  let invalidExtensionFiles = ((_get__2 = _get__(\"getConfigFromState\")(componentId, state, ['invalidExtensionFiles'])) === null || _get__2 === void 0 ? void 0 : _get__2.toJS()) || [];\n  let invalidSizeFiles = ((_get__3 = _get__(\"getConfigFromState\")(componentId, state, ['invalidSizeFiles'])) === null || _get__3 === void 0 ? void 0 : _get__3.toJS()) || [];\n  const allFileStatus = _get__(\"getConfigFromState\")(componentId, state, ['fileStatus']).toJS();\n  let totalFilesSize = _get__(\"getConfigFromState\")(componentId, state, ['totalFilesSize']);\n  const targetFileNames = (_action$payload4 = action.payload) === null || _action$payload4 === void 0 ? void 0 : _action$payload4.fileNames;\n  targetFileNames && targetFileNames.forEach(function (targetFileName) {\n    allFileRefs = _get__(\"filter\")(allFileRefs, function (fileRef) {\n      totalFilesSize -= fileRef.name === targetFileName ? fileRef.size : 0;\n      return targetFileName !== fileRef.name;\n    });\n    invalidExtensionFiles = _get__(\"filter\")(invalidExtensionFiles, function (fileRef) {\n      return targetFileName !== fileRef.name;\n    });\n    invalidSizeFiles = _get__(\"filter\")(invalidSizeFiles, function (fileRef) {\n      return targetFileName !== fileRef.name;\n    });\n    delete allFileStatus[targetFileName];\n  });\n  state = _get__(\"setConfigInState\")(componentId, state, ['totalFilesSize'], totalFilesSize);\n  state = _get__(\"setConfigInState\")(componentId, state, ['fileStatus'], allFileStatus);\n  state = _get__(\"setConfigInState\")(componentId, state, ['invalidSizeFiles'], invalidSizeFiles);\n  state = _get__(\"setConfigInState\")(componentId, state, ['invalidExtensionFiles'], invalidExtensionFiles);\n  return _get__(\"setConfigInState\")(componentId, state, ['files'], allFileRefs);\n}\nfunction cancelAllFilesUploadAction(id) {\n  return {\n    type: id + '.ALL_UPLOADING_FILES_CANCEL',\n    payload: {\n      componentId: id\n    }\n  };\n}\nfunction allFilesUploadCancelEffect(state, action) {\n  var _action$payload5;\n  const componentId = (_action$payload5 = action.payload) === null || _action$payload5 === void 0 ? void 0 : _action$payload5.componentId;\n  const files = _get__(\"getConfigFromState\")(componentId, state, ['files']);\n  let totalFilesSize = _get__(\"getConfigFromState\")(componentId, state, ['totalFilesSize']);\n  if (_get__(\"isEmpty\")(files)) {\n    return state;\n  }\n  const allFileRefs = files.toJS();\n  _get__(\"isArray\")(allFileRefs) && allFileRefs.forEach((file, index) => {\n    if (file.status !== 'SUCCESSFUL') {\n      totalFilesSize -= file.size;\n      allFileRefs.splice(index, 1);\n    }\n  });\n  state = _get__(\"setConfigInState\")(componentId, state, ['fileStatus'], {});\n  state = _get__(\"setConfigInState\")(componentId, state, ['totalFilesSize'], totalFilesSize);\n  state = _get__(\"setConfigInState\")(componentId, state, ['invalidSizeFiles'], []);\n  state = _get__(\"setConfigInState\")(componentId, state, ['invalidExtensionFiles'], []);\n  return _get__(\"setConfigInState\")(componentId, state, ['files'], []);\n}\nfunction validateFilesAction(id, files) {\n  return {\n    type: id + '.FILE_VALIDATE',\n    payload: {\n      files: files,\n      componentId: id\n    }\n  };\n}\nfunction constructFileRef(file) {\n  return {\n    name: file.name,\n    path: file.path,\n    type: file.type,\n    size: file.size,\n    status: file.status\n  };\n}\n\n/**\n * Check if the new file is a duplicate of any of the files in the list\n * @param newFile The new file to be checked\n * @param allFiles The list of all files to be checked against\n * @returns boolean\n */\nfunction isDuplicate(newFile, allFiles) {\n  return allFiles.some(file => newFile.name === file.name);\n}\n\n/**\n * Check if the file has a valid extension\n * @param file The file to be checked\n * @param allowedFileExtensions The list of allowed file extensions\n * @returns boolean\n */\nfunction isValidExtension(file, allowedFileExtensions) {\n  return allowedFileExtensions.some(extension => file.name.endsWith(extension));\n}\n\n/**\n * Check if the file size is within the limit\n * @param file The file to be checked\n * @param totalFilesSize An object containing the total size of all the current queued files\n * @param fileSizeLimit The maximum size of the files defined by the user\n * @returns boolean\n */\nfunction isValidSize(file, totalFilesSize, fileSizeLimit) {\n  const aggregateSize = file.size + totalFilesSize.value;\n  totalFilesSize.value += aggregateSize <= fileSizeLimit ? file.size : 0;\n  return aggregateSize <= fileSizeLimit;\n}\n\n/**\n * Check for duplicate files\n * @param file The file to be checked\n * @param componentId The componentId of the file upload component\n * @param state The current state of the redux store\n */\nfunction checkForDuplicateFiles(file, componentId, state) {\n  var _get__4;\n  const allFiles = ((_get__4 = _get__(\"getConfigFromState\")(componentId, state, ['files'])) === null || _get__4 === void 0 ? void 0 : _get__4.toJS()) || [];\n  return _get__(\"isDuplicate\")(file, allFiles);\n}\n\n/**\n * Check for invalid extension files\n * @param file The file to be checked\n * @param componentId The componentId of the file upload component\n * @param state The current state of the redux store\n */\nfunction checkForInvalidExtensionFiles(file, componentId, state) {\n  var _get__5;\n  let reject = _get__(\"getConfigFromState\")(componentId, state, ['rejectInvalidFiles']);\n  const allowedFileExtensions = ((_get__5 = _get__(\"getConfigFromState\")(componentId, state, ['allowableFileExtensions'])) === null || _get__5 === void 0 ? void 0 : _get__5.toJS()) || [];\n  const ignorePattern = /^(.+)\\/(.+)$/;\n  reject = reject && allowedFileExtensions.every(extension => !extension.match(ignorePattern));\n  return reject && !_get__(\"isValidExtension\")(file, allowedFileExtensions);\n}\n\n/**\n * Check for invalid size files\n * @param file The file to be checked\n * @param totalFilesSize An object containing the total size of all the current queued files\n * @param componentId The componentId of the file upload component\n * @param state The current state of the redux store\n */\nfunction checkForInvalidSizeFiles(file, totalFilesSize, componentId, state) {\n  const fileSizeLimit = _get__(\"getConfigFromState\")(componentId, state, ['fileSizeLimit']);\n  return !_get__(\"isValidSize\")(file, totalFilesSize, fileSizeLimit);\n}\n\n/**\n * Handle the valid files\n * @param file The file to be checked\n * @returns Array<UiSdlFileUploadFileRef>\n */\nfunction handleValidFiles(file) {\n  const validFiles = [];\n  validFiles.push(_get__(\"constructFileRef\")(file));\n  return validFiles;\n}\nfunction filesValidateEffect(state, action) {\n  var _get__6, _get__7, _get__8;\n  const componentId = action.payload.componentId;\n  const newFiles = action.payload.files;\n  const totalFilesSize = {\n    value: _get__(\"getConfigFromState\")(componentId, state, ['totalFilesSize'])\n  };\n  const duplicateFiles = ((_get__6 = _get__(\"getConfigFromState\")(componentId, state, ['duplicateFiles'])) === null || _get__6 === void 0 ? void 0 : _get__6.toJS()) || [];\n  const invalidExtensionFiles = ((_get__7 = _get__(\"getConfigFromState\")(componentId, state, ['invalidExtensionFiles'])) === null || _get__7 === void 0 ? void 0 : _get__7.toJS()) || [];\n  const invalidSizeFiles = ((_get__8 = _get__(\"getConfigFromState\")(componentId, state, ['invalidSizeFiles'])) === null || _get__8 === void 0 ? void 0 : _get__8.toJS()) || [];\n  const validFiles = [];\n  newFiles.forEach(file => {\n    if (_get__(\"checkForDuplicateFiles\")(file, componentId, state)) {\n      duplicateFiles.push(_get__(\"constructFileRef\")(file));\n      return;\n    }\n    if (_get__(\"checkForInvalidExtensionFiles\")(file, componentId, state)) {\n      invalidExtensionFiles.push(_get__(\"constructFileRef\")(file));\n      return;\n    }\n    if (_get__(\"checkForInvalidSizeFiles\")(file, totalFilesSize, componentId, state)) {\n      invalidSizeFiles.push(_get__(\"constructFileRef\")(file));\n      return;\n    }\n    validFiles.push(..._get__(\"handleValidFiles\")(file));\n  });\n  state = _get__(\"setConfigInState\")(componentId, state, ['totalFilesSize'], totalFilesSize.value);\n  state = _get__(\"setConfigInState\")(componentId, state, ['validFiles'], validFiles);\n  state = _get__(\"setConfigInState\")(componentId, state, ['invalidSizeFiles'], invalidSizeFiles);\n  state = _get__(\"setConfigInState\")(componentId, state, ['invalidExtensionFiles'], invalidExtensionFiles);\n  return _get__(\"setConfigInState\")(componentId, state, ['duplicateFiles'], duplicateFiles);\n}\nfunction openDuplicateFilesWarningModalAction(id) {\n  return {\n    type: id + '.DUPLICATE_FILES_WARNING_MODAL_OPEN',\n    payload: {\n      componentId: id\n    }\n  };\n}\nconst filesValidateEpic = (actionStream, stateStream) => actionStream.pipe(_get__(\"mergeMap\")(function (action) {\n  var _get__9, _get__10, _get__11, _get__12;\n  const state = stateStream.value;\n  const componentId = action.payload.componentId;\n  const duplicateFiles = ((_get__9 = _get__(\"getConfigFromState\")(componentId, state, ['duplicateFiles'])) === null || _get__9 === void 0 ? void 0 : _get__9.toJS()) || [];\n  const validFiles = ((_get__10 = _get__(\"getConfigFromState\")(componentId, state, ['validFiles'])) === null || _get__10 === void 0 ? void 0 : _get__10.toJS()) || [];\n  const invalidExtensionFiles = ((_get__11 = _get__(\"getConfigFromState\")(componentId, state, ['invalidExtensionFiles'])) === null || _get__11 === void 0 ? void 0 : _get__11.toJS()) || [];\n  const invalidSizeFiles = ((_get__12 = _get__(\"getConfigFromState\")(componentId, state, ['invalidSizeFiles'])) === null || _get__12 === void 0 ? void 0 : _get__12.toJS()) || [];\n  const files = action.payload.files;\n  const actions = [];\n  if (!_get__(\"isEmpty\")(duplicateFiles)) {\n    actions.push(_get__(\"openDuplicateFilesWarningModalAction\")(componentId));\n  } else {\n    actions.push(_get__(\"queuedFilesAction\")(componentId, validFiles, files));\n  }\n  if (!_get__(\"isEmpty\")(validFiles)) {\n    if (_get__(\"isEmpty\")(duplicateFiles)) {\n      actions.push(_get__(\"updateFileUploadStatusAction\")(componentId, validFiles.map(file => file.name), 'QUEUED'));\n    } else {\n      actions.push(_get__(\"queuedFilesAction\")(componentId, validFiles, files));\n    }\n  }\n  if (!_get__(\"isEmpty\")(invalidExtensionFiles)) {\n    actions.push(_get__(\"updateFileUploadStatusAction\")(componentId, invalidExtensionFiles.map(file => file.name), 'INVALID'));\n  }\n  if (!_get__(\"isEmpty\")(invalidSizeFiles)) {\n    actions.push(_get__(\"updateFileUploadStatusAction\")(componentId, invalidSizeFiles.map(file => file.name), 'INVALID_SIZE'));\n  }\n  return _get__(\"of\")(...actions);\n}));\nconst duplicateFilesWarningModalOpenEpic = (actionStream, stateStream) => actionStream.pipe(_get__(\"mergeMap\")(function (action) {\n  var _get__13;\n  const state = stateStream.value;\n  const {\n    componentId\n  } = action.payload;\n  const duplicateFiles = (_get__13 = _get__(\"getConfigFromState\")(componentId, state, ['duplicateFiles'])) === null || _get__13 === void 0 ? void 0 : _get__13.toJS();\n  let modalContent = 'SDL.UiSdlFileUploadDuplicateFilesWarningModal.content';\n  if (!_get__(\"isEmpty\")(duplicateFiles)) {\n    const invalidFileNames = duplicateFiles.map(function (file) {\n      return file.name;\n    });\n    modalContent = {\n      type: 'UiSdlDynamicValueSpec',\n      dynamicValue: 'SDL.UiSdlFileUploadDuplicateFilesWarningModal.content',\n      vars: {\n        fileName: {\n          type: 'UiSdlDefinedValueParam',\n          value: '\"' + invalidFileNames.toString() + '\"'\n        }\n      }\n    };\n  }\n  return _get__(\"of\")(_get__(\"setUiSdlFileUploadComponentIdAction\")(componentId, 'SDL.UiSdlFileUploadDuplicateFilesWarningModal'), _get__(\"openCloseModalAction\")('SDL.UiSdlFileUploadDuplicateFilesWarningModal', true), _get__(\"updateModalContentAction\")('SDL.UiSdlFileUploadDuplicateFilesWarningModal', modalContent));\n}));\nfunction openCancelConfirmationModalAction(id) {\n  return {\n    type: id + '.CANCEL_CONFIRMATION_MODAL_OPEN',\n    payload: {\n      componentId: id\n    }\n  };\n}\nconst cancelConfirmationModalOpenEpic = (actionStream, stateStream) => actionStream.pipe(_get__(\"mergeMap\")(function (action) {\n  const state = stateStream.value;\n  const componentId = action.payload.componentId;\n  const files = _get__(\"getConfigFromState\")(componentId, state, ['files']);\n  if (_get__(\"isEmpty\")(files) || files.toJS().length == 0) {\n    // No files for the user to have to verify, so just continue with the cancel without confirmation\n    return _get__(\"of\")(_get__(\"cancelAllFilesUploadAction\")(componentId));\n  } else {\n    const confirmationModalId = 'SDL.UiSdlFileUploadCancelConfirmationModal';\n    return _get__(\"of\")(\n    // Set the UiSdlFileUpload componentId on the modal so it has context\n    _get__(\"setUiSdlFileUploadComponentIdAction\")(componentId, confirmationModalId),\n    // Ask the user to confirm that they want to cancel upload\n    _get__(\"openCloseModalAction\")(confirmationModalId, true));\n  }\n}));\n\n\n\n\n\n\nconst epics = {\n  ..._get__(\"epics0\"),\n  FILE_VALIDATE: _get__(\"filesValidateEpic\"),\n  DUPLICATE_FILES_WARNING_MODAL_OPEN: _get__(\"duplicateFilesWarningModalOpenEpic\"),\n  CANCEL_CONFIRMATION_MODAL_OPEN: _get__(\"cancelConfirmationModalOpenEpic\")\n};\nconst reducers = {\n  ..._get__(\"reducers0\"),\n  FILE_UPDATE_UPLOAD_STATUS: _get__(\"fileUpdateUploadStatusEffect\"),\n  FILE_QUEUED: _get__(\"filesQueuedEffect\"),\n  FILES_REMOVE: _get__(\"filesRemoveEffect\"),\n  ALL_UPLOADING_FILES_CANCEL: _get__(\"allFilesUploadCancelEffect\"),\n  FILE_VALIDATE: _get__(\"filesValidateEffect\")\n};\nconst actionCreators = {\n  ..._get__(\"actionCreators0\"),\n  updateFileUploadStatusAction: _get__(\"updateFileUploadStatusAction\"),\n  queuedFilesAction: _get__(\"queuedFilesAction\"),\n  removeFilesAction: _get__(\"removeFilesAction\"),\n  cancelAllFilesUploadAction: _get__(\"cancelAllFilesUploadAction\"),\n  validateFilesAction: _get__(\"validateFilesAction\"),\n  openDuplicateFilesWarningModalAction: _get__(\"openDuplicateFilesWarningModalAction\"),\n  openCancelConfirmationModalAction: _get__(\"openCancelConfirmationModalAction\")\n};\nconst defaultValues = {\n  \"triggersRegistered\": false,\n  \"wrapWithMetadataId\": false,\n  \"multiSelect\": true,\n  \"fileSizeLimit\": 2100000000,\n  \"rejectInvalidFiles\": true,\n  \"totalFilesSize\": 0,\n  \"cancelConfirmationModalId\": \"SDL.UiSdlFileUploadCancelConfirmationModal\",\n  \"duplicateFilesWarningModalId\": \"SDL.UiSdlFileUploadDuplicateFilesWarningModal\"\n};\n\n\n\nfunction _getGlobalObject() {\n  try {\n    if (!!__webpack_require__.g) {\n      return __webpack_require__.g;\n    }\n  } catch (e) {\n    try {\n      if (!!window) {\n        return window;\n      }\n    } catch (e) {\n      return this;\n    }\n  }\n}\n;\nvar _RewireModuleId__ = null;\nfunction _getRewireModuleId__() {\n  if (_RewireModuleId__ === null) {\n    let globalVariable = _getGlobalObject();\n    if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {\n      globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0;\n    }\n    _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++;\n  }\n  return _RewireModuleId__;\n}\nfunction _getRewireRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__;\n}\nfunction _getRewireExportsRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__;\n}\nconst _sync_internal_state_with_exports__ = false;\nconst _exports_to_reset__ = new Map();\nfunction _record_export_to_reset__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  if (!_exports_to_reset__.has(variableName)) {\n    _exports_to_reset__.set(variableName, value);\n  }\n}\nfunction _restore_exports__() {\n  const entries = _exports_to_reset__.entries();\n  for (const [variableName, value] of entries) {\n    exports[variableName] = value;\n  }\n  _exports_to_reset__.clear();\n}\nfunction _maybe_update_export__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  _record_export_to_reset__(variableName, exports[variableName]);\n  exports[variableName] = value;\n}\nfunction _getRewiredData__() {\n  let moduleId = _getRewireModuleId__();\n  let registry = _getRewireRegistry__();\n  let rewireData = registry[moduleId];\n  if (!rewireData) {\n    registry[moduleId] = Object.create(null);\n    rewireData = registry[moduleId];\n  }\n  let exportsRegistry = _getRewireExportsRegistry__();\n  if (!exportsRegistry[moduleId]) {\n    exportsRegistry[moduleId] = _restore_exports__;\n  }\n  return rewireData;\n}\n(function registerResetAll() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable['__rewire_reset_all__']) {\n    theGlobalVariable['__rewire_reset_all__'] = function () {\n      theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n      const exportsRegistry = _getRewireExportsRegistry__();\n      for (const restoreFunc of Object.values(exportsRegistry)) {\n        restoreFunc();\n      }\n      theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n    };\n  }\n})();\nvar INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';\nlet _RewireAPI__ = {};\n(function () {\n  function addPropertyToAPIObject(name, value) {\n    Object.defineProperty(_RewireAPI__, name, {\n      value: value,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  addPropertyToAPIObject('__get__', _get__);\n  addPropertyToAPIObject('__GetDependency__', _get__);\n  addPropertyToAPIObject('__Rewire__', _set__);\n  addPropertyToAPIObject('__set__', _set__);\n  addPropertyToAPIObject('__reset__', _reset__);\n  addPropertyToAPIObject('__ResetDependency__', _reset__);\n  addPropertyToAPIObject('__with__', _with__);\n})();\nfunction _get__(variableName) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _get_original__(variableName);\n  } else {\n    var value = rewireData[variableName];\n    if (value === INTENTIONAL_UNDEFINED) {\n      return undefined;\n    } else {\n      return value;\n    }\n  }\n}\nfunction _get_original__(variableName) {\n  switch (variableName) {\n    case \"setConfigInState\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_0__.setConfigInState;\n    case \"getConfigFromState\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_0__.getConfigFromState;\n    case \"Iterable\":\n      return immutable__WEBPACK_IMPORTED_MODULE_1__.Iterable;\n    case \"isEmpty\":\n      return (lodash_isEmpty__WEBPACK_IMPORTED_MODULE_2___default());\n    case \"filter\":\n      return (lodash_filter__WEBPACK_IMPORTED_MODULE_3___default());\n    case \"isArray\":\n      return (lodash_isArray__WEBPACK_IMPORTED_MODULE_4___default());\n    case \"isDuplicate\":\n      return isDuplicate;\n    case \"isValidExtension\":\n      return isValidExtension;\n    case \"isValidSize\":\n      return isValidSize;\n    case \"constructFileRef\":\n      return constructFileRef;\n    case \"checkForDuplicateFiles\":\n      return checkForDuplicateFiles;\n    case \"checkForInvalidExtensionFiles\":\n      return checkForInvalidExtensionFiles;\n    case \"checkForInvalidSizeFiles\":\n      return checkForInvalidSizeFiles;\n    case \"handleValidFiles\":\n      return handleValidFiles;\n    case \"mergeMap\":\n      return rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.mergeMap;\n    case \"openDuplicateFilesWarningModalAction\":\n      return openDuplicateFilesWarningModalAction;\n    case \"queuedFilesAction\":\n      return queuedFilesAction;\n    case \"updateFileUploadStatusAction\":\n      return updateFileUploadStatusAction;\n    case \"of\":\n      return rxjs__WEBPACK_IMPORTED_MODULE_6__.of;\n    case \"setUiSdlFileUploadComponentIdAction\":\n      return _c3_ui_UiSdlFileUploadEventModal__WEBPACK_IMPORTED_MODULE_7__.setUiSdlFileUploadComponentIdAction;\n    case \"openCloseModalAction\":\n      return _c3_ui_UiSdlModal__WEBPACK_IMPORTED_MODULE_8__.openCloseModalAction;\n    case \"updateModalContentAction\":\n      return _c3_ui_UiSdlModal__WEBPACK_IMPORTED_MODULE_8__.updateModalContentAction;\n    case \"cancelAllFilesUploadAction\":\n      return cancelAllFilesUploadAction;\n    case \"epics0\":\n      return _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_9__.epics;\n    case \"filesValidateEpic\":\n      return filesValidateEpic;\n    case \"duplicateFilesWarningModalOpenEpic\":\n      return duplicateFilesWarningModalOpenEpic;\n    case \"cancelConfirmationModalOpenEpic\":\n      return cancelConfirmationModalOpenEpic;\n    case \"reducers0\":\n      return _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_9__.reducers;\n    case \"fileUpdateUploadStatusEffect\":\n      return fileUpdateUploadStatusEffect;\n    case \"filesQueuedEffect\":\n      return filesQueuedEffect;\n    case \"filesRemoveEffect\":\n      return filesRemoveEffect;\n    case \"allFilesUploadCancelEffect\":\n      return allFilesUploadCancelEffect;\n    case \"filesValidateEffect\":\n      return filesValidateEffect;\n    case \"actionCreators0\":\n      return _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_9__.actionCreators;\n    case \"removeFilesAction\":\n      return removeFilesAction;\n    case \"validateFilesAction\":\n      return validateFilesAction;\n    case \"openCancelConfirmationModalAction\":\n      return openCancelConfirmationModalAction;\n  }\n  return undefined;\n}\nfunction _assign__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _set_original__(variableName, value);\n  } else {\n    _maybe_update_export__(variableName, value);\n    return rewireData[variableName] = value;\n  }\n}\nfunction _set_original__(variableName, _value) {\n  switch (variableName) {}\n  return undefined;\n}\nfunction _update_operation__(operation, variableName, prefix) {\n  var oldValue = _get__(variableName);\n  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;\n  _assign__(variableName, newValue);\n  return prefix ? newValue : oldValue;\n}\nfunction _set__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (typeof variableName === 'object') {\n    Object.keys(variableName).forEach(function (name) {\n      rewireData[name] = variableName[name];\n    });\n    return function () {\n      Object.keys(variableName).forEach(function (name) {\n        _reset__(variableName);\n      });\n    };\n  } else {\n    _maybe_update_export__(variableName, value);\n    if (value === undefined) {\n      rewireData[variableName] = INTENTIONAL_UNDEFINED;\n    } else {\n      rewireData[variableName] = value;\n    }\n    return function () {\n      _reset__(variableName);\n    };\n  }\n}\nfunction _reset__(variableName) {\n  let rewireData = _getRewiredData__();\n  delete rewireData[variableName];\n  if (Object.keys(rewireData).length == 0) {\n    delete _getRewireRegistry__()[_getRewireModuleId__];\n  }\n  if (_exports_to_reset__.has(variableName)) {\n    exports[variableName] = _exports_to_reset__.get(variableName);\n    _exports_to_reset__.delete(variableName);\n  }\n}\nfunction _with__(object) {\n  let rewireData = _getRewiredData__();\n  var rewiredVariableNames = Object.keys(object);\n  var previousValues = {};\n  function reset() {\n    rewiredVariableNames.forEach(function (variableName) {\n      rewireData[variableName] = previousValues[variableName];\n    });\n  }\n  return function (callback) {\n    rewiredVariableNames.forEach(function (variableName) {\n      previousValues[variableName] = rewireData[variableName];\n      rewireData[variableName] = object[variableName];\n    });\n    let result = callback();\n    if (!!result && typeof result.then == 'function') {\n      result.then(reset).catch(reset);\n    } else {\n      reset();\n    }\n    return result;\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_RewireAPI__);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@c3/ui/UiSdlFileUpload.ts_uiComponentLibrary\n");

/***/ })

}]);