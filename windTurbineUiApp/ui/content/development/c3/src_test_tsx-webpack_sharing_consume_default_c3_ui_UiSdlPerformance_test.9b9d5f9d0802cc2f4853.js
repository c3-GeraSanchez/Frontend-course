"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkjs_webpack_c3_client_node"] = self["webpackChunkjs_webpack_c3_client_node"] || []).push([["src_test_tsx-webpack_sharing_consume_default_c3_ui_UiSdlPerformance_test"],{

/***/ "./src/jasmine/C3TestSuiteReporter.ts_test":
/*!********************************************!*\
  !*** ./src/jasmine/C3TestSuiteReporter.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ C3TestSuiteReporter)\n/* harmony export */ });\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/*\n * Copyright 2009-2023 C3 AI (www.c3.ai). All Rights Reserved.\n * This material, including without limitation any software, is the confidential trade secret and proprietary\n * information of C3 and its licensors. Reproduction, use and/or distribution of this material in any form is\n * strictly prohibited except as set forth in a written license agreement with C3 and/or its authorized distributors.\n * This material may be covered by one or more patents or pending patent applications.\n */\n\n/**\n * Custom Jasmine reporter for generating C3 `TestSuite` (Type) records\n * from the Jasmine test results.\n */\nclass C3TestSuiteReporter {\n  constructor(options) {\n    _defineProperty(this, \"timers\", void 0);\n    _defineProperty(this, \"Timer\", void 0);\n    this.timers = {};\n    this.Timer = options.Timer;\n    this.generateC3TestSuite = this.generateC3TestSuite.bind(this);\n  }\n  suiteStarted(suite) {\n    const timer = new this.Timer();\n    this.timers[suite.fullName] = timer;\n    timer.start();\n  }\n  suiteDone(suite) {\n    const timer = this.timers[suite.fullName];\n    timer.time = (timer.elapsed() || 0) / 1000;\n  }\n  specStarted(spec) {\n    const timer = new this.Timer();\n    this.timers[spec.fullName] = timer;\n    timer.start();\n  }\n  specDone(spec) {\n    const timer = this.timers[spec.fullName];\n    timer.time = (timer.elapsed() || 0) / 1000;\n  }\n  generateC3TestSuite() {\n    const lineOffset = 0;\n    const jsApiReporter = window.jsApiReporter;\n    const suiteTime = (jsApiReporter.executionTime() || 0) / 1000;\n    const specs = jsApiReporter.specs();\n    const suites = jsApiReporter.suites();\n    const timers = this.timers;\n    const topLevelSuiteNames = [];\n    for (const key in suites) {\n      const suite = suites[key];\n      if (suite.description != null && suite.description == suite.fullName) {\n        topLevelSuiteNames.push(suite.fullName);\n      }\n    }\n    function extractClassname(obj) {\n      let classname = null;\n      for (let i = 0; i < topLevelSuiteNames.length; i++) {\n        const topLevelSuiteName = topLevelSuiteNames[i];\n        if (obj.fullName.indexOf(topLevelSuiteName) === 0) {\n          classname = topLevelSuiteName;\n          break;\n        }\n      }\n      return classname;\n    }\n    function extractName(obj) {\n      let name = obj.fullName;\n\n      // Remove the suite name from the spec name, because that will be reported separately\n      const classname = extractClassname(obj);\n      if (name.length > classname.length) {\n        name = name.substring(classname.length + 1);\n      }\n      return name.replace(/\\s/g, '').length > 0 ? name : '<empty name>';\n    }\n    function formatLineNumber(lineNumber) {\n      // Maybe this is wrong\n      return '\\n    at line ' + lineNumber;\n    }\n    function extractFailures(obj, failureType) {\n      let failureMsg = '';\n      obj.failedExpectations.forEach(function (failedExpectation) {\n        if (failureMsg.length > 0) failureMsg += '\\n\\n';\n\n        /**\n         * Limit the length of the msg and stack to prevent excessive\n         * regex processing.\n         */\n        const msg = (failedExpectation.message || '').substring(0, 10240);\n        const stack = (failedExpectation.stack || '').substring(0, 10240);\n        let formatted = msg.replace(/\\n/g, '\\\\n');\n        let match;\n        let regexStr = '( +from .+, line \\\\d+\\\\n(.*\\\\n){4})';\n        const codeBlockRegex = / in TestRunnerJs_jasmineTest\\.js(#\\d+\\(eval\\)#(\\d+))?.*\\(line (\\d+)\\)/;\n        let codeBlocks;\n        const codeBlockResult = codeBlockRegex.exec(msg);\n        if ((match = msg.match(new RegExp('(org.mozilla.javascript.\\\\w+: .*) \\\\(.+\\\\.\\\\w+#\\\\d+.+\\\\)(.|\\\\n|\\\\r)+' + regexStr))) || (match = msg.match(new RegExp('(\\\\w*Error: .*) \\\\(.+\\\\.\\\\w+#\\\\d+.+\\\\)(.|\\\\n|\\\\r)+' + regexStr))) || (match = msg.match(new RegExp('wrapped (\\\\w*Exception: .*)(.|\\\\n|\\\\r)+' + regexStr)))) {\n          /*\n           * Reports thrown error from Java/JavaScript; trim off the cruft and only have the relevant stack trace\n           * e.g. c3.love.exceptions.C3RuntimeException: wrapped org.mozilla.javascript.EcmaError: TypeError: Cannot call method \"myFn\" of undefined (TestRunnerJs_jasmineTest.js#46(eval)#18(Function)#3)\n           * or JavaException: c3.love.exceptions.C3RuntimeException: wrapped org.mozilla.javascript.JavaScriptException: Error: this is a JS error (TestRunnerTestType_failWithThrownJsError.js#30)\n           */\n          codeBlocks = msg.match(new RegExp(regexStr, 'g'));\n          formatted = match[1] + '\\n' + codeBlocks[codeBlocks[0].indexOf('env_server.js') > 0 ? 2 : 0] + '\\nFull error\\n' + msg;\n        } else if (codeBlockResult && codeBlockResult.index >= 0) {\n          formatted = msg.substring(0, codeBlockResult.index);\n          const regex = new RegExp(regexStr);\n          codeBlocks = regex.exec(msg);\n          if (codeBlocks && codeBlocks.index > -1) {\n            formatted = msg.substring(0, codeBlocks.index);\n            formatted += msg.substring(0, / in TestRunnerJs_jasmineTest\\.js/.exec(msg).index);\n          }\n\n          /*\n           * CodeBlockResult[2] is for line in the eval, codeBlockResult[3] for \"(line ...)\"\n           * Skywalker's throwError function throws off the line number reporting\n           */\n          formatted += '\\nFull error\\n' + msg;\n        } else if ((match = stack.match(new RegExp(regexStr = 'at .+ \\\\(<\\\\w+>:(\\\\d+)(:\\\\d+)?\\\\)', 'g'))) || (match = stack.match(new RegExp(regexStr = 'at TestRunnerJs\\\\_jasmineTest\\\\.js[^:]*:(\\\\d+)', 'g')))) {\n          /*\n           * If Jasmine provides a browser/rhino stack, parse that and extract the failing lines in `tests`\n           * and append them to the message, e.g\n           *\n           * Expected 'expect in beforeEach()' to be null.\n           *     at <Jasmine>\n           *    at TestRunnerJs_jasmineTest.js#46(eval):10\n           *     at <Jasmine>\n           *    at jasmine/jasmine-boot.js:34 (anonymous)\n           */\n          match.forEach(function (curCall) {\n            const curMatch = curCall.match(new RegExp(regexStr));\n            formatted += formatLineNumber(Number(curMatch[1]) - lineOffset);\n          });\n        }\n        failureMsg += formatted;\n      });\n      return {\n        message: failureMsg,\n        type_: failureType\n      };\n    }\n    function generateTestCase(obj) {\n      return {\n        classname: extractClassname(obj),\n        name: extractName(obj),\n        time: timers[obj.fullName].time || 0\n      };\n    }\n    const tcArr = [];\n    let skipped = 0;\n    let failed = 0;\n    let errors = 0;\n\n    // First report failures at the describe/before*/after* level\n    for (const key in suites) {\n      const suite = suites[key];\n      if (suite.status == 'failed') {\n        const tc = generateTestCase(suite);\n        tc.failure = extractFailures(suite, 'suite failure');\n        tcArr.push(tc);\n        failed++;\n      }\n    }\n\n    // Next report failures in the it blocks\n    specs.forEach(function (spec) {\n      const tc = generateTestCase(spec);\n      switch (spec.status) {\n        case 'passed':\n          break;\n        case 'failed':\n          tc.failure = extractFailures(spec, 'spec failure');\n          failed++;\n          break;\n        case 'pending':\n        case 'excluded':\n          tc.skipped = {\n            message: spec.pendingReason != '' ? spec.pendingReason : spec.status,\n            type_: spec.status\n          };\n          skipped++;\n          break;\n        default:\n          tc.error = {\n            message: 'unknown spec status: ' + spec.status,\n            type_: 'error'\n          };\n          errors++;\n          break;\n      }\n      tcArr.push(tc);\n    });\n    if (tcArr.length == 0) {\n      errors++;\n      const suiteNames = topLevelSuiteNames.join(', ');\n      tcArr.push({\n        classname: suiteNames,\n        name: suiteNames,\n        time: suiteTime,\n        error: {\n          message: 'no specs ran',\n          type_: 'error'\n        }\n      });\n    }\n    return {\n      hostname: 'localhost',\n      // For now\n      time: suiteTime,\n      disabled: 0,\n      warnings: 0,\n      errors: errors,\n      failures: failed,\n      skipped: skipped,\n      tests: tcArr.length,\n      testcase: tcArr\n    };\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/jasmine/C3TestSuiteReporter.ts_test\n");

/***/ }),

/***/ "./src/test.tsx_test":
/*!**********************!*\
  !*** ./src/test.tsx ***!
  \**********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __GetDependency__: () => (/* binding */ _get__),\n/* harmony export */   __ResetDependency__: () => (/* binding */ _reset__),\n/* harmony export */   __RewireAPI__: () => (/* binding */ _RewireAPI__),\n/* harmony export */   __Rewire__: () => (/* binding */ _set__),\n/* harmony export */   __get__: () => (/* binding */ _get__),\n/* harmony export */   __set__: () => (/* binding */ _set__),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var jasmine_core_lib_jasmine_core_jasmine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jasmine-core/lib/jasmine-core/jasmine */ \"./node_modules/jasmine-core/lib/jasmine-core/jasmine.js_test\");\n/* harmony import */ var jasmine_core_lib_jasmine_core_jasmine__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jasmine_core_lib_jasmine_core_jasmine__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var jasmine_core_lib_jasmine_core_jasmine_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jasmine-core/lib/jasmine-core/jasmine.css */ \"./node_modules/jasmine-core/lib/jasmine-core/jasmine.css_test\");\n/* harmony import */ var jasmine_core_lib_jasmine_core_jasmine_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jasmine-core/lib/jasmine-core/jasmine-html */ \"./node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js_test\");\n/* harmony import */ var jasmine_core_lib_jasmine_core_jasmine_html__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jasmine_core_lib_jasmine_core_jasmine_html__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _c3_ui_types_IstanbulCoverageFileResult__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @c3/ui/types/IstanbulCoverageFileResult */ \"./node_modules/@c3/ui/types/IstanbulCoverageFileResult.ts_test\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"webpack/sharing/consume/default/react_test\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-dom */ \"webpack/sharing/consume/default/react-dom_test?1e37_test\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var react_dom_test_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-dom/test-utils */ \"./node_modules/react-dom/test-utils.js_test\");\n/* harmony import */ var react_dom_test_utils__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react_dom_test_utils__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-redux */ \"webpack/sharing/consume/default/react-redux_test\");\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var react_intl__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-intl */ \"webpack/sharing/consume/default/react-intl_test\");\n/* harmony import */ var react_intl__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react_intl__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _c3_ui_UiSdlLocaleContext__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @c3/ui/UiSdlLocaleContext */ \"webpack/sharing/consume/default/@c3/ui/UiSdlLocaleContext_test\");\n/* harmony import */ var _c3_ui_UiSdlLocaleContext__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlLocaleContext__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _c3_ui_UiSdlTranslationContext__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @c3/ui/UiSdlTranslationContext */ \"webpack/sharing/consume/default/@c3/ui/UiSdlTranslationContext_test\");\n/* harmony import */ var _c3_ui_UiSdlTranslationContext__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlTranslationContext__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _c3_ui_testToFederatedModuleMapping__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @c3/ui/testToFederatedModuleMapping */ \"./node_modules/@c3/ui/testToFederatedModuleMapping.ts_test\");\n/* harmony import */ var _c3_ui_typeToFederatedModuleMapping__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @c3/ui/typeToFederatedModuleMapping */ \"webpack/sharing/consume/default/@c3/ui/typeToFederatedModuleMapping_test\");\n/* harmony import */ var _c3_ui_typeToFederatedModuleMapping__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_typeToFederatedModuleMapping__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _c3_ui_typeDataSpecsToFederatedModuleMapping__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @c3/ui/typeDataSpecsToFederatedModuleMapping */ \"webpack/sharing/consume/default/@c3/ui/typeDataSpecsToFederatedModuleMapping_test\");\n/* harmony import */ var _c3_ui_typeDataSpecsToFederatedModuleMapping__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_typeDataSpecsToFederatedModuleMapping__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var _c3_ui_UiSdlFederatedImport__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @c3/ui/UiSdlFederatedImport */ \"./node_modules/@c3/ui/UiSdlFederatedImport.ts_test\");\n/* harmony import */ var _c3_ui_translations_en_json__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @c3/ui/translations/en.json */ \"./node_modules/@c3/ui/translations/en.json_test\");\n/* harmony import */ var _jasmine_C3TestSuiteReporter__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./jasmine/C3TestSuiteReporter */ \"./src/jasmine/C3TestSuiteReporter.ts_test\");\n/* harmony import */ var _dynamicModuleResolverHelpers__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./dynamicModuleResolverHelpers */ \"./src/dynamicModuleResolverHelpers.ts_test\");\n/*\n * Copyright 2009-2024 C3 AI (www.c3.ai). All Rights Reserved.\n * This material, including without limitation any software, is the confidential trade secret and proprietary\n * information of C3 and its licensors. Reproduction, use and/or distribution of this material in any form is\n * strictly prohibited except as set forth in a written license agreement with C3 and/or its authorized distributors.\n * This material may be covered by one or more patents or pending patent applications.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// TODO: UI-11703 Remove this function and use the improved central functionality\nconst period = await _get__(\"federatedImport\")('c3ui_core', 'typesys', 'Filter');\n\n/*\n * TODO: MIG8-1062 figure out how to get jasmine-ajax working\n * import * as jasmineAjax from 'jasmine-ajax';\n * import * as mockAjax from 'jasmine-ajax/lib/mock-ajax';\n */\n\n/**\n *  If we get an invalid file name and if defaultCodeCoverage is false, display a list of links to all browser tests in\n * the package.\n */\nconst getFromApiEndpoint = async (type, action, isMember, ...args) => {\n  try {\n    let body = [];\n    let bodyAsString;\n    if (isMember) {\n      body.push({});\n      if (args) {\n        body = body.concat(args);\n      }\n    } else if (args) {\n      body = args;\n    }\n    bodyAsString = JSON.stringify(body);\n    const request = await fetch(`api/8/${type}/${action}`, {\n      body: bodyAsString,\n      method: 'POST',\n      credentials: 'include'\n    });\n    return request.status !== 204 ? await request.json() : null;\n  } catch (e) {\n    console.log(e.message || e);\n    return 'unknown';\n  }\n};\nconst openAllTests = async testFiles => {\n  // Create links from testFiles\n  testFiles.forEach(testFile => {\n    // Link is just the current URL for this page + \"?file=\" + testFile\n    const link = document.createElement('a');\n    link.href = window.location.href + '?file=' + testFile + '&closeIfPassing=true';\n    link.target = '_blank';\n    link.style.display = 'none';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  });\n};\nconst testFileContainer = document.createElement('DIV');\n_get__(\"testFileContainer\").setAttribute('id', 'testFile');\ndocument.body.appendChild(_get__(\"testFileContainer\"));\nconst TestFile = () => {\n  const pageParamString = window.location.search;\n  const pageParams = new URLSearchParams(pageParamString);\n  const fileName = pageParams.get('file');\n  // Flag used to indicate that all component source files are to be imported for initial code coverage data\n  const defaultCodeCoverage = pageParams.get('defaultCodeCoverage') == 'true';\n  const [onlyRootPackageTestsState, setOnlyRootPackageTestsState] = _get__(\"React\").useState(false);\n  const [rootPackageNameState, setRootPackageNameState] = _get__(\"React\").useState('');\n  const [showAllTests, setShowAllTests] = _get__(\"React\").useState(true);\n\n  /**\n   * We only want to load the Jasmine page once (it doesn't depend on state),\n   * so we use a ref to track whether it's been loaded.\n   */\n  const didLoadJasminePage = _get__(\"React\").useRef(false);\n  const toggleOnlyRootPackageTests = async () => {\n    await _get__(\"getFromApiEndpoint\")('UiBundlerConfig', 'setConfigValue', true, 'onlyRootPackageTests', !onlyRootPackageTestsState);\n    setOnlyRootPackageTestsState(!onlyRootPackageTestsState);\n  };\n  const bundledWithOnlyRootPackageTests = () => {\n    // Need to check testToFederatedModuleMapping to see if any non-root package tests were bundled.\n    let result = true;\n    Object.entries(_get__(\"testToFederatedModuleMapping\")).forEach(([_key, value]) => {\n      if (!value.includes(rootPackageNameState)) {\n        result = false;\n      }\n    });\n    return result;\n  };\n  let onlyRootPackageTests = false;\n  let rootPackageName = '';\n  let isAllTestsPage = true;\n  _get__(\"React\").useEffect(() => {\n    const getServerValues = async () => {\n      onlyRootPackageTests = (await _get__(\"getFromApiEndpoint\")('UiBundlerConfig', 'configValue', true, 'onlyRootPackageTests')).value;\n      setOnlyRootPackageTestsState(onlyRootPackageTests || false);\n      rootPackageName = (await _get__(\"getFromApiEndpoint\")('App', 'inst', false)).rootPkg;\n      setRootPackageNameState(rootPackageName);\n    };\n    getServerValues();\n  }, [onlyRootPackageTests, rootPackageName]);\n  _get__(\"React\").useEffect(() => {\n    isAllTestsPage = (!fileName || !(fileName in _get__(\"testToFederatedModuleMapping\"))) && !defaultCodeCoverage;\n    setShowAllTests(isAllTestsPage);\n  }, [isAllTestsPage]);\n  if (showAllTests) {\n    const testListContainer = document.createElement('DIV');\n    testListContainer.setAttribute('id', 'testList');\n    _get__(\"testFileContainer\").appendChild(testListContainer);\n    const testFilesByPackage = {};\n    Object.entries(_get__(\"testToFederatedModuleMapping\")).forEach(([file, federatedModule]) => {\n      var _testFilesByPackage$p;\n      const packageName = federatedModule.split('_tests_')[0];\n      testFilesByPackage[packageName] = (_testFilesByPackage$p = testFilesByPackage[packageName]) !== null && _testFilesByPackage$p !== void 0 ? _testFilesByPackage$p : [];\n      testFilesByPackage[packageName].push(file);\n    });\n\n    /**\n     * Renders an unordered list for the given list of test files.\n     * Each item is a link with the proper query params to run the test.\n     */\n    const TestList = ({\n      testFiles\n    }) => {\n      return /*#__PURE__*/_get__(\"React\").createElement(\"table\", null, testFiles.sort().map((file, index) => {\n        return /*#__PURE__*/_get__(\"React\").createElement(\"tr\", {\n          key: index\n        }, /*#__PURE__*/_get__(\"React\").createElement(\"td\", null, /*#__PURE__*/_get__(\"React\").createElement(\"a\", {\n          href: `c3/test.html?file=${file}`\n        }, file)));\n      }));\n    };\n    const TestsByPackage = ({\n      testFilesByPackage\n    }) => {\n      return /*#__PURE__*/_get__(\"React\").createElement(\"div\", {\n        style: {\n          fontFamily: 'system-ui'\n        }\n      }, /*#__PURE__*/_get__(\"React\").createElement(\"h1\", null, \"Browser Tests\"), /*#__PURE__*/_get__(\"React\").createElement(\"p\", null, \"Your current setting of \", /*#__PURE__*/_get__(\"React\").createElement(\"code\", null, \"UiBundlerConfig.onlyRootPackageTests\"), \" is\", ' ', /*#__PURE__*/_get__(\"React\").createElement(\"code\", {\n        style: {\n          padding: '4px',\n          backgroundColor: '#ddd'\n        }\n      }, JSON.stringify(onlyRootPackageTestsState))), /*#__PURE__*/_get__(\"React\").createElement(\"p\", null, /*#__PURE__*/_get__(\"React\").createElement(\"button\", {\n        onClick: toggleOnlyRootPackageTests\n      }, \"Set \", /*#__PURE__*/_get__(\"React\").createElement(\"code\", null, \"UiBundlerConfig.onlyRootPackageTests\"), \" to\", ' ', /*#__PURE__*/_get__(\"React\").createElement(\"code\", null, onlyRootPackageTestsState ? 'false' : 'true'))), bundledWithOnlyRootPackageTests() && !onlyRootPackageTestsState && /*#__PURE__*/_get__(\"React\").createElement(\"p\", {\n        style: {\n          color: '#f00',\n          fontWeight: 'bold'\n        }\n      }, \"Because you bundled with \", /*#__PURE__*/_get__(\"React\").createElement(\"code\", null, \"UiBundlerConfig.onlyRootPackageTests\"), \" set to \", /*#__PURE__*/_get__(\"React\").createElement(\"code\", null, \"true\"), \", you will need to rebundle to view and execute non-root package tests.\"), Object.entries(testFilesByPackage).map(([packageName, testFiles]) => {\n        return [/*#__PURE__*/_get__(\"React\").createElement(\"div\", {\n          key: packageName,\n          style: {\n            display: 'flex',\n            alignItems: 'center'\n          }\n        }, /*#__PURE__*/_get__(\"React\").createElement(\"h3\", {\n          style: {\n            marginRight: '10px'\n          }\n        }, \"Package: \", packageName), /*#__PURE__*/_get__(\"React\").createElement(\"button\", {\n          onClick: () => _get__(\"openAllTests\")(testFiles)\n        }, \"Run All Tests\")), /*#__PURE__*/_get__(\"React\").createElement(TestList, {\n          key: packageName + '-list',\n          testFiles: testFiles\n        })];\n      }).flat());\n    };\n    return /*#__PURE__*/_get__(\"React\").createElement(TestsByPackage, {\n      testFilesByPackage: testFilesByPackage\n    });\n  } else {\n    // START JASMINE TESTRUNNER PAGE\n    /**\n     * C3 Note:\n     *\n     * The following code is a slight customization of Jasmine's boot.js.\n     * It is necessary so that we can load individual test files dynamically based\n     * on a `file` query parameter. We also install custom reporters here.\n     *\n     * The local `jasmine` variable has been renamed to `jasmineImpl` so as to\n     * avoid a conflict with the TypeScript namespace called `jasmine`. Normally\n     * giving these two the same name would be valid, but `babel-plugin-rewire-ts`\n     * thinks the TypeScript namespace identifier is something that should be rewired,\n     * so it produces invalid TypeScript.\n     *\n     * @see jasmine-core/lib/jasmine-core/boot.js\n     */\n\n    // Only load the Jasmine page once\n    if (!didLoadJasminePage.current) {\n      /**\n       * ## Require &amp; Instantiate\n       *\n       * Require Jasmine's core files. Specifically, this requires and attaches all of Jasmine's code to the `jasmineImpl` reference.\n       */\n      const jasmineImpl = _get__(\"jasmineRequire\").core(_get__(\"jasmineRequire\"));\n\n      /**\n       * Since this is being run in a browser and the results should populate to an HTML page, require the HTML-specific Jasmine code, injecting the same reference.\n       */\n      _get__(\"jasmineRequire\").html(jasmineImpl);\n\n      /**\n       * Create the Jasmine environment. This is used to run all specs in a project.\n       */\n      const env = jasmineImpl.getEnv();\n\n      /**\n       * ## The Global Interface\n       *\n       * Build up the functions that will be exposed as the Jasmine public interface. A project can customize, rename or alias any of these functions as desired, provided the implementation remains unchanged.\n       */\n      const jasmineInterface = _get__(\"jasmineRequire\").interface(jasmineImpl, env);\n\n      /**\n       * Add all of the Jasmine global/public interface to the global scope, so a project can use the public interface directly. For example, calling `describe` in specs instead of `jasmine.getEnv().describe`.\n       */\n      Object.assign(window, jasmineInterface);\n\n      /**\n       * ## Runner Parameters\n       *\n       * More browser specific code - wrap the query string in an object and to allow for getting/setting parameters from the runner user interface.\n       */\n\n      const queryString = new jasmineImpl.QueryString({\n        getWindowLocation: function () {\n          return window.location;\n        }\n      });\n      const filterSpecs = !!queryString.getParam('spec');\n      const config = {\n        failFast: queryString.getParam('failFast'),\n        // C3 Note: the param name mismatch is a bug in jasmine-html. Fixed in jasmine v3.8.0.\n        oneFailurePerSpec: queryString.getParam('throwFailures'),\n        hideDisabled: queryString.getParam('hideDisabled')\n      };\n      const random = queryString.getParam('random');\n      if (random !== undefined && random !== '') {\n        config.random = random;\n      } else {\n        // C3 Note: Jasmine default is `true`, so explicitly set to `false` if not specified.\n        config.random = false;\n      }\n      const seed = queryString.getParam('seed');\n      if (seed) {\n        config.seed = seed;\n      }\n\n      /**\n       * ## Reporters\n       * The `HtmlReporter` builds all of the HTML UI for the runner page. This reporter paints the dots, stars, and x's for specs, as well as all spec names and all failures (if any).\n       */\n      const htmlReporter = new jasmineImpl.HtmlReporter({\n        env: env,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        navigateWithNewParam: function (key, value) {\n          return queryString.navigateWithNewParam(key, value);\n        },\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        addToExistingQueryString: function (key, value) {\n          /*\n           * We need to add `Location.pathname` here because the DOM's `<base href=\"/\" />`\n           * element (which we add in `webpack.config.js`) causes links that only have\n           * query params to exclude the current URL path.\n           * i.e. without this, `?spec=test_Foo` would go to `http://domain.com?spec=test_Foo`\n           * instead of to `http://domain.com/c3/index.html?spec=test_Foo`.\n           */\n          return window.location.pathname + queryString.fullStringWithNewParam(key, value);\n        },\n        getContainer: function () {\n          return document.body;\n        },\n        createElement: function () {\n          // eslint-disable-next-line prefer-rest-params, prefer-spread\n          return document.createElement.apply(document, arguments);\n        },\n        createTextNode: function () {\n          // eslint-disable-next-line prefer-rest-params, prefer-spread\n          return document.createTextNode.apply(document, arguments);\n        },\n        timer: new jasmineImpl.Timer(),\n        filterSpecs: filterSpecs\n      });\n\n      // C3: Custom reporter for producing `TestSuite` (C3 Type) records.\n      const c3TestSuiteReporter = new (_get__(\"C3TestSuiteReporter\"))({\n        Timer: jasmineImpl.Timer\n      });\n\n      /**\n       * The `jsApiReporter` also receives spec results, and is used by any environment that needs to extract the results  from JavaScript.\n       */\n      env.addReporter(jasmineInterface.jsApiReporter);\n      env.addReporter(htmlReporter);\n\n      // C3: Add custom reporter\n      env.addReporter(c3TestSuiteReporter);\n\n      /**\n       * Filter which specs will be run by matching the start of the full name against the `spec` query param.\n       */\n      const specFilter = new jasmineImpl.HtmlSpecFilter({\n        filterString: function () {\n          return queryString.getParam('spec');\n        }\n      });\n      config.specFilter = function (spec) {\n        return specFilter.matches(spec.getFullName());\n      };\n      env.configure(config);\n      htmlReporter.initialize();\n\n      // END: Customization of Jasmine's boot.js.\n\n      // Add proper support for links (jasmine doesn't prevent default behavior of internal links, see below)\n      document.body.addEventListener('click', event => {\n        if (event.target instanceof HTMLAnchorElement && event.target.pathname === '/' && event.target.search === '' && event.target.hash === '') {\n          // This is one of the `Spec List` or `Failures` links that jasmine handles internally; don't allow it to bubble up to the browser\n          event.preventDefault();\n        }\n      });\n      window.IstanbulCoverageFileResult = _get__(\"IstanbulCoverageFileResult\"); // Make it globally available for code coverage\n      window.c3GenerateTestSuite = c3TestSuiteReporter.generateC3TestSuite;\n\n      // Dynamic pathing to the test file ex: http://somehost:8001?file=test_UiSdlButton\n      const testPath = queryString.getParam('file');\n      const closeIfPassing = queryString.getParam('closeIfPassing');\n      if (testPath && !defaultCodeCoverage) {\n        const testPackage = _get__(\"testToFederatedModuleMapping\")[testPath];\n        if (!testPackage) {\n          throw `Test \"${testPath}\" was not found in any package`;\n        }\n        _get__(\"initializeFederatedModule\")('c3ui_core').then(() => _get__(\"federatedImport\")(testPackage, 'tests', testPath).then(() => {\n          env.addReporter({\n            jasmineDone: function () {\n              const testResults = jasmineInterface.jsApiReporter.specs();\n              if (closeIfPassing && testResults.every(testResult => testResult.status != 'failed')) {\n                window.close();\n              }\n            }\n          });\n          env.execute();\n        }).catch(error => {\n          describe(`loading ${testPath}`, () => {\n            it('should evaluate test file', () => {\n              if (error.message != \"Cannot read properties of undefined (reading 'controller')\") {\n                fail(`Unable to load the test code, check the console for more information. \\n${error.message}`);\n              }\n\n              // eslint-disable-next-line no-console\n              console.error(error);\n            });\n          });\n          env.execute();\n        }));\n\n        // Generate a div for rendering injecting rendered test components\n        const renderedTestComponentContainer = document.createElement('DIV');\n        renderedTestComponentContainer.setAttribute('id', 'testContainer');\n        document.body.appendChild(renderedTestComponentContainer);\n\n        // Create a function on the window object to render into testContainer\n        window.renderTo = function (Component, store) {\n          const testLocaleLanguageTag = 'en';\n          const ComponentWrapper = () => /*#__PURE__*/_get__(\"React\").createElement(_get__(\"Provider\"), {\n            store: store\n          }, /*#__PURE__*/_get__(\"React\").createElement(_get__(\"IntlProvider\"), {\n            key: testLocaleLanguageTag,\n            locale: testLocaleLanguageTag,\n            messages: _get__(\"translations\")\n          }, /*#__PURE__*/_get__(\"React\").createElement(_get__(\"UiSdlLocaleContext\").Provider, {\n            value: testLocaleLanguageTag\n          }, /*#__PURE__*/_get__(\"React\").createElement(_get__(\"UiSdlTranslationContext\").Provider, {\n            value: _get__(\"translations\")\n          }, /*#__PURE__*/_get__(\"React\").createElement(Component, null)))));\n\n          // The act function provided in 'react-dom/test-utils' makes the test run closer to how React works in the browser\n          _get__(\"act\")(() => {\n            _get__(\"ReactDOM\").render(/*#__PURE__*/_get__(\"React\").createElement(ComponentWrapper, null), renderedTestComponentContainer);\n          });\n        };\n      } else if (defaultCodeCoverage) {\n        describe('requiring all source files', () => {\n          beforeAll(async function () {\n            this.rootPkgName = (await _get__(\"getFromApiEndpoint\")('App', 'inst', false)).rootPkg;\n            await _get__(\"initializeFederatedModule\")('c3ui_core');\n          });\n          const federatedModuleMappingsByKind = {\n            types: _get__(\"typeToFederatedModuleMapping\"),\n            typeDataSpecs: _get__(\"typeDataSpecsToFederatedModuleMapping\")\n          };\n          Object.entries(federatedModuleMappingsByKind).forEach(function ([kind, mapping]) {\n            // Import all typescript annotated UiSdlComponent and UiSdlEpic types in the package\n            for (const typeName of Object.keys(mapping)) {\n              it(typeName, function (done) {\n                const shouldLoadType = mapping[typeName].startsWith(this.rootPkgName) || this.rootPkgName.startsWith('uiInfrastructure') && mapping[typeName] === 'c3ui_core';\n                if (!shouldLoadType) {\n                  pending();\n                  done();\n                  return;\n                }\n                try {\n                  _get__(\"federatedImport\")(mapping[typeName], kind, typeName).then(() => {\n                    expect().nothing();\n                    done();\n                  }).catch(e => {\n                    fail('Failed to load ' + kind + ': ' + typeName + '. ' + e);\n                    done();\n                  });\n                } catch (e) {\n                  fail('Failed to load ' + kind + ': ' + typeName + '. ' + e);\n                  done();\n                }\n              });\n            }\n          });\n        });\n        env.execute();\n      }\n\n      // Mark jasmine page as loaded\n      didLoadJasminePage.current = true;\n    } else {\n      // Already loaded jasmine page, return null on subsequent renders\n      return null;\n    }\n    return null;\n  }\n};\n_get__(\"ReactDOM\").render(/*#__PURE__*/_get__(\"React\").createElement(_get__(\"TestFile\"), null), _get__(\"testFileContainer\"));\nfunction _getGlobalObject() {\n  try {\n    if (!!__webpack_require__.g) {\n      return __webpack_require__.g;\n    }\n  } catch (e) {\n    try {\n      if (!!window) {\n        return window;\n      }\n    } catch (e) {\n      return this;\n    }\n  }\n}\n;\nvar _RewireModuleId__ = null;\nfunction _getRewireModuleId__() {\n  if (_RewireModuleId__ === null) {\n    let globalVariable = _getGlobalObject();\n    if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {\n      globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0;\n    }\n    _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++;\n  }\n  return _RewireModuleId__;\n}\nfunction _getRewireRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__;\n}\nfunction _getRewireExportsRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__;\n}\nconst _sync_internal_state_with_exports__ = false;\nconst _exports_to_reset__ = new Map();\nfunction _record_export_to_reset__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  if (!_exports_to_reset__.has(variableName)) {\n    _exports_to_reset__.set(variableName, value);\n  }\n}\nfunction _restore_exports__() {\n  const entries = _exports_to_reset__.entries();\n  for (const [variableName, value] of entries) {\n    exports[variableName] = value;\n  }\n  _exports_to_reset__.clear();\n}\nfunction _maybe_update_export__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  _record_export_to_reset__(variableName, exports[variableName]);\n  exports[variableName] = value;\n}\nfunction _getRewiredData__() {\n  let moduleId = _getRewireModuleId__();\n  let registry = _getRewireRegistry__();\n  let rewireData = registry[moduleId];\n  if (!rewireData) {\n    registry[moduleId] = Object.create(null);\n    rewireData = registry[moduleId];\n  }\n  let exportsRegistry = _getRewireExportsRegistry__();\n  if (!exportsRegistry[moduleId]) {\n    exportsRegistry[moduleId] = _restore_exports__;\n  }\n  return rewireData;\n}\n(function registerResetAll() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable['__rewire_reset_all__']) {\n    theGlobalVariable['__rewire_reset_all__'] = function () {\n      theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n      const exportsRegistry = _getRewireExportsRegistry__();\n      for (const restoreFunc of Object.values(exportsRegistry)) {\n        restoreFunc();\n      }\n      theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n    };\n  }\n})();\nvar INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';\nlet _RewireAPI__ = {};\n(function () {\n  function addPropertyToAPIObject(name, value) {\n    Object.defineProperty(_RewireAPI__, name, {\n      value: value,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  addPropertyToAPIObject('__get__', _get__);\n  addPropertyToAPIObject('__GetDependency__', _get__);\n  addPropertyToAPIObject('__Rewire__', _set__);\n  addPropertyToAPIObject('__set__', _set__);\n  addPropertyToAPIObject('__reset__', _reset__);\n  addPropertyToAPIObject('__ResetDependency__', _reset__);\n  addPropertyToAPIObject('__with__', _with__);\n})();\nfunction _get__(variableName) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _get_original__(variableName);\n  } else {\n    var value = rewireData[variableName];\n    if (value === INTENTIONAL_UNDEFINED) {\n      return undefined;\n    } else {\n      return value;\n    }\n  }\n}\nfunction _get_original__(variableName) {\n  switch (variableName) {\n    case \"federatedImport\":\n      return _c3_ui_UiSdlFederatedImport__WEBPACK_IMPORTED_MODULE_14__.federatedImport;\n    case \"testFileContainer\":\n      return testFileContainer;\n    case \"React\":\n      return _filterWildcardImport__(react__WEBPACK_IMPORTED_MODULE_4__);\n    case \"getFromApiEndpoint\":\n      return getFromApiEndpoint;\n    case \"testToFederatedModuleMapping\":\n      return _c3_ui_testToFederatedModuleMapping__WEBPACK_IMPORTED_MODULE_11__[\"default\"];\n    case \"openAllTests\":\n      return openAllTests;\n    case \"jasmineRequire\":\n      return (jasmine_core_lib_jasmine_core_jasmine__WEBPACK_IMPORTED_MODULE_0___default());\n    case \"C3TestSuiteReporter\":\n      return _jasmine_C3TestSuiteReporter__WEBPACK_IMPORTED_MODULE_16__[\"default\"];\n    case \"IstanbulCoverageFileResult\":\n      return _c3_ui_types_IstanbulCoverageFileResult__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\n    case \"initializeFederatedModule\":\n      return _dynamicModuleResolverHelpers__WEBPACK_IMPORTED_MODULE_17__.initializeFederatedModule;\n    case \"translations\":\n      return _c3_ui_translations_en_json__WEBPACK_IMPORTED_MODULE_15__;\n    case \"act\":\n      return react_dom_test_utils__WEBPACK_IMPORTED_MODULE_6__.act;\n    case \"ReactDOM\":\n      return _filterWildcardImport__(react_dom__WEBPACK_IMPORTED_MODULE_5__);\n    case \"typeToFederatedModuleMapping\":\n      return (_c3_ui_typeToFederatedModuleMapping__WEBPACK_IMPORTED_MODULE_12___default());\n    case \"typeDataSpecsToFederatedModuleMapping\":\n      return (_c3_ui_typeDataSpecsToFederatedModuleMapping__WEBPACK_IMPORTED_MODULE_13___default());\n    case \"Provider\":\n      return react_redux__WEBPACK_IMPORTED_MODULE_7__.Provider;\n    case \"IntlProvider\":\n      return react_intl__WEBPACK_IMPORTED_MODULE_8__.IntlProvider;\n    case \"UiSdlLocaleContext\":\n      return (_c3_ui_UiSdlLocaleContext__WEBPACK_IMPORTED_MODULE_9___default());\n    case \"UiSdlTranslationContext\":\n      return (_c3_ui_UiSdlTranslationContext__WEBPACK_IMPORTED_MODULE_10___default());\n    case \"TestFile\":\n      return TestFile;\n  }\n  return undefined;\n}\nfunction _assign__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _set_original__(variableName, value);\n  } else {\n    _maybe_update_export__(variableName, value);\n    return rewireData[variableName] = value;\n  }\n}\nfunction _set_original__(variableName, _value) {\n  switch (variableName) {}\n  return undefined;\n}\nfunction _update_operation__(operation, variableName, prefix) {\n  var oldValue = _get__(variableName);\n  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;\n  _assign__(variableName, newValue);\n  return prefix ? newValue : oldValue;\n}\nfunction _set__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (typeof variableName === 'object') {\n    Object.keys(variableName).forEach(function (name) {\n      rewireData[name] = variableName[name];\n    });\n    return function () {\n      Object.keys(variableName).forEach(function (name) {\n        _reset__(variableName);\n      });\n    };\n  } else {\n    _maybe_update_export__(variableName, value);\n    if (value === undefined) {\n      rewireData[variableName] = INTENTIONAL_UNDEFINED;\n    } else {\n      rewireData[variableName] = value;\n    }\n    return function () {\n      _reset__(variableName);\n    };\n  }\n}\nfunction _reset__(variableName) {\n  let rewireData = _getRewiredData__();\n  delete rewireData[variableName];\n  if (Object.keys(rewireData).length == 0) {\n    delete _getRewireRegistry__()[_getRewireModuleId__];\n  }\n  if (_exports_to_reset__.has(variableName)) {\n    exports[variableName] = _exports_to_reset__.get(variableName);\n    _exports_to_reset__.delete(variableName);\n  }\n}\nfunction _with__(object) {\n  let rewireData = _getRewiredData__();\n  var rewiredVariableNames = Object.keys(object);\n  var previousValues = {};\n  function reset() {\n    rewiredVariableNames.forEach(function (variableName) {\n      rewireData[variableName] = previousValues[variableName];\n    });\n  }\n  return function (callback) {\n    rewiredVariableNames.forEach(function (variableName) {\n      previousValues[variableName] = rewireData[variableName];\n      rewireData[variableName] = object[variableName];\n    });\n    let result = callback();\n    if (!!result && typeof result.then == 'function') {\n      result.then(reset).catch(reset);\n    } else {\n      reset();\n    }\n    return result;\n  };\n}\nfunction _filterWildcardImport__(wildcardImport = {}) {\n  let validPropertyNames = Object.keys(wildcardImport).filter(function (propertyName) {\n    return propertyName !== '__get__' && propertyName !== '__set__' && propertyName !== '__reset__' && propertyName !== '__with__' && propertyName !== '__GetDependency__' && propertyName !== '__Rewire__' && propertyName !== '__ResetDependency__';\n  });\n  return validPropertyNames.reduce(function (filteredWildcardImport, propertyName) {\n    filteredWildcardImport[propertyName] = wildcardImport[propertyName];\n    return filteredWildcardImport;\n  }, {});\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_RewireAPI__);\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/test.tsx_test\n");

/***/ })

}]);