"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkjs_webpack_c3_client_node"] = self["webpackChunkjs_webpack_c3_client_node"] || []).push([["node_modules_c3_ui_epicRegistry_ts_c3ui_core"],{

/***/ "./node_modules/@c3/ui/epicRegistry.ts_c3ui_core":
/*!*********************************************!*\
  !*** ./node_modules/@c3/ui/epicRegistry.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __GetDependency__: () => (/* binding */ _get__),\n/* harmony export */   __ResetDependency__: () => (/* binding */ _reset__),\n/* harmony export */   __RewireAPI__: () => (/* binding */ _RewireAPI__),\n/* harmony export */   __Rewire__: () => (/* binding */ _set__),\n/* harmony export */   __get__: () => (/* binding */ _get__),\n/* harmony export */   __set__: () => (/* binding */ _set__),\n/* harmony export */   addReduxActionListener: () => (/* binding */ addReduxActionListener),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   globalEpicStream: () => (/* binding */ globalEpicStream),\n/* harmony export */   hashEffectTriggerValue: () => (/* binding */ hashEffectTriggerValue),\n/* harmony export */   normalizeTriggerNames: () => (/* binding */ normalizeTriggerNames),\n/* harmony export */   registerEpic: () => (/* binding */ registerEpic),\n/* harmony export */   registerEpics: () => (/* binding */ registerEpics),\n/* harmony export */   registerTriggers: () => (/* binding */ registerTriggers),\n/* harmony export */   registeredTriggers: () => (/* binding */ registeredTriggers),\n/* harmony export */   rootEpic: () => (/* binding */ rootEpic),\n/* harmony export */   syncRegisterTriggers: () => (/* binding */ syncRegisterTriggers)\n/* harmony export */ });\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs/operators */ \"webpack/sharing/consume/default/rxjs/operators/rxjs/operators_c3ui_core\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ \"webpack/sharing/consume/default/rxjs/rxjs_c3ui_core\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(rxjs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_compact__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/compact */ \"webpack/sharing/consume/default/lodash/compact/lodash/compact_c3ui_core\");\n/* harmony import */ var lodash_compact__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_compact__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/cloneDeep */ \"webpack/sharing/consume/default/lodash/cloneDeep/lodash/cloneDeep_c3ui_core\");\n/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_flatten__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/flatten */ \"webpack/sharing/consume/default/lodash/flatten/lodash/flatten_c3ui_core\");\n/* harmony import */ var lodash_flatten__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_flatten__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/isEmpty */ \"webpack/sharing/consume/default/lodash/isEmpty/lodash/isEmpty_c3ui_core\");\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _c3_ui_UiSdlDynamicValueSpec__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @c3/ui/UiSdlDynamicValueSpec */ \"./node_modules/@c3/ui/UiSdlDynamicValueSpec.ts_c3ui_core\");\n/* harmony import */ var _c3_ui_UiSdlEffectPayloadStrategyHandler__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @c3/ui/UiSdlEffectPayloadStrategyHandler */ \"./node_modules/@c3/ui/UiSdlEffectPayloadStrategyHandler.ts_c3ui_core\");\n/* harmony import */ var _c3_ui_typeToFederatedModuleMapping__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @c3/ui/typeToFederatedModuleMapping */ \"webpack/sharing/consume/default/@c3/ui/typeToFederatedModuleMapping/@c3/ui/typeToFederatedModuleMapping_c3ui_core\");\n/* harmony import */ var _c3_ui_typeToFederatedModuleMapping__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_typeToFederatedModuleMapping__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _c3_ui_UiSdlFederatedImport__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @c3/ui/UiSdlFederatedImport */ \"./node_modules/@c3/ui/UiSdlFederatedImport.ts_c3ui_core\");\n/* harmony import */ var _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @c3/ui/UiSdlConnected */ \"webpack/sharing/consume/default/@c3/ui/UiSdlConnected/@c3/ui/UiSdlConnected_c3ui_core\");\n/* harmony import */ var _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _c3_ui_UiSdlLogger__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @c3/ui/UiSdlLogger */ \"./node_modules/@c3/ui/UiSdlLogger.ts_c3ui_core\");\n/* harmony import */ var _c3_app_ui_src_globalEpicStreamEpics__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @c3/app/ui/src/globalEpicStreamEpics */ \"./src/globalEpicStreamEpics.ts_c3ui_core\");\n/* harmony import */ var _c3_app_ui_src_reducerRegistry__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @c3/app/ui/src/reducerRegistry */ \"webpack/sharing/consume/default/@c3/app/ui/src/reducerRegistry/@c3/app/ui/src/reducerRegistry_c3ui_core\");\n/* harmony import */ var _c3_app_ui_src_reducerRegistry__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_c3_app_ui_src_reducerRegistry__WEBPACK_IMPORTED_MODULE_13__);\n/*\n * Copyright 2009-2024 C3 AI (www.c3.ai). All Rights Reserved.\n * This material, including without limitation any software, is the confidential trade secret and proprietary\n * information of C3 and its licensors. Reproduction, use and/or distribution of this material in any form is\n * strictly prohibited except as set forth in a written license agreement with C3 and/or its authorized distributors.\n * This material may be covered by one or more patents or pending patent applications.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The goal of the epic registry is to allow epics to be added dynamically.\n *\n * Components can import and use the registerEpic method but this is done automatically\n * by the UiSdlMetadataLoader for every UiSdlComponent type.\n */\n\n/**\n * Creates an empty epic stream to be used for grouped actions.\n */\nfunction createEpicStream() {\n  return new (_get__(\"ReplaySubject\"))();\n}\n\n/**\n * A type to back the registeredTriggers cache.\n * The key will be the hash of trigger name and effectTrigger.actions or effectTrigger.effectType\n * The value is not used for anything\n */\n\n/**\n * This map will keep the epicStreams for each action group.\n * An action group is a set of actions that belong to the same component type.\n *\n */\nconst EPIC_STREAMS = {\n  GLOBAL: _get__(\"createEpicStream\")()\n};\nconst logger = _get__(\"UiLogger\")('epicRegistry');\n\n/**\n * A type for the resolved context information.\n */\n\n/**\n * Returns the resolved context from state.\n * @param stateStream\n * @returns UiSdlResolvedContext the resolved context.\n */\nfunction getResolvedContext(stateStream) {\n  const state = stateStream.value || {};\n  return _get__(\"isEmpty\")(state) ? {} : {\n    pageParams: _get__(\"getPageParamsFromState\")(state)\n  };\n}\n\n/**\n * This epic stream has any epics that cannot be grouped because they require actions from different groups\n */\n// eslint-disable-next-line import/exports-last\nconst globalEpicStream = new (_get__(\"BehaviorSubject\"))(function (actionStream) {\n  return actionStream.pipe(_get__(\"ignoreElements\")());\n});\n\n/**\n * Returns an epic that logs error messages and never emits events. Intended as a replacement\n * for epics which could not be registered for any reason.\n * @param actionStream The incoming action stream.\n * @param _stateStream The incoming state stream.\n * @param dependencies[0] An initial error message to log when creating the observable.\n * @param dependencies[1] An optional error message to log whenever an action is emitted by the incoming stream.\n * @returns An Observable which will never emit anything.\n */\nconst createDeadOnArrivalEpic = (initialErrorMessage, reasonErrorMessageForEachAction) => {\n  const deadOnArrivalEpic = (actionStream, _stateStream) => {\n    _get__(\"logger\").error(initialErrorMessage);\n    if (!reasonErrorMessageForEachAction) {\n      return actionStream.pipe(_get__(\"ignoreElements\")());\n    }\n    return actionStream.pipe(_get__(\"map\")(action => {\n      _get__(\"logger\").error(`Action '${action.type}' was ignored because ${reasonErrorMessageForEachAction} Check the logs above.`);\n      return action;\n    }), _get__(\"ignoreElements\")());\n  };\n  return deadOnArrivalEpic;\n};\n_get__(\"globalEpicStream\").next(_get__(\"globalEpics\"));\nconst EPIC_TYPES_CACHE = {};\nconst cacheDeadOnArrivalEpicType = (effectType, initialErrorMessage, reasonErrorMessageForEachAction) => {\n  _get__(\"EPIC_TYPES_CACHE\")[effectType] = {\n    epic: _get__(\"createDeadOnArrivalEpic\")(initialErrorMessage, reasonErrorMessageForEachAction)\n  };\n};\nconst cacheEffectType = async ({\n  effectType\n}) => {\n  if (effectType && !_get__(\"EPIC_TYPES_CACHE\")[effectType]) {\n    const packageName = _get__(\"typeToFederatedModuleMapping\")[effectType];\n    if (!packageName) {\n      // `federatedImport` throws if there is no federated module name. Log the error and return.\n      _get__(\"cacheDeadOnArrivalEpicType\")(effectType, [`Effect type not found: ${effectType}.`, 'Please double check the name is correct.', 'If this is a new epic Type, make sure that', '1) it has a corresponding `.ts` implementation file,', \"2) the `epic` function is declared on the Type with a `@typeScript(env='client')` annotation,\", 'and 3) it was properly provisioned (or restart UI IDE if applicable).'].join(' '), `the effect type ${effectType} for this effect trigger could not be found.`);\n      return;\n    }\n    try {\n      _get__(\"EPIC_TYPES_CACHE\")[effectType] = await _get__(\"federatedImport\")(packageName, 'types', effectType);\n    } catch (e) {\n      if (e.message.includes('SyntaxError')) {\n        _get__(\"cacheDeadOnArrivalEpicType\")(effectType, `Effect type: ${effectType} has failed due to a syntax error. Error Message: ${e.message}`, `the effect type ${effectType} has a syntax error. Error Message: ${e.message}`);\n      } else {\n        _get__(\"cacheDeadOnArrivalEpicType\")(effectType, `Effect type: ${effectType} has failed to register due to an error. Error message: ${e.message}`, `The effect type ${effectType} has failed to register due to an error. Error message: ${e.message}`);\n      }\n      return;\n    }\n\n    // Log common issues\n    if (!_get__(\"EPIC_TYPES_CACHE\")[effectType]) {\n      _get__(\"cacheDeadOnArrivalEpicType\")(effectType, `Effect type not found: ${effectType}`, `the effect type ${effectType} was not found.`);\n    } else if (!_get__(\"EPIC_TYPES_CACHE\")[effectType].epic) {\n      _get__(\"cacheDeadOnArrivalEpicType\")(effectType, `Effect type ${effectType} does not have an 'epic' method, did you forget to export it?`, `the effect type ${effectType} did not have an 'epic' method.`);\n    }\n    return;\n  }\n};\nfunction handleError({\n  retry\n}) {\n  return _get__(\"catchError\")((error, source) => {\n    /*\n     * Throw error in separate thread to get them logged to console but return source epic so it is not cancelled\n     * See https://github.com/redux-observable/redux-observable/issues/94\n     */\n    setTimeout(function () {\n      throw error;\n    }, 0);\n    if (retry) {\n      return source;\n    }\n    return _get__(\"EMPTY\");\n  });\n}\n\n/**\n * An async function with the same function signature as an Epic, except the\n * return type is a Promise.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n/**\n * Turns an async function into an epic.\n *\n * Epics are synchronous functions that return an ActionsObservable\n * (an observable that emits Redux actions), on the other hand,\n * async functions return a promise and for that reason they cannot be\n * used as epics. (It may be a little confusing because Epics are normally\n * associated with asynchronous operations but it is important to note\n * that Epics always return an observable synchronously, while the observable\n * may emit actions asynchronously)\n *\n * To turn the promise into an action stream we use this function by\n * passing an async function that resolves to an ActionsObservable.\n *\n * @param promise An async function that resolves to an actionStream\n * @param actionStream The initial actionStream to be passed to the async function\n * @param stateStream The stateStream to be passed to the async function\n */\nconst wrapAsyncEpicLike = function (asyncFunction, name) {\n  const epicFunction = (actionStream, stateStream, dependencies) => {\n    return _get__(\"rxFrom\")(asyncFunction(actionStream, stateStream, dependencies)).pipe(_get__(\"mergeMap\")(actionStream => actionStream), _get__(\"handleError\")({\n      retry: true\n    }));\n  };\n  asyncFunction.displayName = `${name}_epic`;\n  epicFunction.displayName = name;\n  return epicFunction;\n};\nfunction registerTrigger(effectTrigger, componentId) {\n  const actionTypes = typeof effectTrigger.trigger === 'string' ? [effectTrigger.trigger] : effectTrigger.trigger;\n  const effectType = effectTrigger.effectType;\n  const actions = effectTrigger.actions;\n\n  // TODO: ENGR-7643 Validate actions and effectType are not used at the same time\n  const triggerEpic = _get__(\"wrapAsyncEpicLike\")(async (actionStream, stateStream, _dependencies) => {\n    // Filter actions to only the ones that this epic trigger listens to\n    const filteredActionStream = actionStream.pipe(_get__(\"filter\")(action => {\n      // SdlDataRedux actions are forwarded to SdlDefaultDataContext component, hence below.\n      let isSdlDataReduxAction = false;\n      if (action.meta.componentId && action.meta.actionName) {\n        const actionTypeParts = action.meta.actionName.split('.');\n        const actionType = `${action.meta.componentId}.${actionTypeParts[actionTypeParts.length - 1]}`;\n        isSdlDataReduxAction = actionTypes.includes(actionType);\n      }\n      return isSdlDataReduxAction || actionTypes.includes(action.type);\n    }));\n\n    // Resolve context variables in the action's payload\n    const resolvedActionStream = filteredActionStream.pipe(_get__(\"map\")(action => {\n      const resolvedContext = _get__(\"getResolvedContext\")(stateStream);\n      let error;\n      if (action.payload instanceof Error) {\n        error = action.payload;\n      }\n      const payload = _get__(\"handlePayloadStrategy\")(action.type, action, effectTrigger);\n      // We need to resolve implicit and explicit context variables in the arguments.\n      return {\n        ...action,\n        payload: _get__(\"recursivelyReplacePageParams\")(payload, resolvedContext),\n        error: error || action.error\n      };\n    }));\n    let resultStream;\n    if (effectType) {\n      // Execute the effect (epic) type\n      const {\n        epic\n      } = _get__(\"EPIC_TYPES_CACHE\")[effectType];\n      resultStream = epic(resolvedActionStream, stateStream).pipe(_get__(\"withLatestFrom\")(resolvedActionStream), _get__(\"map\")(([actionFromEpic, triggeringAction]) => {\n        actionFromEpic.meta = actionFromEpic.meta || {};\n        actionFromEpic.meta.siteId = triggeringAction.meta.siteId;\n        return actionFromEpic;\n      }));\n    } else {\n      // Map to the specified actions\n      resultStream = resolvedActionStream.pipe(_get__(\"mergeMap\")(originalAction => {\n        const resolvedContext = _get__(\"getResolvedContext\")(stateStream);\n        /*\n         * TODO: ENGR-7643 Normalize actions (add component type to type, rename actionType to type)\n         * TODO: ENGR-7643 Resolve actions\n         */\n        return _get__(\"rxFrom\")(actions.map(action => {\n          action.payloadStrategy = action.payloadStrategy || effectTrigger.payloadStrategy;\n          const payload = _get__(\"handlePayloadStrategy\")(action.type, originalAction, action);\n          // We need to resolve implicit and explicit context variables in the arguments.\n          return {\n            ...action,\n            payload: _get__(\"recursivelyReplacePageParams\")(payload, resolvedContext),\n            meta: {\n              ...action.meta,\n              siteId: originalAction.meta.siteId\n            }\n          };\n        }));\n      }));\n    }\n    return resultStream.pipe(_get__(\"handleError\")({\n      retry: true\n    }));\n  }, `${componentId}_effect_${actionTypes.join('|')}`);\n  _get__(\"globalEpicStream\").next(triggerEpic);\n}\nfunction normalizeAndFilterEffectTriggers(effectTriggers, componentId, epics) {\n  const normalizedEffectTriggers = effectTriggers === null || effectTriggers === void 0 ? void 0 : effectTriggers.map(effectTrigger => {\n    var _effectTrigger$trigge;\n    const normalizedTrigger = _get__(\"cloneDeep\")(effectTrigger);\n    let actionTypes = [];\n    if (((_effectTrigger$trigge = effectTrigger.trigger) === null || _effectTrigger$trigge === void 0 ? void 0 : _effectTrigger$trigge.type) === '[string]') {\n      var _effectTrigger$trigge2;\n      actionTypes = (_effectTrigger$trigge2 = effectTrigger.trigger) === null || _effectTrigger$trigge2 === void 0 ? void 0 : _effectTrigger$trigge2.value;\n    } else {\n      actionTypes = typeof effectTrigger.trigger === 'string' ? [effectTrigger.trigger] : effectTrigger.trigger;\n    }\n    normalizedTrigger.trigger = _get__(\"normalizeTriggerNames\")(actionTypes, componentId);\n    return normalizedTrigger;\n  });\n\n  // Filter out any triggers that have already been registered\n  const filteredEffectTriggers = _get__(\"flatten\")(normalizedEffectTriggers.map(effectTrigger => {\n    let alreadyReturnedThisEffectTrigger = false;\n    const triggersArray = typeof effectTrigger.trigger === 'string' ? [effectTrigger.trigger] : effectTrigger.trigger;\n    return _get__(\"compact\")(triggersArray.map(trigger => {\n      const hashed = _get__(\"hashEffectTriggerValue\")(effectTrigger, trigger, componentId);\n      if (!(hashed in _get__(\"registeredTriggers\"))) {\n        _get__(\"registeredTriggers\")[hashed] = true;\n        /**\n         * If we already registered a trigger for this effectTrigger, don't return the effectTrigger again;\n         * we don't want to end up binding the effectTrigger twice\n         */\n        if (!alreadyReturnedThisEffectTrigger) {\n          alreadyReturnedThisEffectTrigger = true;\n          return effectTrigger;\n        }\n      }\n    }));\n  }));\n  if (epics && Object.keys(epics).length > 0) {\n    for (const epicName in epics) {\n      _get__(\"EPIC_TYPES_CACHE\")[epicName] = {\n        epic: epics[epicName]\n      };\n    }\n  }\n  return filteredEffectTriggers;\n}\n\n/**\n * Our root epic that will be executed every time an action is dispatched.\n *\n * Its goal is to execute any epic that is needed according to the action.\n *\n * @param actionStream The action stream as passed by ReduxObservable\n * @param stateStream The state stream for the redux store as passed by ReduxObservable\n */\nconst rootEpic = function (actionStream, stateStream) {\n  const enhancedActionStream = actionStream.pipe(\n  // Add extra info about action\n  _get__(\"map\")(action => {\n    return _get__(\"enhanceAction\")(action, stateStream.value);\n  }));\n  const namespacedEpicResult = enhancedActionStream.pipe(\n  // We group by component type, this returns an observable of actions for each type\n  _get__(\"groupBy\")(action => {\n    var _action$meta;\n    return (action === null || action === void 0 || (_action$meta = action.meta) === null || _action$meta === void 0 ? void 0 : _action$meta.componentTypeName) || 'GLOBAL';\n  }), _get__(\"mergeMap\")(actionStreamByComponentType => {\n    const componentTypeEpicStream = _get__(\"EPIC_STREAMS\")[actionStreamByComponentType.key];\n    if (componentTypeEpicStream) {\n      return componentTypeEpicStream.pipe(_get__(\"mergeMap\")(function applyEpic(epic) {\n        const result = epic(actionStreamByComponentType, stateStream, null);\n        return result;\n      }));\n    } else {\n      _get__(\"logger\").warn('Cannot find epic stream for ' + actionStreamByComponentType.key + ', it has not been initialized and an action was triggered for this type');\n      return _get__(\"EMPTY\");\n    }\n  }));\n  const globalEpicResult = _get__(\"globalEpicStream\").pipe(_get__(\"mergeMap\")(function applyEpic(epic) {\n    const result = epic(enhancedActionStream, stateStream, null);\n    return result;\n  }));\n  return _get__(\"merge\")(namespacedEpicResult, globalEpicResult);\n};\n\n/**\n * Registers an epic belonging to a specific type.\n *\n * @param typeName The id of the component that the epic belongs to\n * @param epic The epic function to register\n * @param actionNames The actions to trigger this epic on\n */\nconst registerEpic = function (typeName, epic, actionNames) {\n  if (!_get__(\"EPIC_STREAMS\")[typeName]) {\n    _get__(\"EPIC_STREAMS\")[typeName] = _get__(\"createEpicStream\")();\n  }\n  const preFilteredActionsEpic = function (actionStream, stateStream) {\n    const filteredActionStream = actionStream.pipe(_get__(\"filter\")(action => {\n      return actionNames.includes(action.meta.actionName);\n    }));\n    let resultStream;\n    try {\n      resultStream = epic(filteredActionStream, stateStream, undefined);\n      if (!resultStream || !(resultStream instanceof _get__(\"Observable\"))) {\n        return _get__(\"createDeadOnArrivalEpic\")(`Error registering epic for action names ${JSON.stringify(actionNames)} on type '${typeName}'. Check the implementation of the corresponding epic method. Expected it to return an Observable but it returned ${resultStream}.`, `the ${typeName} epic for this action could not be registered.`)(filteredActionStream, stateStream);\n      }\n    } catch (e) {\n      return _get__(\"createDeadOnArrivalEpic\")(`Error registering epic for action names ${JSON.stringify(actionNames)} on type '${typeName}'. Check the implementation of the corresponding epic method. Expected it to return an Observable but it threw an Error:\\n${e.stack}`, `the ${typeName} epic for this action could not be registered.`)(filteredActionStream, stateStream);\n    }\n    return resultStream.pipe(_get__(\"withLatestFrom\")(filteredActionStream), _get__(\"map\")(([actionFromEpic, triggeringAction]) => {\n      actionFromEpic.meta = actionFromEpic.meta || {};\n      actionFromEpic.meta.siteId = triggeringAction.meta.siteId;\n      return actionFromEpic;\n    })).pipe(_get__(\"handleError\")({\n      retry: true\n    }));\n  };\n  _get__(\"EPIC_STREAMS\")[typeName].next(preFilteredActionsEpic);\n};\n\n/**\n * Registers all epics which belong to a specific type.\n *\n * @param typeName The id of the component that the effect triggers belong to\n * @param epics A map from action names to trigger on to the epic functions they should trigger\n */\nconst registerEpics = function (typeName, epics) {\n  if (!_get__(\"EPIC_STREAMS\")[typeName]) {\n    Object.keys(epics).forEach(function (actionName) {\n      _get__(\"registerEpic\")(typeName, epics[actionName], [actionName]);\n    });\n  }\n};\n\n/**\n * A cache to maintain which triggers have been registered, so we don't double-bind, for example, in the case\n * of dynamic components which may call `registerTriggers` multiple times when re-rendered\n */\nconst registeredTriggers = {};\n\n/**\n * Creates a hash of the trigger name and the effectTrigger actions or effectType\n *\n * @param effectTrigger - the whole effect trigger object\n * @param trigger - the specific trigger name\n * @returns the hash string\n */\nconst hashEffectTriggerValue = (effectTrigger, trigger, componentId) => `${componentId}_${trigger}_${JSON.stringify(effectTrigger.actions || effectTrigger.effectType)}`;\n\n/**\n * Prepends the provided metadataId to triggers which lack a metadataId, with the exception\n * of GLOBAL triggers.\n * @param triggerNames - The list of triggerNames\n * @param metadataId - The metadataId to prepend each of the triggerNames which lack one.\n */\nfunction normalizeTriggerNames(triggerNames, metadataId) {\n  if (typeof triggerNames == 'string') {\n    triggerNames = [triggerNames];\n  }\n  const normalizedTriggerNames = triggerNames;\n  return normalizedTriggerNames.map(function (triggerName) {\n    /*\n     * Allow defining triggers on \"this\" without specifying the component metadataId\n     * TODO: UI-4786 Do not normalize if triggerName is a known GLOBAL trigger\n     */\n    if (triggerName.indexOf('.') === -1 && !triggerName.startsWith('GLOBAL_')) {\n      return metadataId + '.' + triggerName;\n    }\n    return triggerName;\n  });\n}\nconst syncRegisterTriggers = function (componentId, effectTriggers, epics) {\n  // Normalize all the triggers so the actionName is prepended with the componentId\n  const filteredEffectTriggers = _get__(\"normalizeAndFilterEffectTriggers\")(effectTriggers, componentId, epics);\n  filteredEffectTriggers === null || filteredEffectTriggers === void 0 || filteredEffectTriggers.forEach(effectTrigger => {\n    _get__(\"registerTrigger\")(effectTrigger, componentId);\n  });\n  return true;\n};\n\n/**\n * Registers effect triggers (epic triggers).\n *\n * An effect (epic) trigger declares extra behaviours for components by listening to particular\n * actions and returning other actions (most of the time, for other components).\n *\n * Two variants of triggers exist, one that directly declares which actions should be dispatched\n * and a more advanced one, that declares an effect (epic) type to execute and produce the actions.\n *\n * @see UiSdlEffectTrigger\n *\n * @param componentId The id of the component that the effect triggers belong to\n * @param effectTriggers A collection of effect triggers to register\n * @returns a promise with a boolean value indicating if the triggers have been registered\n */\nconst registerTriggers = async function (componentId, effectTriggers, epics) {\n  // Normalize all the triggers so the actionName is prepended with the componentId\n  const filteredEffectTriggers = _get__(\"normalizeAndFilterEffectTriggers\")(effectTriggers, componentId);\n\n  // Cache effect types one by one to avoid race conditions\n  for (const effectTrigger of filteredEffectTriggers) {\n    await _get__(\"cacheEffectType\")(effectTrigger);\n  }\n  filteredEffectTriggers === null || filteredEffectTriggers === void 0 || filteredEffectTriggers.forEach(effectTrigger => {\n    _get__(\"registerTrigger\")(effectTrigger, componentId);\n  });\n  return true;\n};\n\n/**\n * Function to add a listener to the globalEpicStream that listens for a specific action.  This allows this\n * \"unconnected\" component to listen for actions dispatched by other components and behave like a UiSdlConnected<>\n * component.\n * @param actionName - The name of the action to add to the globalEpicStream\n * @param callbackFx - The function to call when the action is dispatched\n */\nfunction addReduxActionListener(actionName, callbackFx, actionFilterLambda) {\n  _get__(\"globalEpicStream\").next((actionStream, stateStream) => {\n    return actionStream.pipe(_get__(\"filter\")(action => {\n      if (actionFilterLambda && !actionFilterLambda(action)) {\n        return false;\n      }\n      return action.type === actionName;\n    }), _get__(\"mergeMap\")(action => {\n      callbackFx(action, stateStream.value);\n      return _get__(\"EMPTY\");\n    }));\n  });\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_get__(\"EPIC_STREAMS\"));\nfunction _getGlobalObject() {\n  try {\n    if (!!__webpack_require__.g) {\n      return __webpack_require__.g;\n    }\n  } catch (e) {\n    try {\n      if (!!window) {\n        return window;\n      }\n    } catch (e) {\n      return this;\n    }\n  }\n}\n;\nvar _RewireModuleId__ = null;\nfunction _getRewireModuleId__() {\n  if (_RewireModuleId__ === null) {\n    let globalVariable = _getGlobalObject();\n    if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {\n      globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0;\n    }\n    _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++;\n  }\n  return _RewireModuleId__;\n}\nfunction _getRewireRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__;\n}\nfunction _getRewireExportsRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__;\n}\nconst _sync_internal_state_with_exports__ = false;\nconst _exports_to_reset__ = new Map();\nfunction _record_export_to_reset__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  if (!_exports_to_reset__.has(variableName)) {\n    _exports_to_reset__.set(variableName, value);\n  }\n}\nfunction _restore_exports__() {\n  const entries = _exports_to_reset__.entries();\n  for (const [variableName, value] of entries) {\n    exports[variableName] = value;\n  }\n  _exports_to_reset__.clear();\n}\nfunction _maybe_update_export__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  _record_export_to_reset__(variableName, exports[variableName]);\n  exports[variableName] = value;\n}\nfunction _getRewiredData__() {\n  let moduleId = _getRewireModuleId__();\n  let registry = _getRewireRegistry__();\n  let rewireData = registry[moduleId];\n  if (!rewireData) {\n    registry[moduleId] = Object.create(null);\n    rewireData = registry[moduleId];\n  }\n  let exportsRegistry = _getRewireExportsRegistry__();\n  if (!exportsRegistry[moduleId]) {\n    exportsRegistry[moduleId] = _restore_exports__;\n  }\n  return rewireData;\n}\n(function registerResetAll() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable['__rewire_reset_all__']) {\n    theGlobalVariable['__rewire_reset_all__'] = function () {\n      theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n      const exportsRegistry = _getRewireExportsRegistry__();\n      for (const restoreFunc of Object.values(exportsRegistry)) {\n        restoreFunc();\n      }\n      theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n    };\n  }\n})();\nvar INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';\nlet _RewireAPI__ = {};\n(function () {\n  function addPropertyToAPIObject(name, value) {\n    Object.defineProperty(_RewireAPI__, name, {\n      value: value,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  addPropertyToAPIObject('__get__', _get__);\n  addPropertyToAPIObject('__GetDependency__', _get__);\n  addPropertyToAPIObject('__Rewire__', _set__);\n  addPropertyToAPIObject('__set__', _set__);\n  addPropertyToAPIObject('__reset__', _reset__);\n  addPropertyToAPIObject('__ResetDependency__', _reset__);\n  addPropertyToAPIObject('__with__', _with__);\n})();\nfunction _get__(variableName) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _get_original__(variableName);\n  } else {\n    var value = rewireData[variableName];\n    if (value === INTENTIONAL_UNDEFINED) {\n      return undefined;\n    } else {\n      return value;\n    }\n  }\n}\nfunction _get_original__(variableName) {\n  switch (variableName) {\n    case \"ReplaySubject\":\n      return rxjs__WEBPACK_IMPORTED_MODULE_1__.ReplaySubject;\n    case \"createEpicStream\":\n      return createEpicStream;\n    case \"UiLogger\":\n      return _c3_ui_UiSdlLogger__WEBPACK_IMPORTED_MODULE_11__.withName;\n    case \"isEmpty\":\n      return (lodash_isEmpty__WEBPACK_IMPORTED_MODULE_5___default());\n    case \"getPageParamsFromState\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_10__.getPageParamsFromState;\n    case \"BehaviorSubject\":\n      return rxjs__WEBPACK_IMPORTED_MODULE_1__.BehaviorSubject;\n    case \"ignoreElements\":\n      return rxjs_operators__WEBPACK_IMPORTED_MODULE_0__.ignoreElements;\n    case \"logger\":\n      return logger;\n    case \"map\":\n      return rxjs_operators__WEBPACK_IMPORTED_MODULE_0__.map;\n    case \"globalEpicStream\":\n      return globalEpicStream;\n    case \"globalEpics\":\n      return _c3_app_ui_src_globalEpicStreamEpics__WEBPACK_IMPORTED_MODULE_12__[\"default\"];\n    case \"EPIC_TYPES_CACHE\":\n      return EPIC_TYPES_CACHE;\n    case \"createDeadOnArrivalEpic\":\n      return createDeadOnArrivalEpic;\n    case \"typeToFederatedModuleMapping\":\n      return (_c3_ui_typeToFederatedModuleMapping__WEBPACK_IMPORTED_MODULE_8___default());\n    case \"cacheDeadOnArrivalEpicType\":\n      return cacheDeadOnArrivalEpicType;\n    case \"federatedImport\":\n      return _c3_ui_UiSdlFederatedImport__WEBPACK_IMPORTED_MODULE_9__.federatedImport;\n    case \"catchError\":\n      return rxjs_operators__WEBPACK_IMPORTED_MODULE_0__.catchError;\n    case \"EMPTY\":\n      return rxjs__WEBPACK_IMPORTED_MODULE_1__.EMPTY;\n    case \"rxFrom\":\n      return rxjs__WEBPACK_IMPORTED_MODULE_1__.from;\n    case \"mergeMap\":\n      return rxjs_operators__WEBPACK_IMPORTED_MODULE_0__.mergeMap;\n    case \"handleError\":\n      return handleError;\n    case \"wrapAsyncEpicLike\":\n      return wrapAsyncEpicLike;\n    case \"filter\":\n      return rxjs_operators__WEBPACK_IMPORTED_MODULE_0__.filter;\n    case \"getResolvedContext\":\n      return getResolvedContext;\n    case \"handlePayloadStrategy\":\n      return _c3_ui_UiSdlEffectPayloadStrategyHandler__WEBPACK_IMPORTED_MODULE_7__.handlePayloadStrategy;\n    case \"recursivelyReplacePageParams\":\n      return _c3_ui_UiSdlDynamicValueSpec__WEBPACK_IMPORTED_MODULE_6__.recursivelyReplacePageParams;\n    case \"withLatestFrom\":\n      return rxjs_operators__WEBPACK_IMPORTED_MODULE_0__.withLatestFrom;\n    case \"cloneDeep\":\n      return (lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_3___default());\n    case \"normalizeTriggerNames\":\n      return normalizeTriggerNames;\n    case \"flatten\":\n      return (lodash_flatten__WEBPACK_IMPORTED_MODULE_4___default());\n    case \"compact\":\n      return (lodash_compact__WEBPACK_IMPORTED_MODULE_2___default());\n    case \"hashEffectTriggerValue\":\n      return hashEffectTriggerValue;\n    case \"registeredTriggers\":\n      return registeredTriggers;\n    case \"enhanceAction\":\n      return _c3_app_ui_src_reducerRegistry__WEBPACK_IMPORTED_MODULE_13__.enhanceAction;\n    case \"groupBy\":\n      return rxjs_operators__WEBPACK_IMPORTED_MODULE_0__.groupBy;\n    case \"EPIC_STREAMS\":\n      return EPIC_STREAMS;\n    case \"merge\":\n      return rxjs__WEBPACK_IMPORTED_MODULE_1__.merge;\n    case \"Observable\":\n      return rxjs__WEBPACK_IMPORTED_MODULE_1__.Observable;\n    case \"registerEpic\":\n      return registerEpic;\n    case \"normalizeAndFilterEffectTriggers\":\n      return normalizeAndFilterEffectTriggers;\n    case \"registerTrigger\":\n      return registerTrigger;\n    case \"cacheEffectType\":\n      return cacheEffectType;\n  }\n  return undefined;\n}\nfunction _assign__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _set_original__(variableName, value);\n  } else {\n    _maybe_update_export__(variableName, value);\n    return rewireData[variableName] = value;\n  }\n}\nfunction _set_original__(variableName, _value) {\n  switch (variableName) {}\n  return undefined;\n}\nfunction _update_operation__(operation, variableName, prefix) {\n  var oldValue = _get__(variableName);\n  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;\n  _assign__(variableName, newValue);\n  return prefix ? newValue : oldValue;\n}\nfunction _set__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (typeof variableName === 'object') {\n    Object.keys(variableName).forEach(function (name) {\n      rewireData[name] = variableName[name];\n    });\n    return function () {\n      Object.keys(variableName).forEach(function (name) {\n        _reset__(variableName);\n      });\n    };\n  } else {\n    _maybe_update_export__(variableName, value);\n    if (value === undefined) {\n      rewireData[variableName] = INTENTIONAL_UNDEFINED;\n    } else {\n      rewireData[variableName] = value;\n    }\n    return function () {\n      _reset__(variableName);\n    };\n  }\n}\nfunction _reset__(variableName) {\n  let rewireData = _getRewiredData__();\n  delete rewireData[variableName];\n  if (Object.keys(rewireData).length == 0) {\n    delete _getRewireRegistry__()[_getRewireModuleId__];\n  }\n  if (_exports_to_reset__.has(variableName)) {\n    exports[variableName] = _exports_to_reset__.get(variableName);\n    _exports_to_reset__.delete(variableName);\n  }\n}\nfunction _with__(object) {\n  let rewireData = _getRewiredData__();\n  var rewiredVariableNames = Object.keys(object);\n  var previousValues = {};\n  function reset() {\n    rewiredVariableNames.forEach(function (variableName) {\n      rewireData[variableName] = previousValues[variableName];\n    });\n  }\n  return function (callback) {\n    rewiredVariableNames.forEach(function (variableName) {\n      previousValues[variableName] = rewireData[variableName];\n      rewireData[variableName] = object[variableName];\n    });\n    let result = callback();\n    if (!!result && typeof result.then == 'function') {\n      result.then(reset).catch(reset);\n    } else {\n      reset();\n    }\n    return result;\n  };\n}\nlet _typeOfOriginalExport = typeof EPIC_STREAMS;\nfunction addNonEnumerableProperty(name, value) {\n  Object.defineProperty(EPIC_STREAMS, name, {\n    value: value,\n    enumerable: false,\n    configurable: true\n  });\n}\nif ((_typeOfOriginalExport === 'object' || _typeOfOriginalExport === 'function') && Object.isExtensible(EPIC_STREAMS)) {\n  addNonEnumerableProperty('__get__', _get__);\n  addNonEnumerableProperty('__GetDependency__', _get__);\n  addNonEnumerableProperty('__Rewire__', _set__);\n  addNonEnumerableProperty('__set__', _set__);\n  addNonEnumerableProperty('__reset__', _reset__);\n  addNonEnumerableProperty('__ResetDependency__', _reset__);\n  addNonEnumerableProperty('__with__', _with__);\n  addNonEnumerableProperty('__RewireAPI__', _RewireAPI__);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@c3/ui/epicRegistry.ts_c3ui_core\n");

/***/ })

}]);