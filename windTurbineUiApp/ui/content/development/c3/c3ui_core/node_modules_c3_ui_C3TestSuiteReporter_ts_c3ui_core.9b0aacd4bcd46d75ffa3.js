"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkjs_webpack_c3_client_node"] = self["webpackChunkjs_webpack_c3_client_node"] || []).push([["node_modules_c3_ui_C3TestSuiteReporter_ts_c3ui_core"],{

/***/ "./node_modules/@c3/ui/C3TestSuiteReporter.ts_c3ui_core":
/*!****************************************************!*\
  !*** ./node_modules/@c3/ui/C3TestSuiteReporter.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ C3TestSuiteReporter)\n/* harmony export */ });\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/*\n * Copyright 2009-2023 C3 AI (www.c3.ai). All Rights Reserved.\n * This material, including without limitation any software, is the confidential trade secret and proprietary\n * information of C3 and its licensors. Reproduction, use and/or distribution of this material in any form is\n * strictly prohibited except as set forth in a written license agreement with C3 and/or its authorized distributors.\n * This material may be covered by one or more patents or pending patent applications.\n */\n\n/**\n * Custom Jasmine reporter for generating C3 `TestSuite` (Type) records\n * from the Jasmine test results.\n */\nclass C3TestSuiteReporter {\n  constructor(options) {\n    _defineProperty(this, \"timers\", void 0);\n    _defineProperty(this, \"Timer\", void 0);\n    this.timers = {};\n    this.Timer = options.Timer;\n    this.generateC3TestSuite = this.generateC3TestSuite.bind(this);\n  }\n  suiteStarted(suite) {\n    const timer = new this.Timer();\n    this.timers[suite.fullName] = timer;\n    timer.start();\n  }\n  suiteDone(suite) {\n    const timer = this.timers[suite.fullName];\n    timer.time = (timer.elapsed() || 0) / 1000;\n  }\n  specStarted(spec) {\n    const timer = new this.Timer();\n    this.timers[spec.fullName] = timer;\n    timer.start();\n  }\n  specDone(spec) {\n    const timer = this.timers[spec.fullName];\n    timer.time = (timer.elapsed() || 0) / 1000;\n  }\n  generateC3TestSuite() {\n    const lineOffset = 0;\n    const jsApiReporter = window.jsApiReporter;\n    const suiteTime = (jsApiReporter.executionTime() || 0) / 1000;\n    const specs = jsApiReporter.specs();\n    const suites = jsApiReporter.suites();\n    const timers = this.timers;\n    const topLevelSuiteNames = [];\n    for (const key in suites) {\n      const suite = suites[key];\n      if (suite.description != null && suite.description == suite.fullName) {\n        topLevelSuiteNames.push(suite.fullName);\n      }\n    }\n    function extractClassname(obj) {\n      let classname = null;\n      for (let i = 0; i < topLevelSuiteNames.length; i++) {\n        const topLevelSuiteName = topLevelSuiteNames[i];\n        if (obj.fullName.indexOf(topLevelSuiteName) === 0) {\n          classname = topLevelSuiteName;\n          break;\n        }\n      }\n      return classname;\n    }\n    function extractName(obj) {\n      let name = obj.fullName;\n\n      // Remove the suite name from the spec name, because that will be reported separately\n      const classname = extractClassname(obj);\n      if (name.length > classname.length) {\n        name = name.substring(classname.length + 1);\n      }\n      return name.replace(/\\s/g, '').length > 0 ? name : '<empty name>';\n    }\n    function formatLineNumber(lineNumber) {\n      // Maybe this is wrong\n      return '\\n    at line ' + lineNumber;\n    }\n    function extractFailures(obj, failureType) {\n      let failureMsg = '';\n      obj.failedExpectations.forEach(function (failedExpectation) {\n        if (failureMsg.length > 0) failureMsg += '\\n\\n';\n\n        /**\n         * Limit the length of the msg and stack to prevent excessive\n         * regex processing.\n         */\n        const msg = (failedExpectation.message || '').substring(0, 10240);\n        const stack = (failedExpectation.stack || '').substring(0, 10240);\n        let formatted = msg.replace(/\\n/g, '\\\\n');\n        let match;\n        let regexStr = '( +from .+, line \\\\d+\\\\n(.*\\\\n){4})';\n        const codeBlockRegex = / in TestRunnerJs_jasmineTest\\.js(#\\d+\\(eval\\)#(\\d+))?.*\\(line (\\d+)\\)/;\n        let codeBlocks;\n        const codeBlockResult = codeBlockRegex.exec(msg);\n        if ((match = msg.match(new RegExp('(org.mozilla.javascript.\\\\w+: .*) \\\\(.+\\\\.\\\\w+#\\\\d+.+\\\\)(.|\\\\n|\\\\r)+' + regexStr))) || (match = msg.match(new RegExp('(\\\\w*Error: .*) \\\\(.+\\\\.\\\\w+#\\\\d+.+\\\\)(.|\\\\n|\\\\r)+' + regexStr))) || (match = msg.match(new RegExp('wrapped (\\\\w*Exception: .*)(.|\\\\n|\\\\r)+' + regexStr)))) {\n          /*\n           * Reports thrown error from Java/JavaScript; trim off the cruft and only have the relevant stack trace\n           * e.g. c3.love.exceptions.C3RuntimeException: wrapped org.mozilla.javascript.EcmaError: TypeError: Cannot call method \"myFn\" of undefined (TestRunnerJs_jasmineTest.js#46(eval)#18(Function)#3)\n           * or JavaException: c3.love.exceptions.C3RuntimeException: wrapped org.mozilla.javascript.JavaScriptException: Error: this is a JS error (TestRunnerTestType_failWithThrownJsError.js#30)\n           */\n          codeBlocks = msg.match(new RegExp(regexStr, 'g'));\n          formatted = match[1] + '\\n' + codeBlocks[codeBlocks[0].indexOf('env_server.js') > 0 ? 2 : 0] + '\\nFull error\\n' + msg;\n        } else if (codeBlockResult && codeBlockResult.index >= 0) {\n          formatted = msg.substring(0, codeBlockResult.index);\n          const regex = new RegExp(regexStr);\n          codeBlocks = regex.exec(msg);\n          if (codeBlocks && codeBlocks.index > -1) {\n            formatted = msg.substring(0, codeBlocks.index);\n            formatted += msg.substring(0, / in TestRunnerJs_jasmineTest\\.js/.exec(msg).index);\n          }\n\n          /*\n           * CodeBlockResult[2] is for line in the eval, codeBlockResult[3] for \"(line ...)\"\n           * Skywalker's throwError function throws off the line number reporting\n           */\n          formatted += '\\nFull error\\n' + msg;\n        } else if ((match = stack.match(new RegExp(regexStr = 'at .+ \\\\(<\\\\w+>:(\\\\d+)(:\\\\d+)?\\\\)', 'g'))) || (match = stack.match(new RegExp(regexStr = 'at TestRunnerJs\\\\_jasmineTest\\\\.js[^:]*:(\\\\d+)', 'g')))) {\n          /*\n           * If Jasmine provides a browser/rhino stack, parse that and extract the failing lines in `tests`\n           * and append them to the message, e.g\n           *\n           * Expected 'expect in beforeEach()' to be null.\n           *     at <Jasmine>\n           *    at TestRunnerJs_jasmineTest.js#46(eval):10\n           *     at <Jasmine>\n           *    at jasmine/jasmine-boot.js:34 (anonymous)\n           */\n          match.forEach(function (curCall) {\n            const curMatch = curCall.match(new RegExp(regexStr));\n            formatted += formatLineNumber(Number(curMatch[1]) - lineOffset);\n          });\n        }\n        failureMsg += formatted;\n      });\n      return {\n        message: failureMsg,\n        type_: failureType\n      };\n    }\n    function generateTestCase(obj) {\n      return {\n        classname: extractClassname(obj),\n        name: extractName(obj),\n        time: timers[obj.fullName].time || 0\n      };\n    }\n    const tcArr = [];\n    let skipped = 0;\n    let failed = 0;\n    let errors = 0;\n\n    // First report failures at the describe/before*/after* level\n    for (const key in suites) {\n      const suite = suites[key];\n      if (suite.status == 'failed') {\n        const tc = generateTestCase(suite);\n        tc.failure = extractFailures(suite, 'suite failure');\n        tcArr.push(tc);\n        failed++;\n      }\n    }\n\n    // Next report failures in the it blocks\n    specs.forEach(function (spec) {\n      const tc = generateTestCase(spec);\n      switch (spec.status) {\n        case 'passed':\n          break;\n        case 'failed':\n          tc.failure = extractFailures(spec, 'spec failure');\n          failed++;\n          break;\n        case 'pending':\n        case 'excluded':\n          tc.skipped = {\n            message: spec.pendingReason != '' ? spec.pendingReason : spec.status,\n            type_: spec.status\n          };\n          skipped++;\n          break;\n        default:\n          tc.error = {\n            message: 'unknown spec status: ' + spec.status,\n            type_: 'error'\n          };\n          errors++;\n          break;\n      }\n      tcArr.push(tc);\n    });\n    if (tcArr.length == 0) {\n      errors++;\n      const suiteNames = topLevelSuiteNames.join(', ');\n      tcArr.push({\n        classname: suiteNames,\n        name: suiteNames,\n        time: suiteTime,\n        error: {\n          message: 'no specs ran',\n          type_: 'error'\n        }\n      });\n    }\n    return {\n      hostname: 'localhost',\n      // For now\n      time: suiteTime,\n      disabled: 0,\n      warnings: 0,\n      errors: errors,\n      failures: failed,\n      skipped: skipped,\n      tests: tcArr.length,\n      testcase: tcArr\n    };\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@c3/ui/C3TestSuiteReporter.ts_c3ui_core\n");

/***/ })

}]);