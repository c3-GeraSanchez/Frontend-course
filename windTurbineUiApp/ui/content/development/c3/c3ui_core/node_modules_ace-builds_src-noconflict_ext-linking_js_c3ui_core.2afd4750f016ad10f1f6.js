/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkjs_webpack_c3_client_node"] = self["webpackChunkjs_webpack_c3_client_node"] || []).push([["node_modules_ace-builds_src-noconflict_ext-linking_js_c3ui_core"],{

/***/ "./node_modules/ace-builds/src-noconflict/ext-linking.js_c3ui_core":
/*!***************************************************************!*\
  !*** ./node_modules/ace-builds/src-noconflict/ext-linking.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
ace.define("ace/ext/linking",["require","exports","module","ace/editor","ace/config"], function(require, exports, module){var Editor = require("../editor").Editor;
require("../config").defineOptions(Editor.prototype, "editor", {
    enableLinking: {
        set: function (val) {
            if (val) {
                this.on("click", onClick);
                this.on("mousemove", onMouseMove);
            }
            else {
                this.off("click", onClick);
                this.off("mousemove", onMouseMove);
            }
        },
        value: false
    }
});
exports.previousLinkingHover = false;
function onMouseMove(e) {
    var editor = e.editor;
    var ctrl = e.getAccelKey();
    if (ctrl) {
        var editor = e.editor;
        var docPos = e.getDocumentPosition();
        var session = editor.session;
        var token = session.getTokenAt(docPos.row, docPos.column);
        if (exports.previousLinkingHover && exports.previousLinkingHover != token) {
            editor._emit("linkHoverOut");
        }
        editor._emit("linkHover", { position: docPos, token: token });
        exports.previousLinkingHover = token;
    }
    else if (exports.previousLinkingHover) {
        editor._emit("linkHoverOut");
        exports.previousLinkingHover = false;
    }
}
function onClick(e) {
    var ctrl = e.getAccelKey();
    var button = e.getButton();
    if (button == 0 && ctrl) {
        var editor = e.editor;
        var docPos = e.getDocumentPosition();
        var session = editor.session;
        var token = session.getTokenAt(docPos.row, docPos.column);
        editor._emit("linkClick", { position: docPos, token: token });
    }
}

});                (function() {
                    ace.require(["ace/ext/linking"], function(m) {
                        if ( true && module) {
                            module.exports = m;
                        }
                    });
                })();
            

/***/ })

}]);