"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkjs_webpack_c3_client_node"] = self["webpackChunkjs_webpack_c3_client_node"] || []).push([["node_modules_c3_ui_UiSdlRouter_ts_uiInfrastructure"],{

/***/ "./node_modules/@c3/ui/UiSdlRouter.ts_uiInfrastructure":
/*!********************************************!*\
  !*** ./node_modules/@c3/ui/UiSdlRouter.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UrlSubPath: () => (/* binding */ UrlSubPath),\n/* harmony export */   __GetDependency__: () => (/* binding */ _get__),\n/* harmony export */   __ResetDependency__: () => (/* binding */ _reset__),\n/* harmony export */   __RewireAPI__: () => (/* binding */ _RewireAPI__),\n/* harmony export */   __Rewire__: () => (/* binding */ _set__),\n/* harmony export */   __get__: () => (/* binding */ _get__),\n/* harmony export */   __set__: () => (/* binding */ _set__),\n/* harmony export */   actionCreators: () => (/* binding */ actionCreators),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaultValues: () => (/* binding */ defaultValues),\n/* harmony export */   epics: () => (/* binding */ epics),\n/* harmony export */   findMatchingRoute: () => (/* binding */ findMatchingRoute),\n/* harmony export */   getRouteVariableNames: () => (/* binding */ getRouteVariableNames),\n/* harmony export */   getRouteVariableValues: () => (/* binding */ getRouteVariableValues),\n/* harmony export */   parsePageParams: () => (/* binding */ parsePageParams),\n/* harmony export */   parseRouteVariables: () => (/* binding */ parseRouteVariables),\n/* harmony export */   reducers: () => (/* binding */ reducers),\n/* harmony export */   registerTriggersAction: () => (/* reexport safe */ _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_3__.registerTriggersAction),\n/* harmony export */   renderInitialAction: () => (/* reexport safe */ _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_3__.renderInitialAction),\n/* harmony export */   stripTrailingSlashUnlessRoot: () => (/* binding */ stripTrailingSlashUnlessRoot),\n/* harmony export */   triggersRegisterEffect: () => (/* reexport safe */ _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_3__.triggersRegisterEffect)\n/* harmony export */ });\n/* harmony import */ var lodash_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/find */ \"webpack/sharing/consume/default/lodash/find/lodash/find_uiInfrastructure\");\n/* harmony import */ var lodash_find__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_find__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_zipObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/zipObject */ \"webpack/sharing/consume/default/lodash/zipObject/lodash/zipObject_uiInfrastructure\");\n/* harmony import */ var lodash_zipObject__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_zipObject__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _c3_app_ui_src_appUrl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @c3/app/ui/src/appUrl */ \"./src/appUrl.ts_uiInfrastructure\");\n/* harmony import */ var _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @c3/ui/UiSdlComponent */ \"webpack/sharing/consume/default/@c3/ui/UiSdlComponent_uiInfrastructure\");\n/* harmony import */ var _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_3__);\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/*\n * Copyright 2009-2024 C3 AI (www.c3.ai). All Rights Reserved.\n * This material, including without limitation any software, is the confidential trade secret and proprietary\n * information of C3 and its licensors. Reproduction, use and/or distribution of this material in any form is\n * strictly prohibited except as set forth in a written license agreement with C3 and/or its authorized distributors.\n * This material may be covered by one or more patents or pending patent applications.\n */\n\n\n\n\n\n/**\n * Glossary\n *\n * - URL path: The path component of a URL. From https://en.wikipedia.org/wiki/URL:\n *             A path component, consisting of a sequence of path segments separated by a slash (`/`).\n *             A path is always defined for a URI, though the defined path may be empty (zero\n *             length). A segment may also be empty, resulting in two consecutive slashes (`//`) in\n *             the path component. A path component may resemble or map exactly to a file system\n *             path, but does not always imply a relation to one. If an authority component is\n *             present, then the path component must either be empty or begin with a slash (`/`). If\n *             an authority component is absent, then the path cannot begin with an empty segment,\n *             that is with two slashes (`//`), as the following characters would be interpreted as\n *             an authority component. The final segment of the path may be referred to as a 'slug'.\n *\n * - Route path: A {@link UiSdlRoute.urlPath}, which is a URL path-like string that begins with a slash\n *             (`/`) and may contain route variable declarations.\n *\n * - Route variable: A route variable is a dynamic part of a URL path. A route variable is declared\n *             as a URL path segment that consists of an identifier enclosed in double braces\n *             (`{{` and `}}`). For example, a path segment `/{{foo}}/` declares a route variable\n *             called `foo`. The identifiers, or \"names\", of route variables must consist of only\n *             word characters, i.e. A-Z, 0-9, and underscores, but may be surrounded by spaces.\n */\n\n/**\n * A regular expression for replacing any route variable declaration in a\n * route path.\n *\n * @example\n *     '/foo/{{bar}}/{{ baz }}'.match(ROUTE_VARIABLE_DECLARATION_REGEX);\n *     // [\"{{bar}}\", \"{{ baz }}\"]\n */\nconst ROUTE_VARIABLE_DECLARATION_REGEX = /\\{\\{\\s*(\\w+)\\s*\\}\\}/g;\n\n/**\n * A \"pattern\", or \"stringified regular expression\", for matching a route\n * variable value. Suitable for use in a `RegExp` constructor, but due to its\n * lazy quantifiers, this string should be appended with something indicating\n * the end of the token, e.g. `$` (end of line).\n *\n * The value of the route variable will be in the first capture group.\n */\nconst ROUTE_VARIABLE_PATTERN_STRING = '([^/#?]+?)';\n\n/**\n * Converts a route, which is a URL path-like string that may contain variable\n * declarations, to a regular expression that can determine whether a URL path\n * matches the route.\n * @param routePath The route to convert to a regular expression.\n * @returns a regular expression for matching URL paths.\n *\n * @example\n *     transformRouteToRegex('/foo/{{bar}}');\n *     // \"\\/foo\\/([\\w.%/+-]+)\"\n *\n *     transformRouteToRegex('/foo');\n *     // \"\\/foo\"\n */\nconst transformRouteToRegex = routePath => {\n  const routePattern = routePath\n  // Escape any slashes.\n  .replace(/\\//g, '\\\\/')\n  // Replace `\"{{ routeVariable }}\"` with a RegExp-like string.\n  .replace(_get__(\"ROUTE_VARIABLE_DECLARATION_REGEX\"), _get__(\"ROUTE_VARIABLE_PATTERN_STRING\"));\n  return new RegExp('^' + routePattern + '$');\n};\n\n/**\n * For the given route path, extracts a value for each of the route's variables\n * from the given URL path.\n * @param routePath The route path whose variables to extract.\n * @param urlPath The URL path from which to extract variable values.\n * @returns A list of variable values.\n *\n * @example\n *     getRouteVariableValues('/foo/{{bar}}', '/foo/lorem');\n *     // [\"lorem\"]\n *\n *     getRouteVariableValues('/foo', '/foo');\n *     // []\n *\n *     getRouteVariableValues('/foo/{{bar}}/{{baz}}', '/foo/lorem/ipsum');\n *     // [\"lorem\", \"ipsum\"]\n */\nconst getRouteVariableValues = (routePath, urlPath) => {\n  const routeVariablesRegex = _get__(\"transformRouteToRegex\")(routePath);\n\n  /*\n   * Each RegExp capture group represents one route variable value.\n   * Ignore the first value because it is the same as the input.\n   */\n  const [_fullRoute, ...variableValues] = urlPath.match(routeVariablesRegex) || [];\n\n  /*\n   * WHY DO WE NEED THIS RECURSIVE FUNCTION TO DECODE VARIABLE VALUES?\n   *\n   * Sometimes we want to include a slash as the value of an url parameter. One use case would be passing the path\n   * for a redirect in the url. For example, a route could be /app/{{ subPath }} and the value of subPath is foo/bar.\n   *\n   * In this case, we need to pre-encode the slash like foo%2Fbar; otherwise, the value will not be matched against\n   * the route because the route matcher is looking for a single url segment rather than two segments.\n   *\n   * Subsequently, during navigation, the % of %2F is itself encoded by the history plugin, resulting in a value\n   * in the url of /foo%252Fbar. In order to decode this, it takes two passes of the function decodeURIComponent:\n   *\n   * - The first pass decodes %25 to %, resulting in the value foo%2Fbar\n   * - The second pass decodes %2F to /, resulting in the value foo/bar.\n   * - At this point the value will equal the decoded value (no further decodings) so the function will return.\n   *\n   * A second use case to be considered is the genAi use case, where they want to have a % in the url parameter.\n   * This will be encoded by the history plugin before navigating to the url, so it must be decoded a single time\n   * before being passed along to the rest of the code. If we try to decode a second time (the most recent bug),\n   * the decodeURIComponent function throws an error when encountering an isolated % character. This accounts for\n   * the try/catch block in the code.\n   *\n   * Thus, we don't know ahead of time how many passes we'll need to take of the decodeURIComponent function,\n   * so the cleanest approach wound up being this recursive function, which progressively decodes the variable value\n   * until either an error is thrown, or no more decoding is required.\n   */\n  const decodedValues = [];\n  variableValues.forEach(variableValue => {\n    const helper = value => {\n      let maybeDecoded;\n      try {\n        maybeDecoded = decodeURIComponent(value);\n        if (maybeDecoded === value) {\n          // No further decoding is required.\n          decodedValues.push(value);\n          return;\n        } else {\n          // Only partially decoded; recurse.\n          helper(maybeDecoded);\n        }\n      } catch (e) {\n        // There is an isolated `%` in the value.\n        decodedValues.push(value);\n        return;\n      }\n    };\n    helper(variableValue);\n  });\n  return decodedValues;\n};\n\n/**\n * Checks if a route path contains variable declarations.\n * @param routePath The route path to check for variable declarations.\n * @returns `true` if the route path contains at least one variable declaration,\n * `false` otherwise\n *\n * @example\n *     routePathHasVariables('/foo/{{bar}}');\n *     // true\n *\n *     routePathHasVariables('/foo/bar');\n *     // false\n */\nconst routePathHasVariables = routePath => {\n  return routePath.indexOf('{{') > -1;\n};\n\n/**\n * Normalizes a URL path by removing a trailing `/` character, if found, except if the URL path is the root path.\n * @param urlPath The URL path to normalize.\n * @return the normalized URL path.\n *\n * @example\n *     stripTrailingSlashUnlessRoot('/foo/');\n *     // \"/foo\"\n *\n *     stripTrailingSlashUnlessRoot('/foo/bar/');\n *     // \"/foo/bar\"\n *\n *     stripTrailingSlashUnlessRoot('/');\n *     // \"/\"\n */\nconst stripTrailingSlashUnlessRoot = urlPath => {\n  // Strip trailing slash unless it is the root path (`/`).\n  return urlPath.endsWith('/') && urlPath !== '/' ? urlPath.slice(0, -1) : urlPath;\n};\n\n/**\n * A helper class to manage adding and removing the env/app prefix from the path, as needed.\n * When comparing the path to a route, we don't want to use the env/app prefix in that comparison,\n * since the env/app prefix is not used in the routes.\n *\n * However, when using the `history` library, we *do* want to add the env/app prefix, since\n * that library controls the actual navigation of the site, and the env/app prefix is required\n * in that case.\n *\n * Note that this additional functionality is only required because version 5.x.x of the `history`\n * library removed support for passing in a `basename` property. Originally, in versions prior to\n * 5.x.x, that property allowed for a basename (in our case, env/app prefix) to be appended to all\n * paths.\n *\n * We had to upgrade to 5.x.x because there was a bug in version 4.x.x that wouldn't allow a `%` character\n * in the path.\n */\nclass UrlSubPath {\n  constructor(subPath, appUrlPrefix) {\n    _defineProperty(this, \"subPath\", void 0);\n    _defineProperty(this, \"appUrlPrefix\", void 0);\n    this.subPath = subPath;\n    this.appUrlPrefix = appUrlPrefix;\n  }\n  withAppUrlPrefix() {\n    // If we are at root, don't add the trailing slash.\n    const subPath = this.subPath === '/' ? '' : this.subPath;\n\n    // If there is no appUrlPrefix (vanity url / production mode), don't add the leading slash.\n    const leadingSlash = this.appUrlPrefix.length ? '/' : '';\n    return `${leadingSlash}${this.appUrlPrefix}${subPath}`;\n  }\n  withoutAppUrlPrefix() {\n    if (!this.appUrlPrefix) {\n      return this.subPath;\n    }\n    const regex = new RegExp(`^/${this.appUrlPrefix}`);\n    let urlPath = this.subPath.replace(regex, '');\n    if (urlPath === '') {\n      urlPath = '/';\n    }\n    return urlPath;\n  }\n}\n\n/**\n * Parses a route path for the names of any variables that it contains.\n * @param routePath The route path to parse for variable names.\n * @returns A list of variable names.\n *\n * @example\n *     getRouteVariableNames('/foo/{{bar}}');\n *     // [\"bar\"]\n *\n *     getRouteVariableNames('/foo');\n *     // []\n *\n *     getRouteVariableNames('/foo/{{bar}}/{{baz}}');\n *     // [\"bar\", \"baz\"]\n */\nconst getRouteVariableNames = routePath => {\n  // `ROUTE_VARIABLE_DECLARATION_REGEX` has one capture group, which captures the route variable value.\n  return Array.from(routePath.matchAll(_get__(\"ROUTE_VARIABLE_DECLARATION_REGEX\")), match => match[1]);\n};\nconst findMatchingRoute = (urlPath, routes) => {\n  if (!urlPath) {\n    return;\n  }\n\n  // Remove any query params for the purposes of matching.\n  let urlToMatch = urlPath.split('?')[0];\n  urlToMatch = _get__(\"stripTrailingSlashUnlessRoot\")(urlToMatch);\n\n  // Remove appUrlPrefix from the urlToMatch, if it exists.\n  urlToMatch = new (_get__(\"UrlSubPath\"))(urlToMatch, _get__(\"c3AppUrlPrefix\")).withoutAppUrlPrefix();\n  return _get__(\"find\")(routes, route => {\n    const routeToMatch = _get__(\"stripTrailingSlashUnlessRoot\")(route.urlPath);\n\n    // Check if it has route variables\n    if (_get__(\"routePathHasVariables\")(routeToMatch)) {\n      const routeRegex = _get__(\"transformRouteToRegex\")(routeToMatch);\n\n      // Check if the route matches the URL path, while accounting for route variables.\n      if (routeRegex.test(urlToMatch)) {\n        return true;\n      }\n    }\n\n    // Otherwise check for a static route match.\n    return routeToMatch === urlToMatch;\n  });\n};\nconst parseRouteVariables = (urlPath, routePath) => {\n  return routePath && _get__(\"routePathHasVariables\")(routePath) ?\n  // Converts 2 arrays to an Object. First array has the keys, second array has the values.\n  _get__(\"zipObject\")(_get__(\"getRouteVariableNames\")(routePath), _get__(\"getRouteVariableValues\")(routePath, urlPath)) : {};\n};\nconst parsePageParams = (location, routes) => {\n  // First find the route that matches the current URL path. This will be `undefined` if no route matched.\n  const currentRoute = _get__(\"findMatchingRoute\")(location.pathname, routes);\n\n  // Parse route variables using the current route.\n  const routeVariablesMap = currentRoute ? _get__(\"parseRouteVariables\")(new (_get__(\"UrlSubPath\"))(location.pathname, _get__(\"c3AppUrlPrefix\")).withoutAppUrlPrefix(), currentRoute.urlPath) : {};\n\n  // Parse search (query) params.\n  const searchParams = new URLSearchParams(location.search);\n  const searchParamsMap = {};\n  for (const key of searchParams.keys()) {\n    const searchParamValues = searchParams.getAll(key);\n    /*\n     * If multiple values are provided for a query param, its corresponding page param value is stored\n     * as an array. If only a single value is provided, it is stored as a string.\n     */\n    searchParamsMap[key] = searchParamValues.length > 1 ? searchParamValues : searchParamValues[0];\n  }\n  return {\n    ...searchParamsMap,\n    // Route variables take precedence over search params.\n    ...routeVariablesMap\n  };\n};\n\n\n\n\n\n\nconst epics = {\n  ..._get__(\"epics0\")\n};\nconst reducers = {\n  ..._get__(\"reducers0\")\n};\nconst actionCreators = {\n  ..._get__(\"actionCreators0\")\n};\nconst defaultValues = {\n  \"triggersRegistered\": false,\n  \"wrapWithMetadataId\": false\n};\n\n\n\nfunction _getGlobalObject() {\n  try {\n    if (!!__webpack_require__.g) {\n      return __webpack_require__.g;\n    }\n  } catch (e) {\n    try {\n      if (!!window) {\n        return window;\n      }\n    } catch (e) {\n      return this;\n    }\n  }\n}\n;\nvar _RewireModuleId__ = null;\nfunction _getRewireModuleId__() {\n  if (_RewireModuleId__ === null) {\n    let globalVariable = _getGlobalObject();\n    if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {\n      globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0;\n    }\n    _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++;\n  }\n  return _RewireModuleId__;\n}\nfunction _getRewireRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__;\n}\nfunction _getRewireExportsRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__;\n}\nconst _sync_internal_state_with_exports__ = false;\nconst _exports_to_reset__ = new Map();\nfunction _record_export_to_reset__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  if (!_exports_to_reset__.has(variableName)) {\n    _exports_to_reset__.set(variableName, value);\n  }\n}\nfunction _restore_exports__() {\n  const entries = _exports_to_reset__.entries();\n  for (const [variableName, value] of entries) {\n    exports[variableName] = value;\n  }\n  _exports_to_reset__.clear();\n}\nfunction _maybe_update_export__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  _record_export_to_reset__(variableName, exports[variableName]);\n  exports[variableName] = value;\n}\nfunction _getRewiredData__() {\n  let moduleId = _getRewireModuleId__();\n  let registry = _getRewireRegistry__();\n  let rewireData = registry[moduleId];\n  if (!rewireData) {\n    registry[moduleId] = Object.create(null);\n    rewireData = registry[moduleId];\n  }\n  let exportsRegistry = _getRewireExportsRegistry__();\n  if (!exportsRegistry[moduleId]) {\n    exportsRegistry[moduleId] = _restore_exports__;\n  }\n  return rewireData;\n}\n(function registerResetAll() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable['__rewire_reset_all__']) {\n    theGlobalVariable['__rewire_reset_all__'] = function () {\n      theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n      const exportsRegistry = _getRewireExportsRegistry__();\n      for (const restoreFunc of Object.values(exportsRegistry)) {\n        restoreFunc();\n      }\n      theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n    };\n  }\n})();\nvar INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';\nlet _RewireAPI__ = {};\n(function () {\n  function addPropertyToAPIObject(name, value) {\n    Object.defineProperty(_RewireAPI__, name, {\n      value: value,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  addPropertyToAPIObject('__get__', _get__);\n  addPropertyToAPIObject('__GetDependency__', _get__);\n  addPropertyToAPIObject('__Rewire__', _set__);\n  addPropertyToAPIObject('__set__', _set__);\n  addPropertyToAPIObject('__reset__', _reset__);\n  addPropertyToAPIObject('__ResetDependency__', _reset__);\n  addPropertyToAPIObject('__with__', _with__);\n})();\nfunction _get__(variableName) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _get_original__(variableName);\n  } else {\n    var value = rewireData[variableName];\n    if (value === INTENTIONAL_UNDEFINED) {\n      return undefined;\n    } else {\n      return value;\n    }\n  }\n}\nfunction _get_original__(variableName) {\n  switch (variableName) {\n    case \"ROUTE_VARIABLE_DECLARATION_REGEX\":\n      return ROUTE_VARIABLE_DECLARATION_REGEX;\n    case \"ROUTE_VARIABLE_PATTERN_STRING\":\n      return ROUTE_VARIABLE_PATTERN_STRING;\n    case \"transformRouteToRegex\":\n      return transformRouteToRegex;\n    case \"stripTrailingSlashUnlessRoot\":\n      return stripTrailingSlashUnlessRoot;\n    case \"UrlSubPath\":\n      return UrlSubPath;\n    case \"c3AppUrlPrefix\":\n      return _c3_app_ui_src_appUrl__WEBPACK_IMPORTED_MODULE_2__.c3AppUrlPrefix;\n    case \"find\":\n      return (lodash_find__WEBPACK_IMPORTED_MODULE_0___default());\n    case \"routePathHasVariables\":\n      return routePathHasVariables;\n    case \"zipObject\":\n      return (lodash_zipObject__WEBPACK_IMPORTED_MODULE_1___default());\n    case \"getRouteVariableNames\":\n      return getRouteVariableNames;\n    case \"getRouteVariableValues\":\n      return getRouteVariableValues;\n    case \"findMatchingRoute\":\n      return findMatchingRoute;\n    case \"parseRouteVariables\":\n      return parseRouteVariables;\n    case \"epics0\":\n      return _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_3__.epics;\n    case \"reducers0\":\n      return _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_3__.reducers;\n    case \"actionCreators0\":\n      return _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_3__.actionCreators;\n  }\n  return undefined;\n}\nfunction _assign__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _set_original__(variableName, value);\n  } else {\n    _maybe_update_export__(variableName, value);\n    return rewireData[variableName] = value;\n  }\n}\nfunction _set_original__(variableName, _value) {\n  switch (variableName) {}\n  return undefined;\n}\nfunction _update_operation__(operation, variableName, prefix) {\n  var oldValue = _get__(variableName);\n  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;\n  _assign__(variableName, newValue);\n  return prefix ? newValue : oldValue;\n}\nfunction _set__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (typeof variableName === 'object') {\n    Object.keys(variableName).forEach(function (name) {\n      rewireData[name] = variableName[name];\n    });\n    return function () {\n      Object.keys(variableName).forEach(function (name) {\n        _reset__(variableName);\n      });\n    };\n  } else {\n    _maybe_update_export__(variableName, value);\n    if (value === undefined) {\n      rewireData[variableName] = INTENTIONAL_UNDEFINED;\n    } else {\n      rewireData[variableName] = value;\n    }\n    return function () {\n      _reset__(variableName);\n    };\n  }\n}\nfunction _reset__(variableName) {\n  let rewireData = _getRewiredData__();\n  delete rewireData[variableName];\n  if (Object.keys(rewireData).length == 0) {\n    delete _getRewireRegistry__()[_getRewireModuleId__];\n  }\n  if (_exports_to_reset__.has(variableName)) {\n    exports[variableName] = _exports_to_reset__.get(variableName);\n    _exports_to_reset__.delete(variableName);\n  }\n}\nfunction _with__(object) {\n  let rewireData = _getRewiredData__();\n  var rewiredVariableNames = Object.keys(object);\n  var previousValues = {};\n  function reset() {\n    rewiredVariableNames.forEach(function (variableName) {\n      rewireData[variableName] = previousValues[variableName];\n    });\n  }\n  return function (callback) {\n    rewiredVariableNames.forEach(function (variableName) {\n      previousValues[variableName] = rewireData[variableName];\n      rewireData[variableName] = object[variableName];\n    });\n    let result = callback();\n    if (!!result && typeof result.then == 'function') {\n      result.then(reset).catch(reset);\n    } else {\n      reset();\n    }\n    return result;\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_RewireAPI__);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@c3/ui/UiSdlRouter.ts_uiInfrastructure\n");

/***/ }),

/***/ "./src/appUrl.ts_uiInfrastructure":
/*!***********************!*\
  !*** ./src/appUrl.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __GetDependency__: () => (/* binding */ _get__),\n/* harmony export */   __ResetDependency__: () => (/* binding */ _reset__),\n/* harmony export */   __RewireAPI__: () => (/* binding */ _RewireAPI__),\n/* harmony export */   __Rewire__: () => (/* binding */ _set__),\n/* harmony export */   __get__: () => (/* binding */ _get__),\n/* harmony export */   __set__: () => (/* binding */ _set__),\n/* harmony export */   c3AppUrlPrefix: () => (/* binding */ c3AppUrlPrefix),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar _document$cookie$spli;\n/*\n * Copyright 2009-2023 C3 AI (www.c3.ai). All Rights Reserved.\n * This material, including without limitation any software, is the confidential trade secret and proprietary\n * information of C3 and its licensors. Reproduction, use and/or distribution of this material in any form is\n * strictly prohibited except as set forth in a written license agreement with C3 and/or its authorized distributors.\n * This material may be covered by one or more patents or pending patent applications.\n */\n\n/**\n * Enables forward-compatibility with V8 cluster architectures.\n * In V8, applications may be standalone (canonical URL), one app\n * of many in an environment (single-app environment route), or\n * one of many apps in many environments in a cluster (full route).\n *\n * `appUrl` represents the \"mount point\" or \"base URL path\" of this application.\n * All requests should be made relative to this app URL.\n *\n * e.g., REST API requests should be constructed as appropriate based on the app URL:\n * - canonical URL (`/` or empty app URL): https://domain/api/#/...\n * - single app env route (`/app` app URL): https://domain/app/api/#/...\n * - full route (`/env/app` app URL): https://domain/env/app/api/#/...\n */\n\nconst c3AppUrlPrefix = ((_document$cookie$spli = document.cookie.split(';').map(c => c.trim()).find(c => c.startsWith('c3AppUrlPrefix='))) === null || _document$cookie$spli === void 0 ? void 0 : _document$cookie$spli.split('=')[1]) || '';\nconst appUrl = _get__(\"c3AppUrlPrefix\") ? encodeURI(location.origin + '/' + _get__(\"c3AppUrlPrefix\")) : undefined;\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_get__(\"appUrl\"));\nfunction _getGlobalObject() {\n  try {\n    if (!!__webpack_require__.g) {\n      return __webpack_require__.g;\n    }\n  } catch (e) {\n    try {\n      if (!!window) {\n        return window;\n      }\n    } catch (e) {\n      return this;\n    }\n  }\n}\n;\nvar _RewireModuleId__ = null;\nfunction _getRewireModuleId__() {\n  if (_RewireModuleId__ === null) {\n    let globalVariable = _getGlobalObject();\n    if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {\n      globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0;\n    }\n    _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++;\n  }\n  return _RewireModuleId__;\n}\nfunction _getRewireRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__;\n}\nfunction _getRewireExportsRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__;\n}\nconst _sync_internal_state_with_exports__ = false;\nconst _exports_to_reset__ = new Map();\nfunction _record_export_to_reset__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  if (!_exports_to_reset__.has(variableName)) {\n    _exports_to_reset__.set(variableName, value);\n  }\n}\nfunction _restore_exports__() {\n  const entries = _exports_to_reset__.entries();\n  for (const [variableName, value] of entries) {\n    exports[variableName] = value;\n  }\n  _exports_to_reset__.clear();\n}\nfunction _maybe_update_export__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  _record_export_to_reset__(variableName, exports[variableName]);\n  exports[variableName] = value;\n}\nfunction _getRewiredData__() {\n  let moduleId = _getRewireModuleId__();\n  let registry = _getRewireRegistry__();\n  let rewireData = registry[moduleId];\n  if (!rewireData) {\n    registry[moduleId] = Object.create(null);\n    rewireData = registry[moduleId];\n  }\n  let exportsRegistry = _getRewireExportsRegistry__();\n  if (!exportsRegistry[moduleId]) {\n    exportsRegistry[moduleId] = _restore_exports__;\n  }\n  return rewireData;\n}\n(function registerResetAll() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable['__rewire_reset_all__']) {\n    theGlobalVariable['__rewire_reset_all__'] = function () {\n      theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n      const exportsRegistry = _getRewireExportsRegistry__();\n      for (const restoreFunc of Object.values(exportsRegistry)) {\n        restoreFunc();\n      }\n      theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n    };\n  }\n})();\nvar INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';\nlet _RewireAPI__ = {};\n(function () {\n  function addPropertyToAPIObject(name, value) {\n    Object.defineProperty(_RewireAPI__, name, {\n      value: value,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  addPropertyToAPIObject('__get__', _get__);\n  addPropertyToAPIObject('__GetDependency__', _get__);\n  addPropertyToAPIObject('__Rewire__', _set__);\n  addPropertyToAPIObject('__set__', _set__);\n  addPropertyToAPIObject('__reset__', _reset__);\n  addPropertyToAPIObject('__ResetDependency__', _reset__);\n  addPropertyToAPIObject('__with__', _with__);\n})();\nfunction _get__(variableName) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _get_original__(variableName);\n  } else {\n    var value = rewireData[variableName];\n    if (value === INTENTIONAL_UNDEFINED) {\n      return undefined;\n    } else {\n      return value;\n    }\n  }\n}\nfunction _get_original__(variableName) {\n  switch (variableName) {\n    case \"c3AppUrlPrefix\":\n      return c3AppUrlPrefix;\n    case \"appUrl\":\n      return appUrl;\n  }\n  return undefined;\n}\nfunction _assign__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _set_original__(variableName, value);\n  } else {\n    _maybe_update_export__(variableName, value);\n    return rewireData[variableName] = value;\n  }\n}\nfunction _set_original__(variableName, _value) {\n  switch (variableName) {}\n  return undefined;\n}\nfunction _update_operation__(operation, variableName, prefix) {\n  var oldValue = _get__(variableName);\n  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;\n  _assign__(variableName, newValue);\n  return prefix ? newValue : oldValue;\n}\nfunction _set__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (typeof variableName === 'object') {\n    Object.keys(variableName).forEach(function (name) {\n      rewireData[name] = variableName[name];\n    });\n    return function () {\n      Object.keys(variableName).forEach(function (name) {\n        _reset__(variableName);\n      });\n    };\n  } else {\n    _maybe_update_export__(variableName, value);\n    if (value === undefined) {\n      rewireData[variableName] = INTENTIONAL_UNDEFINED;\n    } else {\n      rewireData[variableName] = value;\n    }\n    return function () {\n      _reset__(variableName);\n    };\n  }\n}\nfunction _reset__(variableName) {\n  let rewireData = _getRewiredData__();\n  delete rewireData[variableName];\n  if (Object.keys(rewireData).length == 0) {\n    delete _getRewireRegistry__()[_getRewireModuleId__];\n  }\n  if (_exports_to_reset__.has(variableName)) {\n    exports[variableName] = _exports_to_reset__.get(variableName);\n    _exports_to_reset__.delete(variableName);\n  }\n}\nfunction _with__(object) {\n  let rewireData = _getRewiredData__();\n  var rewiredVariableNames = Object.keys(object);\n  var previousValues = {};\n  function reset() {\n    rewiredVariableNames.forEach(function (variableName) {\n      rewireData[variableName] = previousValues[variableName];\n    });\n  }\n  return function (callback) {\n    rewiredVariableNames.forEach(function (variableName) {\n      previousValues[variableName] = rewireData[variableName];\n      rewireData[variableName] = object[variableName];\n    });\n    let result = callback();\n    if (!!result && typeof result.then == 'function') {\n      result.then(reset).catch(reset);\n    } else {\n      reset();\n    }\n    return result;\n  };\n}\nlet _typeOfOriginalExport = typeof appUrl;\nfunction addNonEnumerableProperty(name, value) {\n  Object.defineProperty(appUrl, name, {\n    value: value,\n    enumerable: false,\n    configurable: true\n  });\n}\nif ((_typeOfOriginalExport === 'object' || _typeOfOriginalExport === 'function') && Object.isExtensible(appUrl)) {\n  addNonEnumerableProperty('__get__', _get__);\n  addNonEnumerableProperty('__GetDependency__', _get__);\n  addNonEnumerableProperty('__Rewire__', _set__);\n  addNonEnumerableProperty('__set__', _set__);\n  addNonEnumerableProperty('__reset__', _reset__);\n  addNonEnumerableProperty('__ResetDependency__', _reset__);\n  addNonEnumerableProperty('__with__', _with__);\n  addNonEnumerableProperty('__RewireAPI__', _RewireAPI__);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/appUrl.ts_uiInfrastructure\n");

/***/ })

}]);