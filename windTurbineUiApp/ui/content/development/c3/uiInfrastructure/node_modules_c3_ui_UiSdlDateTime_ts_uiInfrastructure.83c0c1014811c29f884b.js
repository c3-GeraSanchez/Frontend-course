"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkjs_webpack_c3_client_node"] = self["webpackChunkjs_webpack_c3_client_node"] || []).push([["node_modules_c3_ui_UiSdlDateTime_ts_uiInfrastructure"],{

/***/ "./node_modules/@c3/ui/UiSdlDateTime.ts_uiInfrastructure":
/*!**********************************************!*\
  !*** ./node_modules/@c3/ui/UiSdlDateTime.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __GetDependency__: () => (/* binding */ _get__),\n/* harmony export */   __ResetDependency__: () => (/* binding */ _reset__),\n/* harmony export */   __RewireAPI__: () => (/* binding */ _RewireAPI__),\n/* harmony export */   __Rewire__: () => (/* binding */ _set__),\n/* harmony export */   __get__: () => (/* binding */ _get__),\n/* harmony export */   __set__: () => (/* binding */ _set__),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaultValues: () => (/* binding */ defaultValues)\n/* harmony export */ });\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/*\n * Copyright 2009-2024 C3 AI (www.c3.ai). All Rights Reserved.\n * This material, including without limitation any software, is the confidential trade secret and proprietary\n * information of C3 and its licensors. Reproduction, use and/or distribution of this material in any form is\n * strictly prohibited except as set forth in a written license agreement with C3 and/or its authorized distributors.\n * This material may be covered by one or more patents or pending patent applications.\n */\n\n/**\n * Adapted from Datetime_client.js. This should be included in a module that is both importable by uiInfrastructure\n * and uiSdlReact.\n */\nclass DateTime {\n  constructor(...args) {\n    _defineProperty(this, \"_ms\", void 0);\n    _defineProperty(this, \"_offsetMinutes\", void 0);\n    _defineProperty(this, \"withTimeAtStartOfDay\", this.toDateMidnight);\n    _defineProperty(this, \"toJSON\", this.serialize);\n    /**\n     * If this is called like `const dt = DateTime(\"2000-01-01\")`, it's casting\n     *\"2000-01-01\" to a DateTime. In that case, just create a new DateTime object with\n     * the same arguments and return that.\n     */\n    if (!(this instanceof _get__(\"DateTime\"))) {\n      // Since it's a constructor, we cannot use `apply` as we would otherwise\n      const dt = Object.create(_get__(\"DateTime\").prototype);\n      const result = _get__(\"DateTime\").apply(dt, args);\n      return typeof result === 'object' ? result : dt;\n    }\n    if (arguments.length === 0) {\n      const now = new Date();\n      this._ms = now.getTime();\n      this._offsetMinutes = -1 * now.getTimezoneOffset();\n    } else if (args.length < 3) {\n      const fstArg = args[0];\n      switch (typeof fstArg) {\n        case 'number':\n          this._ms = fstArg;\n          this._offsetMinutes = args[1];\n          break;\n        case 'string':\n          return _get__(\"DateTime\").deserialize(fstArg);\n        default:\n          if (fstArg instanceof _get__(\"DateTime\")) {\n            // Copy the underlying date\n            this._ms = fstArg._ms;\n            this._offsetMinutes = fstArg._offsetMinutes;\n          } else if (fstArg instanceof Date) {\n            // Convert into UTC equivalent (throw away offset, because we don't know if it's deliberate or not)\n            this._ms = fstArg.getTime();\n          } else {\n            throw new Error('Invalid DateTime or Date');\n          }\n          break;\n      }\n    } else {\n      const year = args[0];\n      const month = args[1];\n      const day = args[2];\n      const hour = args[3] || 0;\n      const min = args[4] || 0;\n      const sec = args[5] || 0;\n      const ms = args[6] || 0;\n      const offsetMinutes = args[7];\n      const date = new Date();\n      // Time must be before date so we don't switch days when clearing time\n      date.setUTCMilliseconds(ms);\n      date.setUTCSeconds(sec);\n      date.setUTCMinutes(min);\n      date.setUTCHours(hour);\n      date.setUTCFullYear(year);\n      if (date.getUTCDate() > day) {\n        /*\n         * If the current date has already passed the specified date, set the date first to account for going from a\n         * longer month to a specified shorter one\n         */\n        date.setUTCDate(day);\n        date.setUTCMonth(month);\n      } else {\n        // Else set the month first to account for going from current shorter month to specified longer month\n        date.setUTCMonth(month);\n        date.setUTCDate(day);\n      }\n      this._ms = date.getTime();\n      if (offsetMinutes !== undefined) {\n        this._offsetMinutes = offsetMinutes;\n        /*\n         * Shift the date by the offsetMinutes, because new Date(\"2000-01-01T00:00:00-02:00\") would,\n         * in a browser in CET, become \"2000-01-01T03:00:00+01:00\", and we want date to have the correct\n         * getTime() for the date specified\n         */\n        this._ms -= this._offsetMinutes * 60 * 1000;\n      }\n    }\n  }\n\n  // #region ACCESSING\n  year() {\n    return _get__(\"DateTime\")._adjustedDate(this).getUTCFullYear();\n  }\n\n  // @deprecated\n  getYear() {\n    return this.year();\n  }\n  yearOfCentury() {\n    return Math.abs(_get__(\"DateTime\")._adjustedDate(this).getUTCFullYear() % 100);\n  }\n\n  // @deprecated\n  getYearOfCentury() {\n    return this.yearOfCentury();\n  }\n  monthOfYear() {\n    return _get__(\"DateTime\")._adjustedDate(this).getUTCMonth() + 1;\n  }\n\n  // @deprecated\n  getMonthOfYear() {\n    return this.monthOfYear();\n  }\n  dayOfYear() {\n    const date = _get__(\"DateTime\")._adjustedDate(this);\n    date.setMinutes(date.getMinutes() + date.getTimezoneOffset());\n    const jan1 = new Date(date.getFullYear(), _get__(\"DateTime\").JAN, 1);\n    return Math.floor((date.getTime() - jan1.getTime()) / (24 * 60 * 60 * 1000)) + 1;\n  }\n\n  // @deprecated\n  getDayOfYear() {\n    return this.dayOfYear();\n  }\n  dayOfMonth() {\n    return _get__(\"DateTime\")._adjustedDate(this).getUTCDate();\n  }\n\n  // @deprecated\n  getDayOfMonth() {\n    return this.dayOfMonth();\n  }\n  dayOfWeek() {\n    const day = this.toDate().getUTCDay();\n    return day === 0 ? 7 : day;\n  }\n\n  // @deprecated\n  getDayOfWeek() {\n    return this.dayOfWeek();\n  }\n  hourOfDay() {\n    return _get__(\"DateTime\")._adjustedDate(this).getUTCHours();\n  }\n\n  // @deprecated\n  getHourOfDay() {\n    return this.hourOfDay();\n  }\n  minuteOfHour() {\n    return _get__(\"DateTime\")._adjustedDate(this).getUTCMinutes();\n  }\n\n  // @deprecated\n  getMinuteOfHour() {\n    return this.minuteOfHour();\n  }\n  minuteOfDay() {\n    const date = _get__(\"DateTime\")._adjustedDate(this);\n    return date.getUTCHours() * 60 + date.getUTCMinutes();\n  }\n\n  // @deprecated\n  getMinuteOfDay() {\n    return this.minuteOfDay();\n  }\n  secondOfMinute() {\n    return _get__(\"DateTime\")._adjustedDate(this).getUTCSeconds();\n  }\n\n  // @deprecated\n  getSecondOfMinute() {\n    return this.secondOfMinute();\n  }\n  secondOfDay() {\n    const date = _get__(\"DateTime\")._adjustedDate(this);\n    return (date.getUTCHours() * 60 + date.getUTCMinutes()) * 60 + date.getUTCSeconds();\n  }\n\n  // @deprecated\n  getSecondOfDay() {\n    return this.secondOfDay();\n  }\n  millisOfDay() {\n    return this.secondOfDay() * 1000 + this.millisOfSecond();\n  }\n\n  // @deprecated\n  getMillisOfDay() {\n    return this.millisOfDay();\n  }\n  millisOfSecond() {\n    return _get__(\"DateTime\")._adjustedDate(this).getUTCMilliseconds();\n  }\n\n  // @deprecated\n  getMillisOfSecond() {\n    return this.millisOfSecond();\n  }\n  weekyear() {\n    const date = _get__(\"DateTime\")._adjustedDate(this);\n    // ISO 8601 states that week 1 is the week with the first thursday of that year.\n    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 6) % 7 + 3);\n    return date.getUTCFullYear();\n  }\n\n  // @deprecated\n  getWeekyear() {\n    return this.weekyear();\n  }\n  weekOfWeekyear() {\n    const date = _get__(\"DateTime\")._adjustedDate(this);\n    // ISO week date weeks start on monday\n    const monday = (date.getUTCDay() + 6) % 7;\n\n    // ISO 8601 states that week 1 is the week with the first thursday of that year.\n    date.setUTCDate(date.getUTCDate() - monday + 3);\n    const firstThursdayMS = date.getTime();\n\n    // Set to to january first\n    date.setUTCMonth(_get__(\"DateTime\").JAN, 1);\n    // Not a thursday? Correct the date to the next thursday\n    if (date.getUTCDay() != 4) {\n      date.setUTCMonth(_get__(\"DateTime\").JAN, 1 + (4 - date.getUTCDay() + 7) % 7);\n    }\n    return 1 + Math.ceil((firstThursdayMS - date.getTime()) / (7 * 24 * 3600 * 1000));\n  }\n\n  // @deprecated\n  getWeekOfWeekyear() {\n    return this.weekOfWeekyear();\n  }\n  millis() {\n    const date = this.toDate();\n    return date.getTime();\n  }\n\n  // @deprecated\n  getMillis() {\n    return this.millis();\n  }\n  zoneOffsetMinutes() {\n    return this._offsetMinutes || 0;\n  }\n\n  // @deprecated\n  getZoneOffsetMinutes() {\n    return this.zoneOffsetMinutes();\n  }\n  hasZone() {\n    return this._offsetMinutes != null;\n  }\n  valueOf() {\n    return this.millis();\n  }\n\n  // #endregion ACCESSING\n\n  // #region CONVERSION\n  toDate() {\n    return new Date(this._ms);\n  }\n  toDateMidnight() {\n    const dateTime = new (_get__(\"DateTime\"))(this);\n    const date = dateTime.toDate();\n    date.setUTCMilliseconds(0);\n    date.setUTCSeconds(0);\n    date.setUTCMinutes(0);\n    date.setUTCHours(0);\n    date.setUTCFullYear(dateTime.year());\n    date.setUTCMonth(dateTime.monthOfYear() - 1);\n    date.setUTCDate(dateTime.dayOfMonth());\n    dateTime._ms = date.getTime() - this.zoneOffsetMinutes() * 60 * 1000;\n    return dateTime;\n  }\n  clone() {\n    return new (_get__(\"DateTime\"))(this);\n  }\n  // #endregion CONVERSION\n\n  // #region PLUS APIs\n  plusMillis(millis) {\n    return new (_get__(\"DateTime\"))(this._ms + millis, this._offsetMinutes);\n  }\n  plusSeconds(seconds) {\n    return new (_get__(\"DateTime\"))(this._ms + seconds * 1000, this._offsetMinutes);\n  }\n  plusMinutes(minutes) {\n    return new (_get__(\"DateTime\"))(this._ms + minutes * 60 * 1000, this._offsetMinutes);\n  }\n  plusHours(hours) {\n    return new (_get__(\"DateTime\"))(this._ms + hours * 60 * 60 * 1000, this._offsetMinutes);\n  }\n  plusDays(days) {\n    return new (_get__(\"DateTime\"))(this._ms + days * 24 * 60 * 60 * 1000, this._offsetMinutes);\n  }\n  plusWeeks(weeks) {\n    return this.plusDays(7 * weeks);\n  }\n  plusMonths(months) {\n    const curMonth = this.monthOfYear();\n    const tgtYear = this.year() + Math.floor((curMonth - 1 + months) / 12);\n    let tgtMonth = (curMonth + months) % 12;\n    tgtMonth = tgtMonth <= 0 ? 11 + tgtMonth : tgtMonth - 1;\n    const daysInTarMonth = _get__(\"DateTime\").daysInMonth(tgtYear, tgtMonth);\n    const day = daysInTarMonth <= this.dayOfMonth() ? daysInTarMonth : this.dayOfMonth();\n    return new (_get__(\"DateTime\"))(tgtYear, tgtMonth, day, this.hourOfDay(), this.minuteOfHour(), this.secondOfMinute(), this.millisOfSecond(), this.hasZone() ? this.zoneOffsetMinutes() : null);\n  }\n  plusYears(years) {\n    // Can't just add 365 days because of leap years\n    const date = this.toDate();\n    date.setFullYear(date.getFullYear() + years);\n    let dt = new (_get__(\"DateTime\"))(date.getTime(), this._offsetMinutes);\n    // Special case for going from Feb 29 of leap year to non-leap-year\n    if (_get__(\"DateTime\").isLeapYear(this.year()) && !_get__(\"DateTime\").isLeapYear(dt.year()) && this.monthOfYear() == 2 && this.dayOfMonth() == 29) {\n      dt = dt.plusDays(-1);\n    }\n    return dt;\n  }\n  plusIntervals(interval, count) {\n    if (interval == null || interval === '' || typeof interval != 'string') throw new Error(\"Missing interval value (expected 'day', 'hour', etc). 'InvalidInterval'\");\n    if (count == null) count = 1;\n    switch (interval.toString().toLowerCase()) {\n      case 'ms':\n      case 'milli':\n      case 'millis':\n        return this.plusMillis(count);\n      case 's':\n      case 'second':\n      case 'seconds':\n        return this.plusSeconds(count);\n      case 'm':\n      case 'mi':\n      case 'minute':\n      case 'minutes':\n        return this.plusMinutes(count);\n      case 'fm':\n      case 'five_minute':\n      case 'five_minutes':\n      case 'fiveminute':\n      case 'fiveminutes':\n        return this.plusMinutes(count * 5);\n      case 'tm':\n      case 'ten_minute':\n      case 'ten_minutes':\n      case 'tenminute':\n      case 'tenminutes':\n        return this.plusMinutes(count * 10);\n      case 'qh':\n      case 'quarter_hour':\n      case 'quarter_hours':\n      case 'quarterhour':\n      case 'quarterhours':\n        return this.plusMinutes(count * 15);\n      case 'hh':\n      case 'half_hour':\n      case 'half_hours':\n      case 'halfhour':\n      case 'halfhours':\n        return this.plusMinutes(count * 30);\n      case 'h':\n      case 'hour':\n      case 'hours':\n        return this.plusHours(count);\n      case 'd':\n      case 'day':\n      case 'days':\n        return this.plusDays(count);\n      case 'w':\n      case 'week':\n      case 'weeks':\n        return this.plusWeeks(count);\n      case 'month':\n      case 'months':\n        return this.plusMonths(count);\n      case 'y':\n      case 'year':\n      case 'years':\n        return this.plusYears(count);\n      default:\n        throw new Error(\"Invalid interval '\" + interval.toString() + \"' (expected 'day', 'hour', etc).\");\n    }\n  }\n  // #endregion PLUS APIs\n\n  // #region WITH APIs\n  withDate(year, monthOfYear, dayOfMonth) {\n    const copy = new (_get__(\"DateTime\"))(this);\n    const date = copy.toDate();\n    const tzOffset = date.getTimezoneOffset();\n    date.setMinutes(date.getMinutes() + tzOffset);\n    date.setFullYear(year);\n    date.setDate(dayOfMonth);\n    _get__(\"DateTime\")._setMonth(date, monthOfYear);\n    date.setMinutes(date.getMinutes() - tzOffset);\n    copy._ms = date.getTime();\n    return copy;\n  }\n  withDayOfMonth(dayOfMonth) {\n    const copy = new (_get__(\"DateTime\"))(this);\n    const date = copy.toDate();\n    date.setDate(dayOfMonth);\n    copy._ms = date.getTime();\n    return copy;\n  }\n  withDayOfWeek(dayOfWeek) {\n    const copy = new (_get__(\"DateTime\"))(this);\n    const date = copy.toDate();\n    const tzOffset = date.getTimezoneOffset();\n    date.setMinutes(date.getMinutes() + tzOffset);\n    date.setDate(this.dayOfMonth() - date.getDay() + dayOfWeek);\n    date.setMinutes(date.getMinutes() - tzOffset);\n    copy._ms = date.getTime();\n    return copy;\n  }\n  withDayOfYear(dayOfYear) {\n    let monthNum = 0;\n    let daysLeft = dayOfYear;\n    const yr = this.year();\n    for (let i = 0; i < 12; i++) {\n      const monthDays = _get__(\"DateTime\").daysInMonth(yr, i);\n      if (daysLeft <= monthDays) {\n        monthNum = i;\n        break;\n      }\n      daysLeft -= monthDays;\n    }\n    if (daysLeft > 31) {\n      throw new Error(dayOfYear + ' is not valid dayOfYear.');\n    }\n    return new (_get__(\"DateTime\"))(yr, monthNum, daysLeft, this.hourOfDay(), this.minuteOfHour(), this.secondOfMinute(), this.millisOfSecond(), this.hasZone() ? this.zoneOffsetMinutes() : null);\n  }\n  withHourOfDay(hour) {\n    const copy = new (_get__(\"DateTime\"))(this);\n    const date = copy.toDate();\n    date.setHours(hour);\n    copy._ms = date.getTime();\n    return copy;\n  }\n  withMillis(newMillis) {\n    const copy = new (_get__(\"DateTime\"))(this);\n    const date = copy.toDate();\n    date.setTime(newMillis);\n    copy._ms = date.getTime();\n    return copy;\n  }\n  withMillisOfSecond(millis) {\n    const copy = new (_get__(\"DateTime\"))(this);\n    const date = copy.toDate();\n    date.setMilliseconds(millis);\n    copy._ms = date.getTime();\n    return copy;\n  }\n  withMinuteOfHour(minute) {\n    const copy = new (_get__(\"DateTime\"))(this);\n    const date = copy.toDate();\n    const tzOffset = date.getTimezoneOffset();\n    date.setMinutes(date.getMinutes() + tzOffset);\n    date.setMinutes(minute);\n    date.setMinutes(date.getMinutes() - tzOffset);\n    copy._ms = date.getTime();\n    return copy;\n  }\n  withMonthOfYear(monthOfYear) {\n    const month = (monthOfYear - 1) % 12;\n    const daysInTarMonth = _get__(\"DateTime\").daysInMonth(this.year(), month);\n    const day = daysInTarMonth <= this.dayOfMonth() ? daysInTarMonth : this.dayOfMonth();\n    return new (_get__(\"DateTime\"))(this.year(), month, day, this.hourOfDay(), this.minuteOfHour(), this.secondOfMinute(), this.millisOfSecond(), this.hasZone() ? this.zoneOffsetMinutes() : null);\n  }\n\n  /**\n   * This function should only be used when the timezone is the user's local timezone.\n   * When we update the month within a year, we have to take into account that the timezone may have changed (daylight savings).\n   *\n   * @param monthOfYear The month we are changing to\n   * @param offsetMinutes The new offset of the new timezone\n   * @returns\n   */\n  withMonthOfYearNewOffset(monthOfYear, offsetMinutes) {\n    const month = (monthOfYear - 1) % 12;\n    const daysInTarMonth = _get__(\"DateTime\").daysInMonth(this.year(), month);\n    const day = daysInTarMonth <= this.dayOfMonth() ? daysInTarMonth : this.dayOfMonth();\n    return new (_get__(\"DateTime\"))(this.year(), month, day, this.hourOfDay(), this.minuteOfHour(), this.secondOfMinute(), this.millisOfSecond(), this.hasZone() ? offsetMinutes : null);\n  }\n  withSecondOfMinute(second) {\n    const copy = new (_get__(\"DateTime\"))(this);\n    const date = copy.toDate();\n    date.setSeconds(second);\n    copy._ms = date.getTime();\n    return copy;\n  }\n  withTime(hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond) {\n    const copy = new (_get__(\"DateTime\"))(this);\n    const date = copy.toDate();\n    const tzOffset = date.getTimezoneOffset();\n    date.setMinutes(date.getMinutes() + tzOffset);\n    date.setHours(hourOfDay);\n    date.setMinutes(minuteOfHour);\n    date.setSeconds(secondOfMinute);\n    date.setMilliseconds(millisOfSecond);\n    date.setMinutes(date.getMinutes() - tzOffset);\n    copy._ms = date.getTime();\n    return copy;\n  }\n  withYear(year) {\n    const copy = new (_get__(\"DateTime\"))(this);\n    const date = copy.toDate();\n    const tzOffset = date.getTimezoneOffset();\n    date.setMinutes(date.getMinutes() + tzOffset);\n    date.setFullYear(year);\n    date.setMinutes(date.getMinutes() - tzOffset);\n    copy._ms = date.getTime();\n    return copy;\n  }\n  withZoneOffsetMinutes(offsetMinutes) {\n    const copy = new (_get__(\"DateTime\"))(this.millis(), offsetMinutes);\n    return copy;\n  }\n  // #endregion WITH APIs\n\n  // #region WITHOUT APIs\n  withoutZone() {\n    return new (_get__(\"DateTime\"))(this.millis(), null);\n  }\n  withoutMillis() {\n    return new (_get__(\"DateTime\"))(this.millisOfSecond());\n  }\n  // #endregion WITHOUT APIs\n\n  // #region COMPARE\n  compareTo(dateTime) {\n    const ms = dateTime instanceof _get__(\"DateTime\") ? dateTime.millis() : dateTime.getTime();\n    return this.millis() - ms;\n  }\n  isAfter(date) {\n    return this.compareTo(date) > 0;\n  }\n  isAfterNow() {\n    return this.compareTo(_get__(\"DateTime\").now()) > 0;\n  }\n  isBefore(date) {\n    return this.compareTo(date) < 0;\n  }\n  isBeforeNow() {\n    return this.compareTo(_get__(\"DateTime\").now()) < 0;\n  }\n  isEqual(date) {\n    return this.compareTo(date) === 0;\n  }\n  isEqualNow() {\n    return this.compareTo(_get__(\"DateTime\").now()) === 0;\n  }\n  // #endregion COMPARE\n\n  // #region SERIALIZE\n  serialize() {\n    return _get__(\"DateTime\")._pad(this.year(), 4) + '-' + _get__(\"DateTime\")._pad(this.monthOfYear()) + '-' + _get__(\"DateTime\")._pad(this.dayOfMonth()) + 'T' + _get__(\"DateTime\")._pad(this.hourOfDay()) + ':' + _get__(\"DateTime\")._pad(this.minuteOfHour()) + ':' + _get__(\"DateTime\")._pad(this.secondOfMinute()) + '.' + _get__(\"DateTime\")._pad(this.millisOfSecond(), 3) + _get__(\"DateTime\")._formatOffset(this._offsetMinutes, 'ZZ');\n  }\n  toString(format) {\n    if (format != null) return format.replace(/(\\\\)?(dd?d?d?|D|MM?M?M?|e|EE?E?E?|yy?y?y?|hh?|kk?|KK?|HH?|mm?|ss?|a|ZZ?|SS?S?)/g, m => {\n      if (m.charAt(0) === '\\\\') {\n        return m.replace('\\\\', '');\n      }\n      const h = this.hourOfDay();\n      switch (m) {\n        case 'hh':\n          return _get__(\"DateTime\")._pad(h < 13 ? h === 0 ? 12 : h : h - 12);\n        case 'h':\n          return h < 13 ? h === 0 ? 12 : h : h - 12;\n        case 'KK':\n          return _get__(\"DateTime\")._pad(h % 12);\n        case 'K':\n          return h % 12;\n        case 'HH':\n          return _get__(\"DateTime\")._pad(h);\n        case 'H':\n          return h;\n        case 'kk':\n          return _get__(\"DateTime\")._pad(h);\n        case 'k':\n          return h;\n        case 'mm':\n          return _get__(\"DateTime\")._pad(this.minuteOfHour());\n        case 'm':\n          return this.minuteOfHour();\n        case 'ss':\n          return _get__(\"DateTime\")._pad(this.secondOfMinute());\n        case 's':\n          return this.secondOfMinute();\n        case 'yyyy':\n        case 'yyy':\n        case 'y':\n          return _get__(\"DateTime\")._pad(this.year(), 4);\n        case 'yy':\n          return _get__(\"DateTime\")._pad(this.yearOfCentury());\n        case 'EEEE':\n          return ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][this.dayOfWeek()];\n        case 'EEE':\n        case 'EE':\n        case 'E':\n          return ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][this.dayOfWeek()];\n        case 'e':\n          return this.dayOfWeek();\n        case 'dd':\n          return _get__(\"DateTime\")._pad(this.dayOfMonth());\n        case 'd':\n          return this.dayOfMonth();\n        case 'D':\n          return this.dayOfYear();\n        case 'MMMM':\n          return ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'][this.monthOfYear() - 1];\n        case 'MMM':\n          return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][this.monthOfYear() - 1];\n        case 'MM':\n          return _get__(\"DateTime\")._pad(this.monthOfYear());\n        case 'M':\n          return this.monthOfYear();\n        case 'a':\n          return h < 12 ? 'AM' : 'PM';\n        case 'Z':\n        case 'ZZ':\n          return _get__(\"DateTime\")._formatOffset(this._offsetMinutes, m);\n        case 'SSS':\n        case 'SS':\n        case 'S':\n          return _get__(\"DateTime\")._pad(this.millisOfSecond(), 3).substring(0, m.length);\n        default:\n          return m;\n      }\n    });else return this.serialize();\n  }\n  // #endregion SERIALIZE\n\n  // #region Static functions\n  static deserialize(s) {\n    if (s == null) {\n      return null;\n    } else if (s instanceof _get__(\"DateTime\")) {\n      return s.clone();\n    } else if (typeof s != 'string') {\n      s = '' + s; // Make it a string\n    }\n    const matches = s.match(/^([+-]?\\d{4,})-(\\d{2})-(\\d{2})(T(\\d{2})?(:(\\d{2}))?(:(\\d{2}))?\\.?(\\d{3})?)?(Z|[-+]\\d{2}:\\d{2}|[-+]\\d{4}|[-+]\\d{2})?$/);\n    if (matches != null) {\n      const offset = matches[11];\n      let offsetMinutes;\n      if (offset === undefined) {\n        offsetMinutes = offset;\n      } else if (offset == 'Z') {\n        offsetMinutes = 0;\n      } else if (offset.length == 6) {\n        // +/-00:00\n        offsetMinutes = parseInt(offset.substring(1, 3)) * 60 + parseInt(offset.substring(4, 6));\n      } else if (offset.length == 5) {\n        // +/-0000\n        offsetMinutes = parseInt(offset.substring(1, 3)) * 60 + parseInt(offset.substring(3, 5));\n      } else if (offset.length == 3) {\n        // +/-00\n        offsetMinutes = parseInt(offset.substring(1, 3)) * 60;\n      }\n      if (offset !== undefined && offset[0] == '-') offsetMinutes *= -1;\n      return new (_get__(\"DateTime\"))(matches[1],\n      // Year\n      matches[2] - 1,\n      // Month\n      matches[3],\n      // Day\n      matches[5] ? matches[5] : 0,\n      // Hour\n      matches[7] ? matches[7] : 0,\n      // Minute\n      matches[9] ? matches[9] : 0,\n      // Second\n      matches[10] ? matches[10] : 0,\n      // Ms\n      offsetMinutes);\n    } else {\n      throw new Error(\"Invalid DateTime value '\" + s + \"' (expected ISO8601 format).\");\n    }\n  }\n  static fromString(s, from) {\n    let sign;\n    let period;\n    let interval;\n    let count;\n    let round;\n    let adjusted;\n    if (s == null) {\n      return null;\n    } else if (s instanceof _get__(\"DateTime\")) {\n      return s.clone();\n    } else if (typeof s != 'string') {\n      s = '' + s; // Make it a string\n    }\n    s = s.trim();\n    if (/^[-+]/.test(s)) {\n      // Offset\n      sign = s.substring(0, 1);\n      period = s.substring(1);\n      const i = period.indexOf('@');\n      if (i > 0) {\n        round = period.substring(i + 1).trim();\n        period = period.substring(0, i).trim();\n      }\n      if (/^\\d/.test(period)) {\n        count = parseInt(period.replace(/[^\\d].*$/, ''));\n        interval = period.replace(/^\\d*\\s*/, '');\n      } else {\n        count = 1;\n        interval = period;\n      }\n      if (from == null) from = _get__(\"DateTime\").now();\n      adjusted = from.plusIntervals(interval, sign == '+' ? count : -count);\n      if (round != null) {\n        adjusted = adjusted.clone();\n        const date = adjusted.toDate();\n        switch (round.toLowerCase()) {\n          case 'y':\n          case 'year':\n          case 'years':\n            date.setMonth(0);\n          /* Falls through */\n\n          case 'month':\n          case 'months':\n            date.setDate(1);\n          /* Falls through */\n\n          case 'd':\n          case 'day':\n          case 'days':\n            date.setHours(0);\n          /* Falls through */\n\n          case 'h':\n          case 'hour':\n          case 'hours':\n            date.setMinutes(0);\n          /* Falls through */\n\n          case 'm':\n          case 'mi':\n          case 'minute':\n          case 'minutes':\n            date.setSeconds(0);\n          /* Falls through */\n\n          case 's':\n          case 'second':\n          case 'seconds':\n            date.setMilliseconds(0);\n            break;\n          default:\n            throw new Error(\"Invalid interval '\" + round + \"' to round (expected 'day', 'hour', etc).\");\n        }\n        adjusted._ms = date.getTime();\n      }\n      return adjusted;\n    } else {\n      // Absolute value\n      return _get__(\"DateTime\").deserialize(s);\n    }\n  }\n  static parse(str, format) {\n    if (str instanceof _get__(\"DateTime\")) return str.clone();\n    // Return new DateTimeParser(format).parse(str);\n  }\n  static isDateFormat(str) {\n    try {\n      return _get__(\"DateTime\").fromString(str) instanceof _get__(\"DateTime\");\n    } catch (_error) {\n      return false;\n    }\n  }\n  static isDateFormatArray(strArray, allowAll = false) {\n    return strArray.every(v => {\n      try {\n        return allowAll && v === undefined || _get__(\"DateTime\").fromString(v) instanceof _get__(\"DateTime\");\n      } catch (_e) {\n        return false;\n      }\n    });\n  }\n  static now() {\n    return new (_get__(\"DateTime\"))();\n  }\n  static isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n  }\n  static daysInMonth(year, month) {\n    return [31, _get__(\"DateTime\").isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];\n  }\n  static dateDiff(date1, date2, unit) {\n    let diff;\n    if (unit != 'MONTH' && unit != 'YEAR') {\n      let div;\n      switch (unit) {\n        case 'MILLIS':\n          div = 1;\n          break;\n        case 'SECOND':\n          div = 1000;\n          break;\n        case 'MINUTE':\n          div = 60 * 1000;\n          break;\n        case 'FIVE_MINUTE':\n          div = 5 * 60 * 1000;\n          break;\n        case 'TEN_MINUTE':\n          div = 10 * 60 * 1000;\n          break;\n        case 'QUARTER_HOUR':\n          div = 15 * 60 * 1000;\n          break;\n        case 'HALF_HOUR':\n          div = 30 * 60 * 1000;\n          break;\n        case 'HOUR':\n          div = 60 * 60 * 1000;\n          break;\n        case 'DAY':\n        case null:\n        case undefined:\n          div = 24 * 60 * 60 * 1000;\n          break;\n        case 'WEEK':\n          div = 7 * 24 * 60 * 60 * 1000;\n      }\n      diff = Math.floor(Math.abs(date2.millis() - date1.millis()) / div);\n      if (date1.isAfter(date2)) {\n        diff *= -1;\n      }\n    } else if (unit == 'MONTH') {\n      let months;\n      months = (date2.year() - date1.year()) * 12;\n      months -= date1.monthOfYear();\n      months += date2.monthOfYear();\n      diff = months;\n    } else if (unit == 'YEAR') {\n      diff = date2.year() - date1.year();\n    }\n    return diff;\n  }\n\n  // #region private class functions\n\n  /**\n   * Calling new Date(\"Dec 31\").setMonth(11) will give Dec 1 (since there are only 30 days in November)\n   * But we need it to produce Nov 30.\n   *\n   * @param date\n   *           The date that is mutated.\n   * @param month\n   *           The value to which the month is being set. If it's greater than 12, that means a future year. If\n   *           it's negative, that means in the past. If it's smaller than negative 12, it's more than a year in\n   *           the past.\n   */\n  static _setMonth(date, month) {\n    let utcDayOfMonth = date.getUTCDate();\n    let monthOfYear = month % 12;\n    // % gives us the month of the year, but -14 % 12 = -2 which must added to 12 to get the correct month, 10\n    if (monthOfYear < 0) monthOfYear += 12;\n    const daysInTarMonth = _get__(\"DateTime\").daysInMonth(date.getFullYear() + Math.floor(month / 12), monthOfYear);\n    const utcMonth = month;\n    /*\n     * If, in UTC, the date is already the first of the next month, but it's not yet in local timezone,\n     * setUTCMonth will require a month later\n     */\n    if (date.getUTCDate() === 1 && date.getDate() == _get__(\"DateTime\").daysInMonth(date.getFullYear(), date.getMonth()) && (date.getUTCHours() > 0 || date.getUTCMinutes() > 0 || date.getUTCSeconds() > 0 || date.getUTCMilliseconds() > 0) && date.getUTCHours() < Math.abs(date.getTimezoneOffset() / 60)) {\n      /*\n       * In case we have Jun 30 local, rolling over into Jul 1 utc, and the target month is July\n       * we actually want to end up with Jul 30 local which is Jul 31 UTC, not Aug 1 UTC\n       */\n      if (_get__(\"DateTime\").daysInMonth(date.getFullYear(), date.getMonth()) < daysInTarMonth) {\n        utcDayOfMonth = _get__(\"DateTime\").daysInMonth(date.getFullYear(), date.getMonth()) + 1;\n      }\n    }\n\n    // Since we're shifting the date by utc time, make sure the target date is set to the same utc hour.\n    const oldUtcHours = date.getUTCHours();\n    // Set to the first, so we don't have days-in-month mismatch issues\n    date.setUTCDate(1);\n    // Update the month\n    date.setUTCMonth(utcMonth);\n    // Set the date back to what it was (or to the end of the month if there fewer days in the target month)\n    date.setUTCDate(daysInTarMonth >= utcDayOfMonth ? utcDayOfMonth : daysInTarMonth);\n    date.setUTCHours(oldUtcHours);\n  }\n  static _adjustedDate(dt) {\n    /*\n     * _adjustedDate gets called in a lot of places but only gets an updated value if _ms or _offsetMinutes changes.\n     * Here we \"cache\" the value and only update if one of those two values gets changed.\n     */\n    if (dt._ms === dt.adjustedMs && dt._offsetMinutes === dt.adjustedOffsetMinutes) {\n      return dt.adjusted;\n    }\n    const cp = dt.toDate();\n    const tzOffsetBefore = cp.getTimezoneOffset();\n    cp.setMinutes(cp.getMinutes() + dt.zoneOffsetMinutes());\n    const tzOffsetAfter = cp.getTimezoneOffset();\n    if (tzOffsetBefore - tzOffsetAfter !== 0) {\n      // In this case, we can use setUTCHours because the DST shift will always be a whole hour\n      cp.setUTCHours(cp.getUTCHours() + (tzOffsetBefore - tzOffsetAfter) / 60);\n    }\n    dt.adjusted = cp;\n    dt.adjustedMs = dt._ms;\n    dt.adjustedOffsetMinutes = dt._offsetMinutes;\n    return cp;\n  }\n  static _pad(s, l) {\n    if (!l) {\n      l = 2;\n    }\n    s = String(s);\n    // ISO8601 requires that the years greater than 9999 be preceded by \"+\", and less than 0 be preceded by \"-\"\n    let sign = '';\n    if (s[0] === '-' || s[0] === '+') {\n      sign = s[0];\n      s = s.substring(1);\n    } else if (s >= 10000) {\n      sign = '+';\n    }\n    return sign + (s.length < l ? ('000' + s).slice(l * -1) : s);\n  }\n  static _formatOffset(offsetMinutes, format) {\n    let offset = 'Z';\n    if (offsetMinutes == null) {\n      offset = '';\n    } else if (offsetMinutes !== 0) {\n      offset = (offsetMinutes < 0 ? '-' : '+') + _get__(\"DateTime\")._pad(Math.floor(Math.abs(offsetMinutes) / 60)) + (format == 'ZZ' ? ':' : '') + _get__(\"DateTime\")._pad(Math.abs(offsetMinutes) % 60);\n    }\n    return offset;\n  }\n}\n\n// #endregion private class functions\n_defineProperty(_get__(\"DateTime\"), \"JAN\", 0);\n_defineProperty(_get__(\"DateTime\"), \"FEB\", 1);\n_defineProperty(_get__(\"DateTime\"), \"MAR\", 2);\n_defineProperty(_get__(\"DateTime\"), \"APR\", 3);\n_defineProperty(_get__(\"DateTime\"), \"MAY\", 4);\n_defineProperty(_get__(\"DateTime\"), \"JUN\", 5);\n_defineProperty(_get__(\"DateTime\"), \"JUL\", 6);\n_defineProperty(_get__(\"DateTime\"), \"AUG\", 7);\n_defineProperty(_get__(\"DateTime\"), \"SEP\", 8);\n_defineProperty(_get__(\"DateTime\"), \"OCT\", 9);\n_defineProperty(_get__(\"DateTime\"), \"NOV\", 10);\n_defineProperty(_get__(\"DateTime\"), \"DEC\", 11);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_get__(\"DateTime\"));\nconst defaultValues = {};\nfunction _getGlobalObject() {\n  try {\n    if (!!__webpack_require__.g) {\n      return __webpack_require__.g;\n    }\n  } catch (e) {\n    try {\n      if (!!window) {\n        return window;\n      }\n    } catch (e) {\n      return this;\n    }\n  }\n}\n;\nvar _RewireModuleId__ = null;\nfunction _getRewireModuleId__() {\n  if (_RewireModuleId__ === null) {\n    let globalVariable = _getGlobalObject();\n    if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {\n      globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0;\n    }\n    _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++;\n  }\n  return _RewireModuleId__;\n}\nfunction _getRewireRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__;\n}\nfunction _getRewireExportsRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__;\n}\nconst _sync_internal_state_with_exports__ = false;\nconst _exports_to_reset__ = new Map();\nfunction _record_export_to_reset__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  if (!_exports_to_reset__.has(variableName)) {\n    _exports_to_reset__.set(variableName, value);\n  }\n}\nfunction _restore_exports__() {\n  const entries = _exports_to_reset__.entries();\n  for (const [variableName, value] of entries) {\n    exports[variableName] = value;\n  }\n  _exports_to_reset__.clear();\n}\nfunction _maybe_update_export__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  _record_export_to_reset__(variableName, exports[variableName]);\n  exports[variableName] = value;\n}\nfunction _getRewiredData__() {\n  let moduleId = _getRewireModuleId__();\n  let registry = _getRewireRegistry__();\n  let rewireData = registry[moduleId];\n  if (!rewireData) {\n    registry[moduleId] = Object.create(null);\n    rewireData = registry[moduleId];\n  }\n  let exportsRegistry = _getRewireExportsRegistry__();\n  if (!exportsRegistry[moduleId]) {\n    exportsRegistry[moduleId] = _restore_exports__;\n  }\n  return rewireData;\n}\n(function registerResetAll() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable['__rewire_reset_all__']) {\n    theGlobalVariable['__rewire_reset_all__'] = function () {\n      theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n      const exportsRegistry = _getRewireExportsRegistry__();\n      for (const restoreFunc of Object.values(exportsRegistry)) {\n        restoreFunc();\n      }\n      theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n    };\n  }\n})();\nvar INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';\nlet _RewireAPI__ = {};\n(function () {\n  function addPropertyToAPIObject(name, value) {\n    Object.defineProperty(_RewireAPI__, name, {\n      value: value,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  addPropertyToAPIObject('__get__', _get__);\n  addPropertyToAPIObject('__GetDependency__', _get__);\n  addPropertyToAPIObject('__Rewire__', _set__);\n  addPropertyToAPIObject('__set__', _set__);\n  addPropertyToAPIObject('__reset__', _reset__);\n  addPropertyToAPIObject('__ResetDependency__', _reset__);\n  addPropertyToAPIObject('__with__', _with__);\n})();\nfunction _get__(variableName) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _get_original__(variableName);\n  } else {\n    var value = rewireData[variableName];\n    if (value === INTENTIONAL_UNDEFINED) {\n      return undefined;\n    } else {\n      return value;\n    }\n  }\n}\nfunction _get_original__(variableName) {\n  switch (variableName) {\n    case \"DateTime\":\n      return DateTime;\n  }\n  return undefined;\n}\nfunction _assign__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _set_original__(variableName, value);\n  } else {\n    _maybe_update_export__(variableName, value);\n    return rewireData[variableName] = value;\n  }\n}\nfunction _set_original__(variableName, _value) {\n  switch (variableName) {}\n  return undefined;\n}\nfunction _update_operation__(operation, variableName, prefix) {\n  var oldValue = _get__(variableName);\n  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;\n  _assign__(variableName, newValue);\n  return prefix ? newValue : oldValue;\n}\nfunction _set__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (typeof variableName === 'object') {\n    Object.keys(variableName).forEach(function (name) {\n      rewireData[name] = variableName[name];\n    });\n    return function () {\n      Object.keys(variableName).forEach(function (name) {\n        _reset__(variableName);\n      });\n    };\n  } else {\n    _maybe_update_export__(variableName, value);\n    if (value === undefined) {\n      rewireData[variableName] = INTENTIONAL_UNDEFINED;\n    } else {\n      rewireData[variableName] = value;\n    }\n    return function () {\n      _reset__(variableName);\n    };\n  }\n}\nfunction _reset__(variableName) {\n  let rewireData = _getRewiredData__();\n  delete rewireData[variableName];\n  if (Object.keys(rewireData).length == 0) {\n    delete _getRewireRegistry__()[_getRewireModuleId__];\n  }\n  if (_exports_to_reset__.has(variableName)) {\n    exports[variableName] = _exports_to_reset__.get(variableName);\n    _exports_to_reset__.delete(variableName);\n  }\n}\nfunction _with__(object) {\n  let rewireData = _getRewiredData__();\n  var rewiredVariableNames = Object.keys(object);\n  var previousValues = {};\n  function reset() {\n    rewiredVariableNames.forEach(function (variableName) {\n      rewireData[variableName] = previousValues[variableName];\n    });\n  }\n  return function (callback) {\n    rewiredVariableNames.forEach(function (variableName) {\n      previousValues[variableName] = rewireData[variableName];\n      rewireData[variableName] = object[variableName];\n    });\n    let result = callback();\n    if (!!result && typeof result.then == 'function') {\n      result.then(reset).catch(reset);\n    } else {\n      reset();\n    }\n    return result;\n  };\n}\nlet _typeOfOriginalExport = typeof DateTime;\nfunction addNonEnumerableProperty(name, value) {\n  Object.defineProperty(DateTime, name, {\n    value: value,\n    enumerable: false,\n    configurable: true\n  });\n}\nif ((_typeOfOriginalExport === 'object' || _typeOfOriginalExport === 'function') && Object.isExtensible(DateTime)) {\n  addNonEnumerableProperty('__get__', _get__);\n  addNonEnumerableProperty('__GetDependency__', _get__);\n  addNonEnumerableProperty('__Rewire__', _set__);\n  addNonEnumerableProperty('__set__', _set__);\n  addNonEnumerableProperty('__reset__', _reset__);\n  addNonEnumerableProperty('__ResetDependency__', _reset__);\n  addNonEnumerableProperty('__with__', _with__);\n  addNonEnumerableProperty('__RewireAPI__', _RewireAPI__);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@c3/ui/UiSdlDateTime.ts_uiInfrastructure\n");

/***/ })

}]);