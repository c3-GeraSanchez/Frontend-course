"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkjs_webpack_c3_client_node"] = self["webpackChunkjs_webpack_c3_client_node"] || []).push([["node_modules_c3_ui_UiSdlConnected_ts_uiInfrastructure"],{

/***/ "./node_modules/@c3/ui/UiSdlConnected.ts_uiInfrastructure":
/*!***********************************************!*\
  !*** ./node_modules/@c3/ui/UiSdlConnected.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CURRENT: () => (/* binding */ CURRENT),\n/* harmony export */   INITIAL: () => (/* binding */ INITIAL),\n/* harmony export */   REDUX_NAMESPACE: () => (/* binding */ REDUX_NAMESPACE),\n/* harmony export */   __GetDependency__: () => (/* binding */ _get__),\n/* harmony export */   __ResetDependency__: () => (/* binding */ _reset__),\n/* harmony export */   __RewireAPI__: () => (/* binding */ _RewireAPI__),\n/* harmony export */   __Rewire__: () => (/* binding */ _set__),\n/* harmony export */   __get__: () => (/* binding */ _get__),\n/* harmony export */   __set__: () => (/* binding */ _set__),\n/* harmony export */   actionCreators: () => (/* binding */ actionCreators),\n/* harmony export */   convertToImmutable: () => (/* binding */ convertToImmutable),\n/* harmony export */   copyRequestArgumentsInState: () => (/* binding */ copyRequestArgumentsInState),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaultValues: () => (/* binding */ defaultValues),\n/* harmony export */   epics: () => (/* binding */ epics),\n/* harmony export */   getAllComponentDataSourceIds: () => (/* binding */ getAllComponentDataSourceIds),\n/* harmony export */   getCollectionDataSourceId: () => (/* binding */ getCollectionDataSourceId),\n/* harmony export */   getComponentIdFromComponentDataSource: () => (/* binding */ getComponentIdFromComponentDataSource),\n/* harmony export */   getConfigFromState: () => (/* binding */ getConfigFromState),\n/* harmony export */   getDataFromState: () => (/* binding */ getDataFromState),\n/* harmony export */   getDataSourceFromState: () => (/* binding */ getDataSourceFromState),\n/* harmony export */   getInitialConfigFromState: () => (/* binding */ getInitialConfigFromState),\n/* harmony export */   getPageParamFromState: () => (/* binding */ getPageParamFromState),\n/* harmony export */   getPageParamsFromState: () => (/* binding */ getPageParamsFromState),\n/* harmony export */   getParameterizedTypeFromConnectedType: () => (/* binding */ getParameterizedTypeFromConnectedType),\n/* harmony export */   getTunnelConfigurationFromState: () => (/* binding */ getTunnelConfigurationFromState),\n/* harmony export */   keyForConfig: () => (/* binding */ keyForConfig),\n/* harmony export */   reducers: () => (/* binding */ reducers),\n/* harmony export */   registerTriggersAction: () => (/* reexport safe */ _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_3__.registerTriggersAction),\n/* harmony export */   removeConfigInState: () => (/* binding */ removeConfigInState),\n/* harmony export */   renderInitialAction: () => (/* reexport safe */ _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_3__.renderInitialAction),\n/* harmony export */   setConfigInState: () => (/* binding */ setConfigInState),\n/* harmony export */   setDataInState: () => (/* binding */ setDataInState),\n/* harmony export */   setDataSourceInState: () => (/* binding */ setDataSourceInState),\n/* harmony export */   setInitialConfigInState: () => (/* binding */ setInitialConfigInState),\n/* harmony export */   setPageParamInState: () => (/* binding */ setPageParamInState),\n/* harmony export */   setTunnelConfigurationInState: () => (/* binding */ setTunnelConfigurationInState),\n/* harmony export */   triggersRegisterEffect: () => (/* reexport safe */ _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_3__.triggersRegisterEffect)\n/* harmony export */ });\n/* harmony import */ var immutable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! immutable */ \"webpack/sharing/consume/default/immutable_uiInfrastructure\");\n/* harmony import */ var immutable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(immutable__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_keys__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/keys */ \"webpack/sharing/consume/default/lodash/keys/lodash/keys_uiInfrastructure\");\n/* harmony import */ var lodash_keys__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_keys__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_filter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/filter */ \"webpack/sharing/consume/default/lodash/filter/lodash/filter_uiInfrastructure\");\n/* harmony import */ var lodash_filter__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_filter__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @c3/ui/UiSdlComponent */ \"webpack/sharing/consume/default/@c3/ui/UiSdlComponent_uiInfrastructure\");\n/* harmony import */ var _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_3__);\n/*\n * Copyright 2009-2024 C3 AI (www.c3.ai). All Rights Reserved.\n * This material, including without limitation any software, is the confidential trade secret and proprietary\n * information of C3 and its licensors. Reproduction, use and/or distribution of this material in any form is\n * strictly prohibited except as set forth in a written license agreement with C3 and/or its authorized distributors.\n * This material may be covered by one or more patents or pending patent applications.\n */\n\n\n\n\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nfunction getDataSourceIds(state) {\n  var _state$getIn;\n  return _get__(\"keys\")((_state$getIn = state.getIn(['metadata', 'dataSources', 'byId'])) === null || _state$getIn === void 0 ? void 0 : _state$getIn.toJS()) || [];\n}\n\n/**\n * An Immutable.js-wrapped version of C3's Redux state.\n */\n\nconst REDUX_NAMESPACE = 'components';\nconst CURRENT = 'metadata';\nconst INITIAL = 'initialMetadata';\nfunction convertToImmutable(value) {\n  if (value && value.type && value.type instanceof Function) {\n    value = _get__(\"fromJS\")(value.toJSON());\n  } else if (!_get__(\"Iterable\").isIterable(value)) {\n    value = _get__(\"fromJS\")(value);\n  }\n  return value;\n}\nfunction getInitialConfigFromState(componentId, state, dataPath) {\n  dataPath = dataPath || [];\n  return state.getIn(['initialMetadata', 'components', 'byId', componentId].concat(dataPath));\n}\nfunction setInitialConfigInState(componentId, state, dataPath, value) {\n  dataPath = dataPath || [];\n  // Force everything to Immutable\n  value = _get__(\"convertToImmutable\")(value);\n  return state.setIn(['initialMetadata', 'components', 'byId', componentId].concat(dataPath), value);\n}\nfunction getConfigFromState(componentId, state, dataPath) {\n  dataPath = dataPath || [];\n  return state.getIn(['metadata', 'components', 'byId', componentId].concat(dataPath));\n}\nfunction setConfigInState(componentId, state, dataPath, value) {\n  dataPath = dataPath || [];\n\n  // Force everything to Immutable\n  value = _get__(\"convertToImmutable\")(value);\n  return state.setIn(['metadata', 'components', 'byId', componentId].concat(dataPath), value);\n}\nfunction removeConfigInState(componentId, state, dataPath) {\n  dataPath = dataPath || [];\n  return state.deleteIn(['metadata', 'components', 'byId', componentId].concat(dataPath));\n}\nfunction keyForConfig(typeName, configPath, configId, singleton) {\n  if (configId) {\n    return [typeName, configId, configPath].join('.');\n  } else {\n    // Singleton configs store their full object\n    if (singleton) {\n      return typeName;\n    }\n\n    // Non-Singleton configs store each value by config path\n    return [typeName, configPath].join('.');\n  }\n}\nfunction getDataSourceFromState(componentId, state, dataPath) {\n  dataPath = dataPath || [];\n  return state.getIn(['metadata', 'dataSources', 'byId', componentId].concat(dataPath));\n}\nfunction setDataSourceInState(componentId, state, dataPath, value) {\n  dataPath = dataPath || [];\n\n  // Force everything to Immutable\n  value = _get__(\"convertToImmutable\")(value);\n  return state.setIn(['metadata', 'dataSources', 'byId', componentId].concat(dataPath), value);\n}\nfunction getCollectionDataSourceId(fieldName, componentId) {\n  /**\n   * This is the same implementation as helpers/getCollectionDataSourceId.js.  As a stand alone package\n   * uiInfrastructure does not have a dependency on uiSdlReact and cannot import this function from helpers.\n   * Fieldname that has dots in them would need to be replaced by underscores since dots would interfere with\n   * the action parser for the datasource.\n   */\n  fieldName = fieldName.split('.').join('_');\n  const componentIdSuffix = '_' + fieldName + '_ds';\n  return componentId + componentIdSuffix;\n}\nfunction getDataFromState(id, state, originalData) {\n  const pathInState = ['entities', originalData ? 'original' : 'modified', id];\n  return state.getIn(pathInState);\n}\nfunction setDataInState(id, state, value, originalData) {\n  const pathInState = ['entities', originalData ? 'original' : 'modified', id];\n  return state.setIn(pathInState, value);\n}\nfunction getAllComponentDataSourceIds(componentId, state) {\n  const dataSourceIds = _get__(\"getDataSourceIds\")(state);\n\n  // Regex to match 'SDL.TestGrid_dataCollection_ds'\n  const pattern = new RegExp(componentId + '_.*_ds');\n\n  // Filters all the data sources for ones that will match our componentId\n  return _get__(\"filter\")(dataSourceIds, id => pattern.test(id));\n}\nfunction getTunnelConfigurationFromState(state, siteId) {\n  return _get__(\"getConfigFromState\")(siteId, state, ['tunnelConfiguration']);\n}\nfunction setTunnelConfigurationInState(state, siteId, tunnelConfiguration) {\n  return _get__(\"setConfigInState\")(siteId, state, ['tunnelConfiguration'], tunnelConfiguration);\n}\nfunction getPageParamFromState(state, paramId) {\n  return state.getIn(['pageParams', paramId]);\n}\nfunction getPageParamsFromState(state) {\n  var _state$getIn2;\n  return ((_state$getIn2 = state.getIn(['pageParams'])) === null || _state$getIn2 === void 0 ? void 0 : _state$getIn2.toJS()) || {};\n}\nfunction setPageParamInState(state, paramId, value) {\n  // Force everything to Immutable\n  value = _get__(\"convertToImmutable\")(value);\n  return state.setIn(['pageParams', paramId], value);\n}\nfunction copyRequestArgumentsInState(componentId, state, fromDataSpec, toDataSpec, actionArgsToCopy) {\n  const fromDataSourceId = _get__(\"getCollectionDataSourceId\")(fromDataSpec, componentId);\n  const toDataSourceId = _get__(\"getCollectionDataSourceId\")(toDataSpec, componentId);\n  const additionalFilters = _get__(\"getDataSourceFromState\")(fromDataSourceId, state, ['additionalFilters']);\n  state = _get__(\"setDataSourceInState\")(toDataSourceId, state, ['additionalFilters'], additionalFilters);\n  const contextVars = _get__(\"getDataSourceFromState\")(fromDataSourceId, state, ['contextVars']);\n  state = _get__(\"setDataSourceInState\")(toDataSourceId, state, ['contextVars'], contextVars);\n  actionArgsToCopy === null || actionArgsToCopy === void 0 || actionArgsToCopy.forEach(actionArgInfo => {\n    const dataSourceFieldValue = _get__(\"getDataSourceFromState\")(fromDataSourceId, state, actionArgInfo.from);\n    // Default to fromPath if toPath is not supplied\n    state = _get__(\"setDataSourceInState\")(toDataSourceId, state, actionArgInfo.to || actionArgInfo.from, dataSourceFieldValue);\n  });\n  return state;\n}\n\n/**\n * Return the parameterized type from the connected type\n * example input: `UiConnected<UiDataGrid>`\n * example output: `UiDataGrid`\n * @param {string} connectedType\n * @return {string}\n */\nfunction getParameterizedTypeFromConnectedType(connectedType) {\n  return connectedType.match(/<(.+)>/)[1];\n}\n\n/**\n * Return the componentId without the generic suffix from dataSource part\n * example input: `SDLDemo.TableTypesNestedChecklist_dataSpec_ds`\n * example output: `SDLDemo.TableTypesNestedChecklist`\n * @param {string} dataSourceId\n * @return {string}\n */\nfunction getComponentIdFromComponentDataSource(dataSourceId) {\n  return dataSourceId ? dataSourceId === null || dataSourceId === void 0 ? void 0 : dataSourceId.split('_')[0] : '';\n}\n\n\n\n\n\n\nconst epics = {\n  ..._get__(\"epics0\")\n};\nconst reducers = {\n  ..._get__(\"reducers0\")\n};\nconst actionCreators = {\n  ..._get__(\"actionCreators0\")\n};\nconst defaultValues = {\n  \"triggersRegistered\": false,\n  \"wrapWithMetadataId\": false,\n  \"REDUX_NAMESPACE\": \"components\",\n  \"CURRENT\": \"metadata\",\n  \"INITIAL\": \"initialMetadata\"\n};\n\n\n\nfunction _getGlobalObject() {\n  try {\n    if (!!__webpack_require__.g) {\n      return __webpack_require__.g;\n    }\n  } catch (e) {\n    try {\n      if (!!window) {\n        return window;\n      }\n    } catch (e) {\n      return this;\n    }\n  }\n}\n;\nvar _RewireModuleId__ = null;\nfunction _getRewireModuleId__() {\n  if (_RewireModuleId__ === null) {\n    let globalVariable = _getGlobalObject();\n    if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {\n      globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0;\n    }\n    _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++;\n  }\n  return _RewireModuleId__;\n}\nfunction _getRewireRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__;\n}\nfunction _getRewireExportsRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__;\n}\nconst _sync_internal_state_with_exports__ = false;\nconst _exports_to_reset__ = new Map();\nfunction _record_export_to_reset__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  if (!_exports_to_reset__.has(variableName)) {\n    _exports_to_reset__.set(variableName, value);\n  }\n}\nfunction _restore_exports__() {\n  const entries = _exports_to_reset__.entries();\n  for (const [variableName, value] of entries) {\n    exports[variableName] = value;\n  }\n  _exports_to_reset__.clear();\n}\nfunction _maybe_update_export__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  _record_export_to_reset__(variableName, exports[variableName]);\n  exports[variableName] = value;\n}\nfunction _getRewiredData__() {\n  let moduleId = _getRewireModuleId__();\n  let registry = _getRewireRegistry__();\n  let rewireData = registry[moduleId];\n  if (!rewireData) {\n    registry[moduleId] = Object.create(null);\n    rewireData = registry[moduleId];\n  }\n  let exportsRegistry = _getRewireExportsRegistry__();\n  if (!exportsRegistry[moduleId]) {\n    exportsRegistry[moduleId] = _restore_exports__;\n  }\n  return rewireData;\n}\n(function registerResetAll() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable['__rewire_reset_all__']) {\n    theGlobalVariable['__rewire_reset_all__'] = function () {\n      theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n      const exportsRegistry = _getRewireExportsRegistry__();\n      for (const restoreFunc of Object.values(exportsRegistry)) {\n        restoreFunc();\n      }\n      theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n    };\n  }\n})();\nvar INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';\nlet _RewireAPI__ = {};\n(function () {\n  function addPropertyToAPIObject(name, value) {\n    Object.defineProperty(_RewireAPI__, name, {\n      value: value,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  addPropertyToAPIObject('__get__', _get__);\n  addPropertyToAPIObject('__GetDependency__', _get__);\n  addPropertyToAPIObject('__Rewire__', _set__);\n  addPropertyToAPIObject('__set__', _set__);\n  addPropertyToAPIObject('__reset__', _reset__);\n  addPropertyToAPIObject('__ResetDependency__', _reset__);\n  addPropertyToAPIObject('__with__', _with__);\n})();\nfunction _get__(variableName) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _get_original__(variableName);\n  } else {\n    var value = rewireData[variableName];\n    if (value === INTENTIONAL_UNDEFINED) {\n      return undefined;\n    } else {\n      return value;\n    }\n  }\n}\nfunction _get_original__(variableName) {\n  switch (variableName) {\n    case \"keys\":\n      return (lodash_keys__WEBPACK_IMPORTED_MODULE_1___default());\n    case \"fromJS\":\n      return immutable__WEBPACK_IMPORTED_MODULE_0__.fromJS;\n    case \"Iterable\":\n      return immutable__WEBPACK_IMPORTED_MODULE_0__.Iterable;\n    case \"convertToImmutable\":\n      return convertToImmutable;\n    case \"getDataSourceIds\":\n      return getDataSourceIds;\n    case \"filter\":\n      return (lodash_filter__WEBPACK_IMPORTED_MODULE_2___default());\n    case \"getConfigFromState\":\n      return getConfigFromState;\n    case \"setConfigInState\":\n      return setConfigInState;\n    case \"getCollectionDataSourceId\":\n      return getCollectionDataSourceId;\n    case \"getDataSourceFromState\":\n      return getDataSourceFromState;\n    case \"setDataSourceInState\":\n      return setDataSourceInState;\n    case \"epics0\":\n      return _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_3__.epics;\n    case \"reducers0\":\n      return _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_3__.reducers;\n    case \"actionCreators0\":\n      return _c3_ui_UiSdlComponent__WEBPACK_IMPORTED_MODULE_3__.actionCreators;\n  }\n  return undefined;\n}\nfunction _assign__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _set_original__(variableName, value);\n  } else {\n    _maybe_update_export__(variableName, value);\n    return rewireData[variableName] = value;\n  }\n}\nfunction _set_original__(variableName, _value) {\n  switch (variableName) {}\n  return undefined;\n}\nfunction _update_operation__(operation, variableName, prefix) {\n  var oldValue = _get__(variableName);\n  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;\n  _assign__(variableName, newValue);\n  return prefix ? newValue : oldValue;\n}\nfunction _set__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (typeof variableName === 'object') {\n    Object.keys(variableName).forEach(function (name) {\n      rewireData[name] = variableName[name];\n    });\n    return function () {\n      Object.keys(variableName).forEach(function (name) {\n        _reset__(variableName);\n      });\n    };\n  } else {\n    _maybe_update_export__(variableName, value);\n    if (value === undefined) {\n      rewireData[variableName] = INTENTIONAL_UNDEFINED;\n    } else {\n      rewireData[variableName] = value;\n    }\n    return function () {\n      _reset__(variableName);\n    };\n  }\n}\nfunction _reset__(variableName) {\n  let rewireData = _getRewiredData__();\n  delete rewireData[variableName];\n  if (Object.keys(rewireData).length == 0) {\n    delete _getRewireRegistry__()[_getRewireModuleId__];\n  }\n  if (_exports_to_reset__.has(variableName)) {\n    exports[variableName] = _exports_to_reset__.get(variableName);\n    _exports_to_reset__.delete(variableName);\n  }\n}\nfunction _with__(object) {\n  let rewireData = _getRewiredData__();\n  var rewiredVariableNames = Object.keys(object);\n  var previousValues = {};\n  function reset() {\n    rewiredVariableNames.forEach(function (variableName) {\n      rewireData[variableName] = previousValues[variableName];\n    });\n  }\n  return function (callback) {\n    rewiredVariableNames.forEach(function (variableName) {\n      previousValues[variableName] = rewireData[variableName];\n      rewireData[variableName] = object[variableName];\n    });\n    let result = callback();\n    if (!!result && typeof result.then == 'function') {\n      result.then(reset).catch(reset);\n    } else {\n      reset();\n    }\n    return result;\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_RewireAPI__);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@c3/ui/UiSdlConnected.ts_uiInfrastructure\n");

/***/ })

}]);