"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkjs_webpack_c3_client_node"] = self["webpackChunkjs_webpack_c3_client_node"] || []).push([["node_modules_c3_ui_UiSdlUseData_ts_uiInfrastructure"],{

/***/ "./node_modules/@c3/ui/UiSdlUseData.ts_uiInfrastructure":
/*!*********************************************!*\
  !*** ./node_modules/@c3/ui/UiSdlUseData.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __GetDependency__: () => (/* binding */ _get__),\n/* harmony export */   __ResetDependency__: () => (/* binding */ _reset__),\n/* harmony export */   __RewireAPI__: () => (/* binding */ _RewireAPI__),\n/* harmony export */   __Rewire__: () => (/* binding */ _set__),\n/* harmony export */   __get__: () => (/* binding */ _get__),\n/* harmony export */   __set__: () => (/* binding */ _set__),\n/* harmony export */   compareDataSpecsAndFindDiff: () => (/* binding */ compareDataSpecsAndFindDiff),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaultValues: () => (/* binding */ defaultValues),\n/* harmony export */   forEachPartiallyAppliedActionInfo: () => (/* binding */ forEachPartiallyAppliedActionInfo),\n/* harmony export */   getChangedDataSpecs: () => (/* binding */ getChangedDataSpecs),\n/* harmony export */   getDataSourceMap: () => (/* binding */ getDataSourceMap),\n/* harmony export */   normalizeImmutable: () => (/* binding */ normalizeImmutable),\n/* harmony export */   requestData: () => (/* binding */ requestData),\n/* harmony export */   shouldRequestDataOnFirstRender: () => (/* binding */ shouldRequestDataOnFirstRender),\n/* harmony export */   useData: () => (/* binding */ useData),\n/* harmony export */   useSelectedState: () => (/* binding */ useSelectedState)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"webpack/sharing/consume/default/react_uiInfrastructure\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-redux */ \"webpack/sharing/consume/default/react-redux_uiInfrastructure\");\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_redux__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var immutable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! immutable */ \"webpack/sharing/consume/default/immutable_uiInfrastructure\");\n/* harmony import */ var immutable__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(immutable__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/each */ \"webpack/sharing/consume/default/lodash/each/lodash/each_uiInfrastructure\");\n/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_each__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/get */ \"webpack/sharing/consume/default/lodash/get/lodash/get_uiInfrastructure\");\n/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_get__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/cloneDeep */ \"webpack/sharing/consume/default/lodash/cloneDeep/lodash/cloneDeep_uiInfrastructure\");\n/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var lodash_set__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/set */ \"webpack/sharing/consume/default/lodash/set/lodash/set_uiInfrastructure\");\n/* harmony import */ var lodash_set__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(lodash_set__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash/isEmpty */ \"webpack/sharing/consume/default/lodash/isEmpty/lodash/isEmpty_uiInfrastructure\");\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash/isEqual */ \"webpack/sharing/consume/default/lodash/isEqual/lodash/isEqual_uiInfrastructure\");\n/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(lodash_isEqual__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var lodash_extend__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash/extend */ \"webpack/sharing/consume/default/lodash/extend/lodash/extend_uiInfrastructure\");\n/* harmony import */ var lodash_extend__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(lodash_extend__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash/isUndefined */ \"webpack/sharing/consume/default/lodash/isUndefined/lodash/isUndefined_uiInfrastructure\");\n/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(lodash_isUndefined__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash/merge */ \"webpack/sharing/consume/default/lodash/merge/lodash/merge_uiInfrastructure\");\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(lodash_merge__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _c3_ui_UiSdlDynamicValueSpec__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @c3/ui/UiSdlDynamicValueSpec */ \"webpack/container/remote/@c3/ui/UiSdlDynamicValueSpec_uiInfrastructure\");\n/* harmony import */ var _c3_ui_UiSdlDynamicValueSpec__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlDynamicValueSpec__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @c3/ui/UiSdlConnected */ \"webpack/sharing/consume/default/@c3/ui/UiSdlConnected_uiInfrastructure\");\n/* harmony import */ var _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var _c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @c3/ui/UiSdlDataRedux */ \"webpack/container/remote/@c3/ui/UiSdlDataRedux_uiInfrastructure\");\n/* harmony import */ var _c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var _c3_ui_UiSdlLogger__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @c3/ui/UiSdlLogger */ \"webpack/container/remote/@c3/ui/UiSdlLogger_uiInfrastructure\");\n/* harmony import */ var _c3_ui_UiSdlLogger__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlLogger__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _c3_ui_UiSdlUseDispatch__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @c3/ui/UiSdlUseDispatch */ \"webpack/sharing/consume/default/@c3/ui/UiSdlUseDispatch/@c3/ui/UiSdlUseDispatch_uiInfrastructure\");\n/* harmony import */ var _c3_ui_UiSdlUseDispatch__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlUseDispatch__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var _c3_app_ui_src_reducerRegistry__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @c3/app/ui/src/reducerRegistry */ \"webpack/sharing/consume/default/@c3/app/ui/src/reducerRegistry_uiInfrastructure\");\n/* harmony import */ var _c3_app_ui_src_reducerRegistry__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_c3_app_ui_src_reducerRegistry__WEBPACK_IMPORTED_MODULE_17__);\n/*\n * Copyright 2009-2024 C3 AI (www.c3.ai). All Rights Reserved.\n * This material, including without limitation any software, is the confidential trade secret and proprietary\n * information of C3 and its licensors. Reproduction, use and/or distribution of this material in any form is\n * strictly prohibited except as set forth in a written license agreement with C3 and/or its authorized distributors.\n * This material may be covered by one or more patents or pending patent applications.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* eslint-disable import/exports-last */\n\nconst normalizeImmutable = maybeImmutable => {\n  if (!_get__(\"isUndefined\")(maybeImmutable)) {\n    if (_get__(\"Iterable\").isIterable(maybeImmutable)) {\n      return maybeImmutable.toJS();\n    }\n    return maybeImmutable;\n  }\n  return null;\n};\n/**\n * Iterates over all partially applied action info objects for the given component data spec.\n * @param componentId The id of the component to which this data belongs.\n * @param dataSpec The data spec for this component.\n * @param contextVars The contextVars of the data spec for this component.\n * @param config The full configuration of this component.\n * @param dataSpecType The C3 type (ES module)\n * @param dataSpecFieldName The name of the field for this data spec.\n * @param iterator An iterator to be called for each partially applied action.\n */\nconst forEachPartiallyAppliedActionInfo = (componentId, dataSpec, contextVars, config, dataSpecType, dataSpecFieldName, iterator) => {\n  var _partiallyAppliedActi, _partiallyAppliedActi2;\n  let partiallyAppliedActionInfos;\n  dataSpec.contextVars = contextVars;\n  if (dataSpec.advancedDataSpec) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (dataSpecType.hasOwnProperty('toPartiallyAppliedAdvancedActions')) {\n      // @ts-expect-error TODO: ENGR-10369 Enhance typescript types generation to include methods\n      partiallyAppliedActionInfos = dataSpecType.toPartiallyAppliedAdvancedActions(dataSpec);\n    } else {\n      _get__(\"withName\")('UiSdlUseData').error(`${componentId}: \\`advancedDataSpec\\` is not allowed for data spec types that do not implement \\`toPartiallyAppliedAdvancedActions\\`. (data spec field: '${dataSpecFieldName}')`);\n    }\n    // eslint-disable-next-line no-prototype-builtins\n  } else if (dataSpecType.hasOwnProperty('toPartiallyAppliedActions')) {\n    // @ts-expect-error TODO: ENGR-10369 Enhance typescript types generation to include methods\n    partiallyAppliedActionInfos = dataSpecType.toPartiallyAppliedActions(dataSpec, config);\n  } else {\n    _get__(\"withName\")('UiSdlUseData').error(`${componentId}: Method \\`toPartiallyAppliedActions\\` is not defined on type for data spec field '${dataSpecFieldName}'.`);\n  }\n  const requireActionId = ((_partiallyAppliedActi = partiallyAppliedActionInfos) === null || _partiallyAppliedActi === void 0 ? void 0 : _partiallyAppliedActi.length) > 1;\n  (_partiallyAppliedActi2 = partiallyAppliedActionInfos) === null || _partiallyAppliedActi2 === void 0 || _partiallyAppliedActi2.forEach(partiallyAppliedActionInfo => {\n    if (!partiallyAppliedActionInfo.actionId && requireActionId) {\n      _get__(\"withName\")('UiSdlUseData').error(componentId + ': UiSdlPartiallyAppliedActionInfo.actionId is required for components with multiple PartialyAppliedActionInfos.');\n    }\n    iterator.call(null, partiallyAppliedActionInfo);\n  });\n};\nconst getDataSourceMap = (componentId, dataSpecs, dataSpecsConfiguredContextVars, config) => {\n  return dataSpecs.reduce((dataSourceMap, {\n    dataSpecFieldName,\n    dataSpecType,\n    dataDestinationFieldName\n  }) => {\n    if (!dataSpecType) return dataSourceMap;\n    const dataSpec = _get__(\"cloneDeep\")(_get__(\"get\")(config, dataSpecFieldName));\n    const contextVars = dataSpecsConfiguredContextVars[dataSpecFieldName];\n    if (!dataSpec) return dataSourceMap;\n    _get__(\"forEachPartiallyAppliedActionInfo\")(componentId, dataSpec, contextVars, config, dataSpecType, dataSpecFieldName, partiallyAppliedActionInfo => {\n      const partiallyAppliedActionId = partiallyAppliedActionInfo.actionId || dataSpecFieldName;\n      const dataSourceId = _get__(\"getCollectionDataSourceId\")(partiallyAppliedActionId, componentId);\n      dataSourceMap[dataSourceId] = {\n        dataDestinationFieldName: dataDestinationFieldName,\n        dataSpecFieldName: dataSpecFieldName,\n        actionId: partiallyAppliedActionId\n      };\n    });\n    return dataSourceMap;\n  }, {});\n};\nconst shouldRequestDataOnFirstRender = (config, dataSpec, dataSpecType, changedDataSpecs) => {\n  var _dataSpec$disableData, _dataSpecType$default;\n  return !config.disableDataRequestOnFirstRender &&\n  // Check per this specific data spec\n  !((_dataSpec$disableData = dataSpec === null || dataSpec === void 0 ? void 0 : dataSpec.disableDataRequestOnFirstRender) !== null && _dataSpec$disableData !== void 0 ? _dataSpec$disableData : (_dataSpecType$default = dataSpecType.defaultValues) === null || _dataSpecType$default === void 0 ? void 0 : _dataSpecType$default.disableDataRequestOnFirstRender) || (changedDataSpecs === null || changedDataSpecs === void 0 ? void 0 : changedDataSpecs.length) > 0;\n};\nconst requestData = (componentId, dataSpecs, dataSpecsConfiguredContextVars, config, changedDataSpecs, dispatch, doNotRequestData) => {\n  dataSpecs.forEach(({\n    dataSpecFieldName,\n    dataSpecType\n  }) => {\n    if (!dataSpecType) return;\n    const dataSpec = _get__(\"cloneDeep\")(_get__(\"get\")(config, dataSpecFieldName));\n    const contextVars = dataSpecsConfiguredContextVars[dataSpecFieldName];\n    if (!dataSpec) return;\n    _get__(\"forEachPartiallyAppliedActionInfo\")(componentId, dataSpec, contextVars, config, dataSpecType, dataSpecFieldName, partiallyAppliedActionInfo => {\n      var _dataSpecType$default2, _dataSpecType$default3;\n      const partiallyAppliedActionId = partiallyAppliedActionInfo.actionId || dataSpecFieldName;\n      const dataSourceId = _get__(\"getCollectionDataSourceId\")(partiallyAppliedActionId, componentId);\n\n      // If any part of the component tree does not want this UIDataRedux to make a request on render, block it\n      const requestOnFirstRender = _get__(\"shouldRequestDataOnFirstRender\")(config, dataSpec, dataSpecType, changedDataSpecs);\n\n      // Only dispatch the request data action when there is enough metadata to do so and request is not disabled.\n      const {\n        partiallyAppliedAction,\n        tunnelConfiguration\n      } = partiallyAppliedActionInfo;\n      const newConfig = _get__(\"extend\")({}, partiallyAppliedAction);\n\n      // Merge default dataTransforms\n      if (partiallyAppliedActionInfo.dataTransforms) {\n        newConfig.dataTransforms = partiallyAppliedActionInfo.dataTransforms;\n      } else if (dataSpecType !== null && dataSpecType !== void 0 && (_dataSpecType$default2 = dataSpecType.defaultValues) !== null && _dataSpecType$default2 !== void 0 && _dataSpecType$default2.dataTransforms) {\n        newConfig.dataTransforms = dataSpecType.defaultValues.dataTransforms;\n      }\n\n      // Merge default dataSpecDependence\n      if (dataSpecType !== null && dataSpecType !== void 0 && (_dataSpecType$default3 = dataSpecType.defaultValues) !== null && _dataSpecType$default3 !== void 0 && _dataSpecType$default3.dataSpecDependence) {\n        newConfig.dataSpecDependence = dataSpecType.defaultValues.dataSpecDependence;\n      }\n      if (tunnelConfiguration) {\n        _get__(\"extend\")(newConfig, {\n          tunnelConfiguration: tunnelConfiguration\n        });\n      }\n\n      /*\n       * Set the data config in state, so it is available if/when data is requested.\n       * Fall back to dataSpec contextVars if other dataSpec don't have contextVars.\n       */\n      dispatch(_get__(\"updateDataConfigAction\")(dataSourceId, newConfig, !_get__(\"isEmpty\")(contextVars) ? contextVars : partiallyAppliedActionInfo.contextVars, componentId));\n\n      /**\n       * Merge arguments of the spec changes.  Still need to call this even though arguments are added in `updateDataConfigAction`,\n       * because `argumentsMergeEffect` does a deep merge of the arguments\n       */\n      if (!_get__(\"isEmpty\")(partiallyAppliedAction.args)) {\n        dispatch(_get__(\"mergeArgumentsAction\")(dataSourceId, partiallyAppliedAction.args, undefined));\n      }\n      if (requestOnFirstRender && partiallyAppliedAction.typeName && partiallyAppliedAction.actionName && !(doNotRequestData !== null && doNotRequestData !== void 0 && doNotRequestData.includes(dataSpecFieldName))) {\n        var _dataSpec$dataTransfo, _dataSpecType$default4;\n        // Read transforms from user/developer supplied configuration\n        const actionTransforms = (_dataSpec$dataTransfo = dataSpec === null || dataSpec === void 0 ? void 0 : dataSpec.dataTransforms) !== null && _dataSpec$dataTransfo !== void 0 ? _dataSpec$dataTransfo : (_dataSpecType$default4 = dataSpecType.defaultValues) === null || _dataSpecType$default4 === void 0 ? void 0 : _dataSpecType$default4.dataTransforms;\n        dispatch(_get__(\"requestDataAction\")(dataSourceId, actionTransforms));\n      }\n    });\n  });\n};\n\n/**\n * This function checks the metadata to see if the dataSpec resolution should be ignored based on contextVar resolution\n * paramaters and the existing dataSpec contextVars.\n *\n * @param dataSpecs array of DataSpecsContextVars that have already been dispatched\n * @param metadata metadata of the component\n * @param currentDataSpec the name of the dataSpec to look at\n * @returns boolean of whether the dataSpec should be ignored\n */\nconst ignoreContextVarsOnce = (dataSpecs, metadata, currentDataSpec) => {\n  var _metadata$currentData;\n  return ((_metadata$currentData = metadata[currentDataSpec]) === null || _metadata$currentData === void 0 ? void 0 : _metadata$currentData.ignoreFirstContextVarResolution) && _get__(\"isEmpty\")(dataSpecs[currentDataSpec]);\n};\n\n/**\n * This function checks the metadata to see if the dataSpec resolution should be ignored based on contextVar resolution\n * paramaters\n *\n * @param metadata metadata of the component\n * @param currentDataSpec the name of the dataSpec to look at\n * @returns boolean of whether the dataSpec should be ignored\n */\nconst ignoreContextVarsAlways = (metadata, currentDataSpec) => {\n  var _metadata$currentData2;\n  return (_metadata$currentData2 = metadata[currentDataSpec]) === null || _metadata$currentData2 === void 0 ? void 0 : _metadata$currentData2.ignoreAllContextVarResolution;\n};\n\n/**\n * This function compares current and previous DataSpecsContextVars and find the changed dataSpecs\n * @param current array of DataSpecsContextVars that will be dispatched\n * @param previous array of DataSpecsContextVars that was dispatched last time\n * @param metadata the metadata of the component\n * @returns array of DataSpecsContextVars that are changed between the two dispatches\n */\nconst compareDataSpecsAndFindDiff = (current, previous, metadata) => {\n  if (!previous) {\n    return [[], []];\n  }\n  let differentDataSpecs = new Array();\n  let doNotRequestData = new Array();\n  Object.keys(current).forEach(currentDataSpec => {\n    if (!previous[currentDataSpec]) {\n      differentDataSpecs.push(currentDataSpec);\n    } else if (_get__(\"isEqual\")(current[currentDataSpec], previous[currentDataSpec]) === false) {\n      if (_get__(\"ignoreContextVarsOnce\")(previous, metadata, currentDataSpec) || _get__(\"ignoreContextVarsAlways\")(metadata, currentDataSpec)) {\n        doNotRequestData.push(currentDataSpec);\n      }\n      differentDataSpecs.push(currentDataSpec);\n    }\n  });\n  return [differentDataSpecs, doNotRequestData];\n};\n\n/**\n * This function filters out the dataspecs that didn't change from current vs. previous\n * And return an array of dataSpecs that needs to send to `requestData` and eventually send to requestDataAction\n * @param dataSpecNames array of strings as dataspec names\n * @param dataSpecObjects array of actual dataspec objects\n * @returns array of dataSpecObjects\n */\nconst getChangedDataSpecs = (dataSpecNames, dataSpecObjects) => {\n  return dataSpecNames.map(name => {\n    return dataSpecObjects.find(dataspec => {\n      return dataspec.dataSpecFieldName === name;\n    });\n  }).filter(ele => ele); // To remove `undefined` returned from find method\n};\n\n/**\n * Optimized version of Redux's useSelector.\n *\n * This implementation uses the stateUpdates observable to limit how much the\n * selector function is executed and ensure components don't get re-rendered\n * when no changes have been done to the state.\n *\n * @param selector The selector function that retrieves state\n * @param equalityFn A function to compare previous state to new state\n * @returns The selected state\n * @see stateUpdates in reducerRegistry.ts\n */\nconst useSelectedState = (selector, equalityFn) => {\n  if (!equalityFn) {\n    equalityFn = _get__(\"shallowEqual\");\n  }\n  /**\n   * Using refs is important here to ensure we get new values on every render\n   * otherwise values might not get updated because of closures.\n   */\n  const latestSelectedState = _get__(\"useRef\")();\n  const latestSelector = _get__(\"useRef\")();\n  const store = _get__(\"useStore\")();\n  const [, forceRender] = _get__(\"useReducer\")(s => s + 1, 0);\n\n  // For first call or a re-render, synchronously select the state and return.\n  if (selector !== latestSelector.current) {\n    latestSelectedState.current = selector(store.getState());\n  }\n\n  // Update the current selector ref (in case it changed outside our closure)\n  _get__(\"useEffect\")(() => {\n    latestSelector.current = selector;\n  });\n\n  // Subscribe to our stateUpdates observable and force render as needed\n  _get__(\"useEffect\")(() => {\n    const subscription = _get__(\"stateUpdates\").subscribe(state => {\n      const newSelectedState = latestSelector.current(state);\n      if (equalityFn(newSelectedState, latestSelectedState.current)) {\n        return;\n      }\n      latestSelectedState.current = newSelectedState;\n      forceRender({});\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n  return latestSelectedState.current;\n};\n\n/**\n * Typed version of useSelector.\n *\n * Used as an abstraction layer to provide a useSelector implementation that is optimized for our Redux use cases.\n *\n * @see useSelectedState\n * @see stateUpdates from reducerRegistry\n */\nconst useTypedSelector = _get__(\"useSelectedState\");\nconst addResolvedContextVars = (contextVars, result, context, dataSpecFieldName) => {\n  _get__(\"each\")(contextVars, (param, contextVar) => {\n    const currentParamValue = _get__(\"extractParamValue\")(param, context);\n    result.dataSpecsConfiguredContextVars[dataSpecFieldName][contextVar] = param;\n    result.dataSpecsResolvedContextVars[dataSpecFieldName][contextVar] = currentParamValue;\n  });\n  return result;\n};\nconst useData = (componentId, dataSpecs, metadata, dataMergeFunction) => {\n  const dispatch = _get__(\"useDispatch\")();\n\n  /*\n   * If any of a component's dataSpecs are configured with contextVars,\n   * we check to see if any of the variable's resolved values have changed.\n   * If a change is detected, the component's data sources are refreshed.\n   */\n  const {\n    dataSpecsConfiguredContextVars,\n    dataSpecsResolvedContextVars,\n    allDataSpecs\n  } = _get__(\"useTypedSelector\")(state => {\n    var result = {\n      dataSpecsConfiguredContextVars: {},\n      dataSpecsResolvedContextVars: {},\n      allDataSpecs: []\n    };\n    const context = {\n      metadataId: componentId,\n      state: state\n    };\n    dataSpecs.forEach(dataSpec => {\n      const dataSpecFieldName = dataSpec.dataSpecFieldName;\n      result.dataSpecsConfiguredContextVars[dataSpecFieldName] = {};\n      result.dataSpecsResolvedContextVars[dataSpecFieldName] = {};\n      const dataSpecConfiguration = _get__(\"get\")(metadata, dataSpecFieldName);\n      result.allDataSpecs.push(dataSpecConfiguration);\n      const contextVars = dataSpecConfiguration === null || dataSpecConfiguration === void 0 ? void 0 : dataSpecConfiguration.contextVars;\n      result = _get__(\"addResolvedContextVars\")(contextVars, result, context, dataSpecFieldName);\n\n      /*\n       * If the contextVars is configured in component's dataSpec's toPartiallyAppliedActions,\n       * check if any resolved values have changed.\n       */\n      const dataSpecConfig = _get__(\"cloneDeep\")(_get__(\"get\")(metadata, dataSpecFieldName));\n      const dataSpecType = dataSpec.dataSpecType;\n      if (!!dataSpecConfig && !!dataSpecType) {\n        _get__(\"forEachPartiallyAppliedActionInfo\")(componentId, dataSpecConfig, contextVars, metadata, dataSpecType, dataSpecFieldName, partiallyAppliedActionInfo => {\n          result = _get__(\"addResolvedContextVars\")(partiallyAppliedActionInfo.contextVars, result, context, dataSpecFieldName);\n        });\n      }\n    });\n    return result;\n  }, (prev, next) => {\n    return _get__(\"isEqual\")(prev, next);\n  });\n\n  /*\n   * Upon receiving the component's metadata or detecting a change in the component's\n   * resolved contextVars, initialize or refresh this component's data sources.\n   */\n  const dataSpecsResolvedContextVarsRef = _get__(\"useRef\")(dataSpecsResolvedContextVars);\n  let changedDataSpecs;\n  _get__(\"useEffect\")(() => {\n    // Initial load. When the metadata is loaded, request the data.\n    if (metadata) {\n      _get__(\"requestData\")(componentId, dataSpecs, dataSpecsConfiguredContextVars, metadata, changedDataSpecs, dispatch);\n    }\n  }, [!!metadata]);\n  _get__(\"useEffect\")(() => {\n    // Context vars have changed; only update the changed dataSpec.\n    if (dataSpecsResolvedContextVarsRef.current) {\n      const [changedDataSpecs, doNotRequestData] = _get__(\"compareDataSpecsAndFindDiff\")(dataSpecsResolvedContextVars, dataSpecsResolvedContextVarsRef.current, metadata);\n      const dataSpecsToUpdate = _get__(\"getChangedDataSpecs\")(changedDataSpecs, dataSpecs);\n      _get__(\"requestData\")(componentId, dataSpecsToUpdate, dataSpecsConfiguredContextVars, metadata, changedDataSpecs, dispatch, doNotRequestData);\n    }\n    dataSpecsResolvedContextVarsRef.current = dataSpecsResolvedContextVars;\n  }, [JSON.stringify(dataSpecsResolvedContextVars)]);\n  const {\n    data,\n    statuses\n  } = _get__(\"useTypedSelector\")(state => {\n    let result = {\n      data: {},\n      statuses: {}\n    };\n    let hasSubDataSource = false;\n    if (!metadata) return result;\n\n    // Check if the dataSourceArray has shared dataDestinationFieldName and return array of shared names\n    const getSharedNamesFromDataSourceArray = dataSourceArray => {\n      const setValues = new Set();\n      const sharedNames = [];\n      dataSourceArray.forEach(dataSource => {\n        const dataDestinationFieldName = dataSource.dataDestinationFieldName;\n        if (setValues.has(dataDestinationFieldName)) {\n          sharedNames.push(dataDestinationFieldName);\n        }\n        setValues.add(dataDestinationFieldName);\n      });\n      return sharedNames;\n    };\n    const dataSourceMap = _get__(\"getDataSourceMap\")(componentId, dataSpecs, dataSpecsConfiguredContextVars, metadata || {}) || {};\n    /*\n     * If there are more than one dataSource and they share the same destination name\n     * that means there are subDataSources\n     * We need to create a map inside result.data to accommodate subDataSources\n     */\n    const namesForSubDataSource = Object.keys(dataSourceMap).length > 1 ? getSharedNamesFromDataSourceArray(Object.values(dataSourceMap)) : [];\n    if ((namesForSubDataSource === null || namesForSubDataSource === void 0 ? void 0 : namesForSubDataSource.length) > 0) {\n      result.data = {};\n      hasSubDataSource = true;\n    }\n    result = Object.keys(dataSourceMap).reduce((result, dataSourceId) => {\n      const dataDestinationFieldName = dataSourceMap[dataSourceId].dataDestinationFieldName;\n      const dataSpecFieldName = dataSourceMap[dataSourceId].dataSpecFieldName;\n      const dsMetadata = state.getIn(['metadata', 'dataSources', 'byId', dataSourceId]);\n      const data = state.getIn(['entities', 'modified', dataSourceId]);\n      /*\n       * If we have subDataSources, we will put a map into result.data[dataDestinationFieldName]\n       * and the map key will be subDataSources name, value will be its value\n       * For example, metricTile can have up to 3 subDataSources, therefore the result object should look like:\n       * result: {\n       *  data: {\n       *    dataCollection: {\n       *      historicSparkline: {}, // some data\n       *      forecastSparkline: {}, // some data\n       *      planSparkline: {} //some data\n       *     }\n       *   }\n       * }\n       */\n      if (hasSubDataSource && namesForSubDataSource !== null && namesForSubDataSource !== void 0 && namesForSubDataSource.includes(dataDestinationFieldName)) {\n        const actionId = dataSourceMap[dataSourceId].actionId;\n        // If no actionId, ignore this entry\n        if (!actionId) {\n          return result;\n        }\n        const dataMappingDataSource = actionId;\n        const path = [dataDestinationFieldName, dataMappingDataSource];\n        _get__(\"set\")(metadata, path, data);\n        if (!result.data[dataDestinationFieldName]) {\n          result.data[dataDestinationFieldName] = {};\n        }\n        result.data[dataDestinationFieldName][dataMappingDataSource] = _get__(\"normalizeImmutable\")(data);\n\n        // If its not subDataSource, we will directly set the data to result.data[dataDestinationFieldName]\n      } else {\n        _get__(\"set\")(metadata, dataDestinationFieldName, data);\n        result.data[dataDestinationFieldName] = _get__(\"normalizeImmutable\")(data);\n      }\n      result.statuses[dataDestinationFieldName] = (dsMetadata === null || dsMetadata === void 0 ? void 0 : dsMetadata.status) || 'INITIAL';\n      if (dataMergeFunction != undefined) {\n        result.data = _get__(\"merge\")(result.data, dataMergeFunction(componentId, dataSpecFieldName, dataDestinationFieldName, result.data, state));\n      }\n      return result;\n    }, result);\n    return result;\n  }, (prev, next) => {\n    /**\n     * Our own equality function that checks if data and status are the same.\n     *\n     * We need this because the result object always has new data and statuses objects\n     * but the properties of them don't change as much over time.\n     *\n     * TODO: UI-4900 Remove the deep equal.\n     */\n    return _get__(\"isEqual\")(prev.data, next.data) && _get__(\"shallowEqual\")(prev.statuses, next.statuses);\n  });\n  return [data, statuses];\n};\nconst defaultValues = {};\nfunction _getGlobalObject() {\n  try {\n    if (!!__webpack_require__.g) {\n      return __webpack_require__.g;\n    }\n  } catch (e) {\n    try {\n      if (!!window) {\n        return window;\n      }\n    } catch (e) {\n      return this;\n    }\n  }\n}\n;\nvar _RewireModuleId__ = null;\nfunction _getRewireModuleId__() {\n  if (_RewireModuleId__ === null) {\n    let globalVariable = _getGlobalObject();\n    if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {\n      globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0;\n    }\n    _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++;\n  }\n  return _RewireModuleId__;\n}\nfunction _getRewireRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__;\n}\nfunction _getRewireExportsRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__;\n}\nconst _sync_internal_state_with_exports__ = false;\nconst _exports_to_reset__ = new Map();\nfunction _record_export_to_reset__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  if (!_exports_to_reset__.has(variableName)) {\n    _exports_to_reset__.set(variableName, value);\n  }\n}\nfunction _restore_exports__() {\n  const entries = _exports_to_reset__.entries();\n  for (const [variableName, value] of entries) {\n    exports[variableName] = value;\n  }\n  _exports_to_reset__.clear();\n}\nfunction _maybe_update_export__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  _record_export_to_reset__(variableName, exports[variableName]);\n  exports[variableName] = value;\n}\nfunction _getRewiredData__() {\n  let moduleId = _getRewireModuleId__();\n  let registry = _getRewireRegistry__();\n  let rewireData = registry[moduleId];\n  if (!rewireData) {\n    registry[moduleId] = Object.create(null);\n    rewireData = registry[moduleId];\n  }\n  let exportsRegistry = _getRewireExportsRegistry__();\n  if (!exportsRegistry[moduleId]) {\n    exportsRegistry[moduleId] = _restore_exports__;\n  }\n  return rewireData;\n}\n(function registerResetAll() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable['__rewire_reset_all__']) {\n    theGlobalVariable['__rewire_reset_all__'] = function () {\n      theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n      const exportsRegistry = _getRewireExportsRegistry__();\n      for (const restoreFunc of Object.values(exportsRegistry)) {\n        restoreFunc();\n      }\n      theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n    };\n  }\n})();\nvar INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';\nlet _RewireAPI__ = {};\n(function () {\n  function addPropertyToAPIObject(name, value) {\n    Object.defineProperty(_RewireAPI__, name, {\n      value: value,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  addPropertyToAPIObject('__get__', _get__);\n  addPropertyToAPIObject('__GetDependency__', _get__);\n  addPropertyToAPIObject('__Rewire__', _set__);\n  addPropertyToAPIObject('__set__', _set__);\n  addPropertyToAPIObject('__reset__', _reset__);\n  addPropertyToAPIObject('__ResetDependency__', _reset__);\n  addPropertyToAPIObject('__with__', _with__);\n})();\nfunction _get__(variableName) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _get_original__(variableName);\n  } else {\n    var value = rewireData[variableName];\n    if (value === INTENTIONAL_UNDEFINED) {\n      return undefined;\n    } else {\n      return value;\n    }\n  }\n}\nfunction _get_original__(variableName) {\n  switch (variableName) {\n    case \"isUndefined\":\n      return (lodash_isUndefined__WEBPACK_IMPORTED_MODULE_10___default());\n    case \"Iterable\":\n      return immutable__WEBPACK_IMPORTED_MODULE_2__.Iterable;\n    case \"withName\":\n      return _c3_ui_UiSdlLogger__WEBPACK_IMPORTED_MODULE_15__.withName;\n    case \"cloneDeep\":\n      return (lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_5___default());\n    case \"get\":\n      return (lodash_get__WEBPACK_IMPORTED_MODULE_4___default());\n    case \"forEachPartiallyAppliedActionInfo\":\n      return forEachPartiallyAppliedActionInfo;\n    case \"getCollectionDataSourceId\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_13__.getCollectionDataSourceId;\n    case \"shouldRequestDataOnFirstRender\":\n      return shouldRequestDataOnFirstRender;\n    case \"extend\":\n      return (lodash_extend__WEBPACK_IMPORTED_MODULE_9___default());\n    case \"updateDataConfigAction\":\n      return _c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_14__.updateDataConfigAction;\n    case \"isEmpty\":\n      return (lodash_isEmpty__WEBPACK_IMPORTED_MODULE_7___default());\n    case \"mergeArgumentsAction\":\n      return _c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_14__.mergeArgumentsAction;\n    case \"requestDataAction\":\n      return _c3_ui_UiSdlDataRedux__WEBPACK_IMPORTED_MODULE_14__.requestDataAction;\n    case \"isEqual\":\n      return (lodash_isEqual__WEBPACK_IMPORTED_MODULE_8___default());\n    case \"ignoreContextVarsOnce\":\n      return ignoreContextVarsOnce;\n    case \"ignoreContextVarsAlways\":\n      return ignoreContextVarsAlways;\n    case \"shallowEqual\":\n      return react_redux__WEBPACK_IMPORTED_MODULE_1__.shallowEqual;\n    case \"useRef\":\n      return react__WEBPACK_IMPORTED_MODULE_0__.useRef;\n    case \"useStore\":\n      return react_redux__WEBPACK_IMPORTED_MODULE_1__.useStore;\n    case \"useReducer\":\n      return react__WEBPACK_IMPORTED_MODULE_0__.useReducer;\n    case \"useEffect\":\n      return react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n    case \"stateUpdates\":\n      return _c3_app_ui_src_reducerRegistry__WEBPACK_IMPORTED_MODULE_17__.stateUpdates;\n    case \"useSelectedState\":\n      return useSelectedState;\n    case \"each\":\n      return (lodash_each__WEBPACK_IMPORTED_MODULE_3___default());\n    case \"extractParamValue\":\n      return _c3_ui_UiSdlDynamicValueSpec__WEBPACK_IMPORTED_MODULE_12__.extractParamValue;\n    case \"useDispatch\":\n      return _c3_ui_UiSdlUseDispatch__WEBPACK_IMPORTED_MODULE_16__.useDispatch;\n    case \"useTypedSelector\":\n      return useTypedSelector;\n    case \"addResolvedContextVars\":\n      return addResolvedContextVars;\n    case \"requestData\":\n      return requestData;\n    case \"compareDataSpecsAndFindDiff\":\n      return compareDataSpecsAndFindDiff;\n    case \"getChangedDataSpecs\":\n      return getChangedDataSpecs;\n    case \"getDataSourceMap\":\n      return getDataSourceMap;\n    case \"set\":\n      return (lodash_set__WEBPACK_IMPORTED_MODULE_6___default());\n    case \"normalizeImmutable\":\n      return normalizeImmutable;\n    case \"merge\":\n      return (lodash_merge__WEBPACK_IMPORTED_MODULE_11___default());\n  }\n  return undefined;\n}\nfunction _assign__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _set_original__(variableName, value);\n  } else {\n    _maybe_update_export__(variableName, value);\n    return rewireData[variableName] = value;\n  }\n}\nfunction _set_original__(variableName, _value) {\n  switch (variableName) {}\n  return undefined;\n}\nfunction _update_operation__(operation, variableName, prefix) {\n  var oldValue = _get__(variableName);\n  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;\n  _assign__(variableName, newValue);\n  return prefix ? newValue : oldValue;\n}\nfunction _set__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (typeof variableName === 'object') {\n    Object.keys(variableName).forEach(function (name) {\n      rewireData[name] = variableName[name];\n    });\n    return function () {\n      Object.keys(variableName).forEach(function (name) {\n        _reset__(variableName);\n      });\n    };\n  } else {\n    _maybe_update_export__(variableName, value);\n    if (value === undefined) {\n      rewireData[variableName] = INTENTIONAL_UNDEFINED;\n    } else {\n      rewireData[variableName] = value;\n    }\n    return function () {\n      _reset__(variableName);\n    };\n  }\n}\nfunction _reset__(variableName) {\n  let rewireData = _getRewiredData__();\n  delete rewireData[variableName];\n  if (Object.keys(rewireData).length == 0) {\n    delete _getRewireRegistry__()[_getRewireModuleId__];\n  }\n  if (_exports_to_reset__.has(variableName)) {\n    exports[variableName] = _exports_to_reset__.get(variableName);\n    _exports_to_reset__.delete(variableName);\n  }\n}\nfunction _with__(object) {\n  let rewireData = _getRewiredData__();\n  var rewiredVariableNames = Object.keys(object);\n  var previousValues = {};\n  function reset() {\n    rewiredVariableNames.forEach(function (variableName) {\n      rewireData[variableName] = previousValues[variableName];\n    });\n  }\n  return function (callback) {\n    rewiredVariableNames.forEach(function (variableName) {\n      previousValues[variableName] = rewireData[variableName];\n      rewireData[variableName] = object[variableName];\n    });\n    let result = callback();\n    if (!!result && typeof result.then == 'function') {\n      result.then(reset).catch(reset);\n    } else {\n      reset();\n    }\n    return result;\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_RewireAPI__);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@c3/ui/UiSdlUseData.ts_uiInfrastructure\n");

/***/ })

}]);