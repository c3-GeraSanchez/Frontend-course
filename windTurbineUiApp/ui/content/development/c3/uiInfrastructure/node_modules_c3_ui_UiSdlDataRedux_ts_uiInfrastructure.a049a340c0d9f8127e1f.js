"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkjs_webpack_c3_client_node"] = self["webpackChunkjs_webpack_c3_client_node"] || []).push([["node_modules_c3_ui_UiSdlDataRedux_ts_uiInfrastructure"],{

/***/ "./node_modules/@c3/ui/UiSdlDataRedux.ts_uiInfrastructure":
/*!***********************************************!*\
  !*** ./node_modules/@c3/ui/UiSdlDataRedux.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __GetDependency__: () => (/* binding */ _get__),\n/* harmony export */   __ResetDependency__: () => (/* binding */ _reset__),\n/* harmony export */   __RewireAPI__: () => (/* binding */ _RewireAPI__),\n/* harmony export */   __Rewire__: () => (/* binding */ _set__),\n/* harmony export */   __get__: () => (/* binding */ _get__),\n/* harmony export */   __set__: () => (/* binding */ _set__),\n/* harmony export */   actionCreators: () => (/* binding */ actionCreators),\n/* harmony export */   addDataAction: () => (/* binding */ addDataAction),\n/* harmony export */   addImplicitContextVars: () => (/* binding */ addImplicitContextVars),\n/* harmony export */   ajax: () => (/* reexport safe */ _c3_ui_Ajax__WEBPACK_IMPORTED_MODULE_16__.ajax),\n/* harmony export */   appendToStoredValue: () => (/* binding */ appendToStoredValue),\n/* harmony export */   applyDataTransforms: () => (/* reexport safe */ _c3_ui_WithDataTransforms__WEBPACK_IMPORTED_MODULE_17__.applyDataTransforms),\n/* harmony export */   applyTransformArgs: () => (/* reexport safe */ _c3_ui_WithDataTransforms__WEBPACK_IMPORTED_MODULE_17__.applyTransformArgs),\n/* harmony export */   argumentsMergeEffect: () => (/* binding */ argumentsMergeEffect),\n/* harmony export */   cancelChangeAction: () => (/* binding */ cancelChangeAction),\n/* harmony export */   cancelRequestDataAction: () => (/* binding */ cancelRequestDataAction),\n/* harmony export */   changeCancelEffect: () => (/* binding */ changeCancelEffect),\n/* harmony export */   createUniqueIdAction: () => (/* binding */ createUniqueIdAction),\n/* harmony export */   dataAddEffect: () => (/* binding */ dataAddEffect),\n/* harmony export */   dataConfigUpdateEffect: () => (/* binding */ dataConfigUpdateEffect),\n/* harmony export */   dataDeleteReducer: () => (/* binding */ dataDeleteReducer),\n/* harmony export */   dataModifyEffect: () => (/* binding */ dataModifyEffect),\n/* harmony export */   dataReceiveEffect: () => (/* binding */ dataReceiveEffect),\n/* harmony export */   dataReceiveEpic: () => (/* binding */ dataReceiveEpic),\n/* harmony export */   dataSetEffect: () => (/* binding */ dataSetEffect),\n/* harmony export */   dataTypeUpdateEffect: () => (/* binding */ dataTypeUpdateEffect),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaultValues: () => (/* binding */ defaultValues),\n/* harmony export */   deleteDataAction: () => (/* binding */ deleteDataAction),\n/* harmony export */   epics: () => (/* binding */ epics),\n/* harmony export */   errorReceiveEffect: () => (/* binding */ errorReceiveEffect),\n/* harmony export */   handleLoadedDataAction: () => (/* binding */ handleLoadedDataAction),\n/* harmony export */   loadedDataAction: () => (/* binding */ loadedDataAction),\n/* harmony export */   loadedDataHandleReducer: () => (/* binding */ loadedDataHandleReducer),\n/* harmony export */   mapStateToData: () => (/* binding */ mapStateToData),\n/* harmony export */   mapStateToDataAdditions: () => (/* binding */ mapStateToDataAdditions),\n/* harmony export */   mapStateToMetadata: () => (/* binding */ mapStateToMetadata),\n/* harmony export */   mapStateToOriginalData: () => (/* binding */ mapStateToOriginalData),\n/* harmony export */   mergeArgumentsAction: () => (/* binding */ mergeArgumentsAction),\n/* harmony export */   modifyDataAction: () => (/* binding */ modifyDataAction),\n/* harmony export */   persistChangeErrorUpdateEffect: () => (/* binding */ persistChangeErrorUpdateEffect),\n/* harmony export */   receiveDataAction: () => (/* binding */ receiveDataAction),\n/* harmony export */   receiveErrorAction: () => (/* binding */ receiveErrorAction),\n/* harmony export */   reducers: () => (/* binding */ reducers),\n/* harmony export */   requestDataAction: () => (/* binding */ requestDataAction),\n/* harmony export */   resolveRequestArguments: () => (/* binding */ resolveRequestArguments),\n/* harmony export */   saveDataAction: () => (/* binding */ saveDataAction),\n/* harmony export */   setDataAction: () => (/* binding */ setDataAction),\n/* harmony export */   tunneledAjax: () => (/* reexport safe */ _c3_ui_Ajax__WEBPACK_IMPORTED_MODULE_16__.tunneledAjax),\n/* harmony export */   updateCountDataAction: () => (/* binding */ updateCountDataAction),\n/* harmony export */   updateDataConfigAction: () => (/* binding */ updateDataConfigAction),\n/* harmony export */   updateDataTypeAction: () => (/* binding */ updateDataTypeAction),\n/* harmony export */   updatePersistChangeErrorAction: () => (/* binding */ updatePersistChangeErrorAction)\n/* harmony export */ });\n/* harmony import */ var lodash_clone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/clone */ \"webpack/sharing/consume/default/lodash/clone/lodash/clone_uiInfrastructure\");\n/* harmony import */ var lodash_clone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_clone__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/cloneDeep */ \"webpack/sharing/consume/default/lodash/cloneDeep/lodash/cloneDeep_uiInfrastructure\");\n/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/get */ \"webpack/sharing/consume/default/lodash/get/lodash/get_uiInfrastructure\");\n/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_get__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_isArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/isArray */ \"webpack/sharing/consume/default/lodash/isArray/lodash/isArray_uiInfrastructure\");\n/* harmony import */ var lodash_isArray__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_isArray__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/isEmpty */ \"webpack/sharing/consume/default/lodash/isEmpty/lodash/isEmpty_uiInfrastructure\");\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var lodash_isObject__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/isObject */ \"webpack/sharing/consume/default/lodash/isObject/lodash/isObject_uiInfrastructure\");\n/* harmony import */ var lodash_isObject__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_isObject__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/isUndefined */ \"webpack/sharing/consume/default/lodash/isUndefined/lodash/isUndefined_uiInfrastructure\");\n/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(lodash_isUndefined__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var lodash_differenceWith__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash/differenceWith */ \"webpack/sharing/consume/default/lodash/differenceWith/lodash/differenceWith_uiInfrastructure\");\n/* harmony import */ var lodash_differenceWith__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(lodash_differenceWith__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash/isEqual */ \"webpack/sharing/consume/default/lodash/isEqual/lodash/isEqual_uiInfrastructure\");\n/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(lodash_isEqual__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var lodash_set__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash/set */ \"webpack/sharing/consume/default/lodash/set/lodash/set_uiInfrastructure\");\n/* harmony import */ var lodash_set__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(lodash_set__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var lodash_isNil__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash/isNil */ \"webpack/sharing/consume/default/lodash/isNil/lodash/isNil_uiInfrastructure\");\n/* harmony import */ var lodash_isNil__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(lodash_isNil__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs/operators */ \"webpack/sharing/consume/default/rxjs/operators_uiInfrastructure\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ \"webpack/sharing/consume/default/rxjs_uiInfrastructure\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(rxjs__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var immutable__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! immutable */ \"webpack/sharing/consume/default/immutable_uiInfrastructure\");\n/* harmony import */ var immutable__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(immutable__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @c3/ui/UiSdlConnected */ \"webpack/sharing/consume/default/@c3/ui/UiSdlConnected_uiInfrastructure\");\n/* harmony import */ var _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var _c3_ui_UiSdlDynamicValueSpec__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @c3/ui/UiSdlDynamicValueSpec */ \"webpack/container/remote/@c3/ui/UiSdlDynamicValueSpec_uiInfrastructure\");\n/* harmony import */ var _c3_ui_UiSdlDynamicValueSpec__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_UiSdlDynamicValueSpec__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _c3_ui_Ajax__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @c3/ui/Ajax */ \"webpack/container/remote/@c3/ui/Ajax_uiInfrastructure\");\n/* harmony import */ var _c3_ui_Ajax__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_Ajax__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var _c3_ui_WithDataTransforms__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @c3/ui/WithDataTransforms */ \"webpack/sharing/consume/default/@c3/ui/WithDataTransforms_uiInfrastructure\");\n/* harmony import */ var _c3_ui_WithDataTransforms__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_c3_ui_WithDataTransforms__WEBPACK_IMPORTED_MODULE_17__);\n/*\n * Copyright 2009-2024 C3 AI (www.c3.ai). All Rights Reserved.\n * This material, including without limitation any software, is the confidential trade secret and proprietary\n * information of C3 and its licensors. Reproduction, use and/or distribution of this material in any form is\n * strictly prohibited except as set forth in a written license agreement with C3 and/or its authorized distributors.\n * This material may be covered by one or more patents or pending patent applications.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// TODO SDL-1448\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * An internal reducer for changing the id of a data record.\n * @param state The Redux state.\n * @param action A DATA_MODIFY action.\n * @returns The updated Redux state.\n */\nconst dataIdUpdateReducer = (state, action) => {\n  var _get__$toJS, _get__2, _get__$toJS2, _get__3, _get__$toJS3, _get__4;\n  /**\n   * The dataSourceId from action.meta should be used here because the component\n   * that triggers this reducer is the data context component\n   */\n  const dataId = action.meta.dataSourceId;\n  const editedRecordId = action.payload.id;\n  const editedFieldName = action.payload.field;\n  const editedFieldValue = action.payload.newValue || null;\n  const newRecordId = action.payload.newValue;\n  const edits = (_get__$toJS = (_get__2 = _get__(\"getDataSourceFromState\")(dataId, state, ['edits'])) === null || _get__2 === void 0 ? void 0 : _get__2.toJS()) !== null && _get__$toJS !== void 0 ? _get__$toJS : {};\n  const additions = (_get__$toJS2 = (_get__3 = _get__(\"getDataSourceFromState\")(dataId, state, ['additions'])) === null || _get__3 === void 0 ? void 0 : _get__3.toJS()) !== null && _get__$toJS2 !== void 0 ? _get__$toJS2 : [];\n  const deletions = (_get__$toJS3 = (_get__4 = _get__(\"getDataSourceFromState\")(dataId, state, ['deletions'])) === null || _get__4 === void 0 ? void 0 : _get__4.toJS()) !== null && _get__$toJS3 !== void 0 ? _get__$toJS3 : [];\n  const originalData = _get__(\"UiSdlConnected_getDataFromState\")(dataId, state, true);\n  const modifiedData = _get__(\"clone\")(_get__(\"UiSdlConnected_getDataFromState\")(dataId, state));\n  const findIndexById = (fetchResult, id) => {\n    var _fetchResult$objs$fin;\n    return (_fetchResult$objs$fin = fetchResult === null || fetchResult === void 0 ? void 0 : fetchResult.objs.findIndex(obj => obj.id === id)) !== null && _fetchResult$objs$fin !== void 0 ? _fetchResult$objs$fin : -1;\n  };\n\n  // Try to find the records in the fetch results\n  const originalDataIndex = findIndexById(originalData, editedRecordId);\n  const modifiedDataIndex = findIndexById(modifiedData, editedRecordId);\n  const targetModifiedDataIndex = findIndexById(modifiedData, newRecordId);\n  const targetOriginalDataIndex = findIndexById(originalData, newRecordId);\n  const isDeletingOriginalRecord = originalDataIndex !== -1;\n  const isRestoringOriginalRecord = targetOriginalDataIndex !== -1;\n  const isReplacingExistingRecord = targetModifiedDataIndex !== -1;\n\n  // If not restoring a previously-deleted record, then this is a net new record\n  const isNetNewRecord = !isRestoringOriginalRecord && !isReplacingExistingRecord;\n\n  // Update `deletions` in the data source state\n  if (isDeletingOriginalRecord) {\n    const updatedDeletions = deletions.concat([editedRecordId]);\n    state = _get__(\"setDataSourceInState\")(dataId, state, ['deletions'], updatedDeletions);\n  } else if (isRestoringOriginalRecord) {\n    const updatedDeletions = deletions.filter(id => id !== newRecordId);\n    state = _get__(\"setDataSourceInState\")(dataId, state, ['deletions'], updatedDeletions);\n  }\n\n  // Update `additions` in the data source state\n  let updatedAdditions;\n  if (additions.indexOf(editedRecordId) !== -1) {\n    // Previously-added record is being removed\n    updatedAdditions = additions.filter(id => id !== editedRecordId);\n  }\n  if (isNetNewRecord) {\n    updatedAdditions = (updatedAdditions || additions).concat([newRecordId]);\n  }\n  if (updatedAdditions) {\n    state = _get__(\"setDataSourceInState\")(dataId, state, ['additions'], updatedAdditions);\n  }\n\n  /**\n   * Produces a list of field names that are different between the two objects.\n   * @param originalObj The first object to compare.\n   * @param newObj The second object to compare.\n   * @returns An array of field names that are different in the new object.\n   */\n  const detectEditedFieldNames = (originalObj, newObj) => {\n    const originalEntries = Object.entries(originalObj);\n    const newEntries = Object.entries(newObj);\n    const differentEntries = _get__(\"differenceWith\")(newEntries, originalEntries, _get__(\"isEqual\"));\n\n    // Extract field names from entries\n    return differentEntries.map(([fieldName, _fieldValue]) => fieldName);\n  };\n\n  // Update `edits` in the data source state\n  let updatedEdits;\n  if (isRestoringOriginalRecord) {\n    // Find the difference between the original record and the new record\n    const originalRecord = originalData.objs[targetOriginalDataIndex];\n    const currentRecord = _get__(\"clone\")(modifiedData.objs[modifiedDataIndex]);\n    _get__(\"set\")(currentRecord, editedFieldName, editedFieldValue);\n    const newRecordEdits = detectEditedFieldNames(originalRecord, currentRecord);\n    updatedEdits = {\n      ...edits,\n      ...(newRecordEdits.length > 0 ? {\n        [newRecordId]: newRecordEdits\n      } : null)\n    };\n\n    // Remove the old record ID\n    delete updatedEdits[editedRecordId];\n  } else if (edits[editedRecordId]) {\n    if (isNetNewRecord) {\n      // Added records by definition don't have any edits\n      updatedEdits = {\n        ...edits\n      };\n      delete updatedEdits[editedRecordId];\n    } else {\n      updatedEdits = {\n        ...edits,\n        [newRecordId]: edits[editedRecordId]\n      };\n\n      // Remove the old record ID\n      delete updatedEdits[editedRecordId];\n    }\n  }\n  if (updatedEdits) {\n    state = _get__(\"setDataSourceInState\")(dataId, state, ['edits'], updatedEdits);\n  }\n\n  // Update the data itself\n\n  if (isReplacingExistingRecord) {\n    // Remove the existing record with the conflicting ID\n    modifiedData.objs = modifiedData.objs.filter(obj => obj.id !== newRecordId);\n    modifiedData.count = modifiedData.objs.length;\n  }\n  if (modifiedData.objs) {\n    // This cannot be computed earlier because the indexes may change if a conflict was removed above.\n    const modifiedDataIndex = findIndexById(modifiedData, editedRecordId);\n    _get__(\"set\")(modifiedData.objs[modifiedDataIndex], editedFieldName, editedFieldValue);\n  } else {\n    _get__(\"set\")(modifiedData, editedFieldName, editedFieldValue);\n  }\n  state = _get__(\"UiSdlConnected_setDataInState\")(dataId, state, modifiedData);\n  return state;\n};\nconst appendToStoredValue = (dataSourceId, newData, state) => {\n  const data = _get__(\"UiSdlConnected_getDataFromState\")(dataSourceId, state);\n  newData.objs = newData.objs ? data.objs.concat(newData.objs) : data.objs;\n  return newData;\n};\n\n/**\n * Provides the state slice corresponding to this data source. Consumed by components through mapStateToProps\n * @param {Object} state The new state from redux\n */\nfunction mapStateToData(id, state) {\n  return _get__(\"UiSdlConnected_getDataFromState\")(id, state);\n}\nfunction mapStateToOriginalData(id, state) {\n  return _get__(\"UiSdlConnected_getDataFromState\")(id, state, true);\n}\nfunction mapStateToMetadata(id, state) {\n  return _get__(\"getDataSourceFromState\")(id, state);\n}\nfunction mapStateToDataAdditions(id, state) {\n  return _get__(\"getDataSourceFromState\")(id, state, ['additions']);\n}\nfunction updatePersistChangeErrorAction(id, errors) {\n  return {\n    type: id + '.PERSIST_CHANGE_ERROR_UPDATE',\n    payload: {\n      errors\n    },\n    meta: {\n      componentId: id,\n      dataSourceId: id\n    }\n  };\n}\nfunction mergeArgumentsAction(id, args, sourceMetadataId) {\n  return {\n    type: id + '.ARGUMENTS_MERGE',\n    payload: {\n      arguments: args,\n      sourceMetadataId: sourceMetadataId\n    },\n    meta: {\n      componentId: id,\n      dataSourceId: id\n    }\n  };\n}\nfunction updateDataTypeAction(id, newType) {\n  return {\n    type: id + '.DATA_TYPE_UPDATE',\n    payload: {\n      componentId: id,\n      newType\n    },\n    meta: {\n      componentId: id,\n      dataSourceId: id\n    }\n  };\n}\nfunction updateDataConfigAction(id, newConfig, contextVars, metadataId) {\n  const payload = {\n    ...newConfig\n  };\n  payload.contextVars = contextVars;\n  payload.metadataId = metadataId;\n  return {\n    type: id + '.DATA_CONFIG_UPDATE',\n    payload: payload,\n    meta: {\n      componentId: id,\n      dataSourceId: id\n    }\n  };\n}\nfunction updateCountDataAction(id) {\n  return {\n    type: id + '.UPDATE_DATA_COUNT',\n    payload: {\n      componentId: id\n    }\n  };\n}\nfunction requestDataAction(id, actionTransforms, mode, args) {\n  const payload = {\n    actionTransforms: actionTransforms,\n    componentId: id\n  };\n  if (mode) {\n    payload.mode = mode;\n  }\n  if (args) {\n    payload.arguments = args;\n  }\n  return {\n    type: id + '.DATA_REQUEST',\n    payload\n  };\n}\nfunction setDataAction(id, originalData, modifiedData) {\n  return {\n    type: id + '.DATA_SET',\n    payload: {\n      original: originalData,\n      modified: modifiedData\n    }\n  };\n}\nfunction cancelRequestDataAction(id) {\n  return {\n    type: id + '.CANCEL_DATA_REQUEST'\n  };\n}\nfunction loadedDataAction(id) {\n  return {\n    type: id + '.DATA_LOADED'\n  };\n}\nfunction handleLoadedDataAction(id) {\n  return {\n    type: id + '.LOADED_DATA_HANDLE',\n    payload: {\n      componentId: id\n    }\n  };\n}\nfunction saveDataAction(id) {\n  return {\n    type: id + '.DATA_SAVE',\n    payload: {\n      componentId: id\n    }\n  };\n}\nfunction deleteDataAction(id, ids) {\n  return {\n    type: id + '.DATA_DELETE',\n    payload: {\n      ids: ids\n    },\n    meta: {\n      componentId: id,\n      dataSourceId: id\n    }\n  };\n}\nfunction addDataAction(id, itemId, isError, insertLocation) {\n  return {\n    type: id + '.DATA_ADD',\n    payload: {\n      id: itemId,\n      insertLocation: insertLocation\n    },\n    meta: {\n      dataSourceId: id\n    },\n    error: isError\n  };\n}\nfunction createUniqueIdAction(id) {\n  return {\n    type: id + '.ID_CREATE',\n    payload: {\n      dataSourceId: id\n    }\n  };\n}\nfunction modifyDataAction(id, itemId, field, newValue) {\n  return {\n    type: id + '.DATA_MODIFY',\n    payload: {\n      id: itemId,\n      field: field,\n      newValue: newValue\n    },\n    meta: {\n      dataSourceId: id\n    }\n  };\n}\nfunction cancelChangeAction(id, loadOriginalData) {\n  // Default value should be true\n  if (loadOriginalData === undefined) {\n    loadOriginalData = true;\n  }\n  return {\n    type: id + '.CHANGE_CANCEL',\n    payload: {\n      loadOriginalData: loadOriginalData\n    },\n    meta: {\n      componentId: id,\n      dataSourceId: id\n    }\n  };\n}\nfunction receiveErrorAction(id, errorMessage) {\n  return {\n    type: id + '.ERROR_RECEIVE',\n    payload: {\n      errorMessage\n    },\n    meta: {\n      componentId: id,\n      dataSourceId: id\n    }\n  };\n}\nfunction receiveDataAction(id, response, isError) {\n  return {\n    type: id + '.DATA_RECEIVE',\n    payload: response,\n    meta: {\n      componentId: id,\n      dataSourceId: id\n    },\n    error: isError\n  };\n}\nfunction errorReceiveEffect(state, action) {\n  const dataId = action.meta.dataSourceId;\n  const errorToReceive = action.payload.errorMessage;\n  state = _get__(\"setDataSourceInState\")(dataId, state, ['errorMessage'], errorToReceive);\n  return state;\n}\nfunction dataReceiveEffect(state, action) {\n  /**\n   * The dataSourceId from action.meta should be used here because the component\n   * that triggers this reducer is the data context component\n   */\n  const dataId = action.meta.dataSourceId;\n  // Check for error, if true, return state\n  if (action.error) {\n    return state;\n  }\n  const dataToReceive = action.payload;\n  const deletions = [];\n  const additions = [];\n  const persistChangeErrors = [];\n  const edits = {};\n  state = _get__(\"setDataSourceInState\")(dataId, state, ['errorMessage'], null);\n  state = _get__(\"setDataSourceInState\")(dataId, state, ['deletions'], deletions);\n  state = _get__(\"setDataSourceInState\")(dataId, state, ['additions'], additions);\n  state = _get__(\"setDataSourceInState\")(dataId, state, ['persistChangeErrors'], persistChangeErrors);\n  state = _get__(\"setDataSourceInState\")(dataId, state, ['edits'], edits);\n  /*\n   * Effectively clone payload to ensure that 'original' and 'modified' are distinct entities.\n   * If the dataToReceive is a primitive, Immutable.fromJS will fail (and there's no need to clone primitives, anyway)\n   */\n  const isPrimitive = !(_get__(\"isObject\")(dataToReceive) || _get__(\"isArray\")(dataToReceive));\n\n  // Immutable.fromJS(dataToReceive).toJS() is needed to make a deep clone of the dataToReceive.\n  const original = isPrimitive ? dataToReceive : _get__(\"fromJS\")(dataToReceive).toJS();\n  const modified = isPrimitive ? dataToReceive : _get__(\"fromJS\")(dataToReceive).toJS();\n  state = _get__(\"UiSdlConnected_setDataInState\")(dataId, state, original, true);\n  state = _get__(\"UiSdlConnected_setDataInState\")(dataId, state, modified);\n  return state;\n}\nfunction dataSetEffect(state, action) {\n  /**\n   * The dataSourceId from action.meta should be used here because the component\n   * that triggers this reducer is the data context component\n   */\n  const dataId = action.meta.dataSourceId;\n  if (!_get__(\"isNil\")(action.payload.original)) {\n    state = _get__(\"UiSdlConnected_setDataInState\")(dataId, state, action.payload.original, true);\n  }\n  if (!_get__(\"isNil\")(action.payload.modified)) {\n    state = _get__(\"UiSdlConnected_setDataInState\")(dataId, state, action.payload.modified);\n  }\n  return state;\n}\nfunction persistChangeErrorUpdateEffect(state, action) {\n  return _get__(\"setDataSourceInState\")(action.meta.componentId, state, ['persistChangeErrors'], action.payload);\n}\nfunction argumentsMergeEffect(state, action) {\n  var _args;\n  /**\n   * The dataSourceId from action.meta should be used here because the component\n   * that triggers this reducer is the data context component\n   */\n  const dataId = action.meta.dataSourceId;\n  let args = action.payload.arguments;\n  let filters;\n\n  // TODO: ENGR-13110\n  if (action.payload.sourceMetadataId && ((_args = args) === null || _args === void 0 || (_args = _args.spec) === null || _args === void 0 ? void 0 : _args.filter) !== undefined) {\n    var _get__$toJS4, _get__5;\n    filters = (_get__$toJS4 = (_get__5 = _get__(\"getDataSourceFromState\")(dataId, state, ['additionalFilters'])) === null || _get__5 === void 0 ? void 0 : _get__5.toJS()) !== null && _get__$toJS4 !== void 0 ? _get__$toJS4 : {};\n    if (args.spec.filter) {\n      filters[action.payload.sourceMetadataId] = args.spec.filter;\n    } else {\n      delete filters[action.payload.sourceMetadataId];\n    }\n    state = _get__(\"setDataSourceInState\")(dataId, state, ['additionalFilters'], filters);\n  }\n  const mergeDeepAndReplaceNonObjects = function (a, b) {\n    // Javascript objects are converted to Immutable.Maps\n    if (a && a.mergeWith && _get__(\"Map\").isMap(b) && _get__(\"Map\").isMap(a)) {\n      return a.mergeWith(mergeDeepAndReplaceNonObjects, b);\n    }\n    return b;\n  };\n  const oldArgs = _get__(\"getDataSourceFromState\")(dataId, state, ['c3arguments']);\n  if (oldArgs) {\n    /**\n     * The `mergeDeep` function does index level replacement for arrays. e.g. [1, 2, 3] mergeDeep [5, 6] => [5, 6, 3]\n     * A custom merge function is used here so we can replace the whole array during merge.\n     * The custom merge function replaces the old value with the new value if neither is an object.\n     * Otherwise, it merges each field of the objects recursively.\n     */\n    args = oldArgs.mergeWith(mergeDeepAndReplaceNonObjects, args);\n  }\n  return _get__(\"setDataSourceInState\")(dataId, state, ['c3arguments'], args);\n}\nconst getAllIdsFromData = data => {\n  const ids = [];\n  data.forEach(child => {\n    ids.push(child.obj.id);\n  });\n  return ids;\n};\nconst getAllChildIdsFromParentId = (parentId, data) => {\n  let childIds = [];\n  data.forEach(function (child) {\n    var _child$node;\n    if (((_child$node = child.node) === null || _child$node === void 0 || (_child$node = _child$node.parent) === null || _child$node === void 0 ? void 0 : _child$node.nodeId) === parentId) {\n      childIds.push(child.node.nodeId);\n      if (child.expanded) {\n        // If the child is expanded, we want to get its children too\n        childIds = childIds.concat(_get__(\"getAllChildIdsFromParentId\")(child.node.nodeId, data));\n      }\n    }\n  });\n  return childIds;\n};\nfunction loadedDataHandleReducer(state, action) {\n  var _action$payload$curre;\n  const componentId = action.payload.componentId;\n  const receivedData = action.payload.data;\n  const currentExpandedNode = (_action$payload$curre = action.payload.currentNode) === null || _action$payload$curre === void 0 ? void 0 : _action$payload$curre.nodeId;\n  const isSelectedAll = _get__(\"getConfigFromState\")(componentId, state, ['isSelectedAll']) || false;\n  let selectedItemIds = _get__(\"getConfigFromState\")(componentId, state, ['selectedItemIds']) || _get__(\"fromJS\")([]);\n  if (isSelectedAll) {\n    const dataIds = receivedData && _get__(\"getAllIdsFromData\")(receivedData.objs);\n    selectedItemIds = selectedItemIds.concat(dataIds);\n  }\n  // If parent is selected, select all its children\n  else if (currentExpandedNode && selectedItemIds.includes(currentExpandedNode)) {\n    const childIds = _get__(\"getAllChildIdsFromParentId\")(currentExpandedNode, receivedData.objs);\n    selectedItemIds = selectedItemIds.concat(childIds);\n  }\n  return _get__(\"setConfigInState\")(componentId, state, ['selectedItemIds'], selectedItemIds);\n}\nfunction dataTypeUpdateEffect(state, action) {\n  return _get__(\"setDataSourceInState\")(action.payload.componentId || action.meta.componentId, state, ['c3type'], action.payload.newType);\n}\nfunction dataConfigUpdateEffect(state, action) {\n  /**\n   * The dataSourceId from action.meta should be used here because the component\n   * that triggers this reducer is the data context component\n   */\n  const dataId = action.meta.dataSourceId;\n  const {\n    payload\n  } = action;\n  const {\n    typeName,\n    actionName,\n    contextVars,\n    metadataId,\n    args,\n    dataTransforms,\n    tunnelConfiguration,\n    dataSpecDependence\n  } = payload;\n  let newState = state;\n  if (payload) {\n    if (typeName) {\n      newState = _get__(\"setDataSourceInState\")(dataId, newState, ['c3type'], typeName);\n    }\n    if (actionName) {\n      newState = _get__(\"setDataSourceInState\")(dataId, newState, ['c3function'], actionName);\n    }\n    if (contextVars) {\n      newState = _get__(\"setDataSourceInState\")(dataId, newState, ['contextVars'], contextVars);\n    }\n    if (metadataId) {\n      newState = _get__(\"setDataSourceInState\")(dataId, newState, ['metadataId'], metadataId);\n    }\n    if (args) {\n      newState = _get__(\"setDataSourceInState\")(dataId, newState, ['c3arguments'], args);\n    }\n    if (dataTransforms) {\n      newState = _get__(\"setDataSourceInState\")(dataId, newState, ['dataTransforms'], dataTransforms);\n    }\n    if (tunnelConfiguration) {\n      newState = _get__(\"setDataSourceInState\")(dataId, newState, ['tunnelConfiguration'], tunnelConfiguration);\n    }\n    if (dataSpecDependence) {\n      newState = _get__(\"setDataSourceInState\")(dataId, newState, ['dataSpecDependence'], dataSpecDependence);\n    }\n  }\n  return newState;\n}\n\n/**\n * Adds implicit context vars to contextVars map. Does not override existing contextVar with implicit context vars.\n * @param contextVars\n *            The existing contextVars\n * @param state\n *             The redux state\n */\n// TODO: UI-4756 Remove ability to implicitly resolve page params\nfunction addImplicitContextVars(contextVars, state) {\n  const pageParams = _get__(\"getPageParamsFromState\")(state);\n  Object.keys(pageParams).map(param => {\n    if (!contextVars[param]) {\n      // Do not override any contextVars that are already specified with this key\n      contextVars[param] = {\n        type: 'UiSdlPageParam',\n        path: param\n      };\n    }\n  });\n  return contextVars;\n}\nfunction resolveRequestArguments(dataId, state) {\n  var _actionArguments;\n  let actionArguments = _get__(\"getDataSourceFromState\")(dataId, state, ['c3arguments']);\n  actionArguments = _get__(\"Iterable\").isIterable(actionArguments) ? actionArguments.toJS() : _get__(\"clone\")(actionArguments) || {};\n\n  // TODO: ENGR-13110\n  actionArguments.spec = ((_actionArguments = actionArguments) === null || _actionArguments === void 0 ? void 0 : _actionArguments.spec) || {};\n  if (_get__(\"isUndefined\")(actionArguments.spec.filter)) {\n    actionArguments.spec.filter = '';\n  }\n  const additionalFilters = _get__(\"getDataSourceFromState\")(dataId, state, ['additionalFilters']);\n  if (!_get__(\"isEmpty\")(additionalFilters)) {\n    const filters = new Set();\n    if (!_get__(\"isEmpty\")(actionArguments.spec.filter)) {\n      filters.add(`(${actionArguments.spec.filter})`);\n    }\n    if (additionalFilters) {\n      additionalFilters.forEach(function (filter) {\n        filters.add(`(${filter})`);\n      });\n    }\n    actionArguments.spec.filter = Array.from(filters).join(' && ');\n  }\n  // We want to ensure we don't add unsupported field for custom actions. i.e: actions that don't have `spec` field or `action.spec` that doesn't have `filter`.\n  if (!actionArguments.spec.filter) {\n    delete actionArguments.spec.filter;\n  }\n  if (_get__(\"isEmpty\")(actionArguments.spec)) {\n    delete actionArguments.spec;\n  }\n\n  /*\n   * Explicit contextVars are specified directly.\n   * Implicit contextVars are vars that will be resolved without explicit declaration (ex: page params).\n   */\n  let contextVars = _get__(\"getDataSourceFromState\")(dataId, state, ['contextVars']);\n  contextVars = _get__(\"addImplicitContextVars\")(_get__(\"Iterable\").isIterable(contextVars) ? contextVars.toJS() : {}, state);\n  const resolutionContext = {\n    state,\n    metadataId: _get__(\"getDataSourceFromState\")(dataId, state, ['metadataId'])\n  };\n  // We need to resolve implicit and explicit context variables in the arguments.\n  return _get__(\"recursivelyResolveStringContent\")(actionArguments, contextVars, resolutionContext);\n}\nfunction dataReceiveEpic(actionStream) {\n  return actionStream.pipe(_get__(\"mergeMap\")(function (action) {\n    return _get__(\"of\")(_get__(\"loadedDataAction\")(action.meta.dataSourceId));\n  }));\n}\nfunction dataDeleteReducer(state, action) {\n  var _get__6, _get__7, _action$payload;\n  /**\n   * The dataSourceId from action.meta should be used here because the component\n   * that triggers this reducer is the data context component\n   */\n  const dataId = action.meta.dataSourceId;\n  let deletions = (_get__6 = _get__(\"getDataSourceFromState\")(dataId, state, ['deletions'])) === null || _get__6 === void 0 ? void 0 : _get__6.toJS();\n  let additions = (_get__7 = _get__(\"getDataSourceFromState\")(dataId, state, ['additions'])) === null || _get__7 === void 0 ? void 0 : _get__7.toJS();\n  // Workaround until USS-330 is implemented\n  const data = _get__(\"clone\")(_get__(\"UiSdlConnected_getDataFromState\")(dataId, state));\n  let index = -1;\n  let additionIndex = -1;\n  if (!Array.isArray(deletions)) {\n    deletions = [];\n  }\n  if (!Array.isArray(additions)) {\n    additions = [];\n  }\n  if (data === undefined) {\n    return state;\n  }\n  (_action$payload = action.payload) === null || _action$payload === void 0 || (_action$payload = _action$payload.ids) === null || _action$payload === void 0 || _action$payload.map(function (deleteId) {\n    index = data.objs.findIndex(function (obj) {\n      return obj.id === deleteId;\n    });\n    if (additions.length > 0) {\n      additionIndex = additions.findIndex(function (objId) {\n        return objId === deleteId;\n      });\n      // Remove from addition\n      if (additionIndex >= 0) {\n        additions.splice(additionIndex, 1);\n        state = _get__(\"setDataSourceInState\")(dataId, state, ['deletions'], additions);\n      }\n    }\n    if (index >= 0) {\n      deletions.push(deleteId);\n      data.objs.splice(index, 1);\n\n      // Keep the count synchronized.\n      if (data.hasOwnProperty('count')) {\n        data.count--;\n      }\n      state = _get__(\"UiSdlConnected_setDataInState\")(dataId, state, data);\n      state = _get__(\"setDataSourceInState\")(dataId, state, ['deletions'], deletions);\n    }\n  });\n  return state;\n}\nfunction dataAddEffect(state, action) {\n  /**\n   * The dataSourceId from action.meta should be used here because the component\n   * that triggers this reducer is the data context component\n   */\n  const dataId = action.meta.dataSourceId;\n  let additions = _get__(\"getDataSourceFromState\")(dataId, state, ['additions']);\n  const insertLocation = action.payload.insertLocation;\n  // Workaround until USS-330 is implemented\n  const data = _get__(\"clone\")(_get__(\"UiSdlConnected_getDataFromState\")(dataId, state)) || {};\n  if (!Array.isArray(additions)) {\n    additions = [];\n  }\n  // If data is empty when adding new data\n  if (!data.objs) {\n    additions.push(action.payload.id);\n    data.objs = [{\n      id: action.payload.id\n    }];\n    state = _get__(\"UiSdlConnected_setDataInState\")(dataId, state, data);\n    state = _get__(\"setDataSourceInState\")(dataId, state, ['additions'], additions);\n  } else {\n    const index = data.objs.findIndex(function (obj) {\n      return obj.id === action.payload.id;\n    });\n    if (index === -1) {\n      additions.push(action.payload.id);\n      /**\n       * Prepend all new data by default.  If we want to allow for inserting at an arbitrary position we will need to\n       * update the function signature to look for index instead of string (APPEND, PREPEND)\n       */\n      if (insertLocation === 'APPEND') {\n        data.objs.push({\n          id: action.payload.id\n        });\n      } else {\n        data.objs.unshift({\n          id: action.payload.id\n        });\n      }\n      state = _get__(\"UiSdlConnected_setDataInState\")(dataId, state, data);\n      state = _get__(\"setDataSourceInState\")(dataId, state, ['additions'], additions);\n    }\n  }\n  return state;\n}\nfunction dataModifyEffect(state, action) {\n  var _get__$toJS5, _get__8;\n  /**\n   * The dataSourceId from action.meta should be used here because the component\n   * that triggers this reducer is the data context component\n   */\n  const dataId = action.meta.dataSourceId;\n  const editedRecordId = action.payload.id;\n  const editedFieldName = action.payload.field;\n  let edits = (_get__$toJS5 = (_get__8 = _get__(\"getDataSourceFromState\")(dataId, state, ['edits'])) === null || _get__8 === void 0 ? void 0 : _get__8.toJS()) !== null && _get__$toJS5 !== void 0 ? _get__$toJS5 : {};\n  const originalData = _get__(\"cloneDeep\")(_get__(\"UiSdlConnected_getDataFromState\")(dataId, state, true));\n  let modifiedDataIndex = -1;\n  let originalDataIndex = -1;\n  let foundRecord;\n  const modifiedData = _get__(\"cloneDeep\")(_get__(\"UiSdlConnected_getDataFromState\")(dataId, state));\n\n  // Try to find the record in the fetch result\n  if (modifiedData !== null && modifiedData !== void 0 && modifiedData.objs) {\n    var _originalData$objs$fi, _originalData$objs;\n    modifiedDataIndex = modifiedData.objs.findIndex(obj => obj.id === editedRecordId);\n    originalDataIndex = (_originalData$objs$fi = originalData === null || originalData === void 0 || (_originalData$objs = originalData.objs) === null || _originalData$objs === void 0 ? void 0 : _originalData$objs.findIndex(obj => obj.id === editedRecordId)) !== null && _originalData$objs$fi !== void 0 ? _originalData$objs$fi : -1;\n\n    // If originalDataIndex is -1, data must be in modified (new) data\n    foundRecord = originalDataIndex === -1 ? modifiedData.objs[modifiedDataIndex] : originalData.objs[originalDataIndex];\n  } else {\n    foundRecord = modifiedData;\n  }\n\n  // If we are changing an item id, then process this transaction as a removal of the original object and creation of a new object.\n  if (editedFieldName === 'id') {\n    return _get__(\"dataIdUpdateReducer\")(state, action);\n  } else if (foundRecord) {\n    // If modify id is already in edits, push field name to its list\n    if (edits[editedRecordId]) {\n      // If the field hasn't been edited before add to the list\n      if (edits[editedRecordId].indexOf(editedFieldName) === -1) {\n        edits[editedRecordId].push(editedFieldName);\n        // If the field has been edited before\n      } else if (_get__(\"get\")(foundRecord, editedFieldName) === action.payload.newValue) {\n        // If the newValue equals to its original value, remove field name from the list otherwise do nothing\n        edits = {\n          ...edits,\n          [editedRecordId]: edits[editedRecordId].filter(field => field !== editedFieldName)\n        };\n      }\n      // If it is the first time to add modify id to edits, and the value is changed, create an array with field name\n    } else if (_get__(\"get\")(foundRecord, editedFieldName) !== action.payload.newValue) {\n      edits = {\n        ...edits,\n        [editedRecordId]: [editedFieldName]\n      };\n    }\n    if (modifiedData.objs) {\n      _get__(\"set\")(modifiedData.objs[modifiedDataIndex], editedFieldName, action.payload.newValue || null);\n    } else {\n      _get__(\"set\")(modifiedData, editedFieldName, action.payload.newValue || null);\n    }\n    state = _get__(\"UiSdlConnected_setDataInState\")(dataId, state, modifiedData);\n    state = _get__(\"setDataSourceInState\")(dataId, state, ['edits'], edits);\n  }\n  return state;\n}\nfunction changeCancelEffect(state, action) {\n  var _action$payload2;\n  /**\n   * The dataSourceId from action.meta should be used here because the component\n   * that triggers this reducer is the data context component\n   */\n  const dataId = action.meta.dataSourceId;\n  const loadOriginalData = (_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.loadOriginalData;\n  if (loadOriginalData) {\n    // Workaround until USS-330 is implemented\n    const originalData = _get__(\"clone\")(_get__(\"UiSdlConnected_getDataFromState\")(dataId, state, true));\n    state = _get__(\"UiSdlConnected_setDataInState\")(dataId, state, originalData);\n  }\n  state = _get__(\"setDataSourceInState\")(dataId, state, ['deletions'], []);\n  state = _get__(\"setDataSourceInState\")(dataId, state, ['additions'], []);\n  state = _get__(\"setDataSourceInState\")(dataId, state, ['persistChangeErrors'], []);\n  state = _get__(\"setDataSourceInState\")(dataId, state, ['edits'], {});\n  return state;\n}\n\n\n\n\nconst epics = {\n  DATA_RECEIVE: _get__(\"dataReceiveEpic\")\n};\nconst reducers = {\n  DATA_SET: _get__(\"dataSetEffect\"),\n  PERSIST_CHANGE_ERROR_UPDATE: _get__(\"persistChangeErrorUpdateEffect\"),\n  LOADED_DATA_HANDLE: _get__(\"loadedDataHandleReducer\"),\n  DATA_RECEIVE: _get__(\"dataReceiveEffect\"),\n  ERROR_RECEIVE: _get__(\"errorReceiveEffect\"),\n  ARGUMENTS_MERGE: _get__(\"argumentsMergeEffect\"),\n  DATA_TYPE_UPDATE: _get__(\"dataTypeUpdateEffect\"),\n  DATA_CONFIG_UPDATE: _get__(\"dataConfigUpdateEffect\"),\n  DATA_DELETE: _get__(\"dataDeleteReducer\"),\n  DATA_ADD: _get__(\"dataAddEffect\"),\n  DATA_MODIFY: _get__(\"dataModifyEffect\"),\n  CHANGE_CANCEL: _get__(\"changeCancelEffect\")\n};\nconst actionCreators = {\n  updatePersistChangeErrorAction: _get__(\"updatePersistChangeErrorAction\"),\n  mergeArgumentsAction: _get__(\"mergeArgumentsAction\"),\n  updateDataTypeAction: _get__(\"updateDataTypeAction\"),\n  updateDataConfigAction: _get__(\"updateDataConfigAction\"),\n  updateCountDataAction: _get__(\"updateCountDataAction\"),\n  requestDataAction: _get__(\"requestDataAction\"),\n  cancelRequestDataAction: _get__(\"cancelRequestDataAction\"),\n  receiveDataAction: _get__(\"receiveDataAction\"),\n  receiveErrorAction: _get__(\"receiveErrorAction\"),\n  setDataAction: _get__(\"setDataAction\"),\n  loadedDataAction: _get__(\"loadedDataAction\"),\n  handleLoadedDataAction: _get__(\"handleLoadedDataAction\"),\n  saveDataAction: _get__(\"saveDataAction\"),\n  deleteDataAction: _get__(\"deleteDataAction\"),\n  addDataAction: _get__(\"addDataAction\"),\n  createUniqueIdAction: _get__(\"createUniqueIdAction\"),\n  modifyDataAction: _get__(\"modifyDataAction\"),\n  cancelChangeAction: _get__(\"cancelChangeAction\")\n};\nconst defaultValues = {\n  \"REDUX_METADATA_NAMESPACE\": \"dataSources\",\n  \"effectTriggers\": [{\n    \"trigger\": \"DATA_SAVE\",\n    \"effectType\": \"UiSdlPersistChangesEpic\"\n  }, {\n    \"trigger\": \"ID_CREATE\",\n    \"effectType\": \"UiSdlUniqueIdCreateEpic\"\n  }, {\n    \"trigger\": [\"DATA_REQUEST\", \"CANCEL_DATA_REQUEST\"],\n    \"effectType\": \"UiSdlDataRequestEpic\"\n  }],\n  \"c3arguments\": {}\n};\n\n\nfunction _getGlobalObject() {\n  try {\n    if (!!__webpack_require__.g) {\n      return __webpack_require__.g;\n    }\n  } catch (e) {\n    try {\n      if (!!window) {\n        return window;\n      }\n    } catch (e) {\n      return this;\n    }\n  }\n}\n;\nvar _RewireModuleId__ = null;\nfunction _getRewireModuleId__() {\n  if (_RewireModuleId__ === null) {\n    let globalVariable = _getGlobalObject();\n    if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {\n      globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0;\n    }\n    _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++;\n  }\n  return _RewireModuleId__;\n}\nfunction _getRewireRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__;\n}\nfunction _getRewireExportsRegistry__() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__) {\n    theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n  }\n  return theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__;\n}\nconst _sync_internal_state_with_exports__ = false;\nconst _exports_to_reset__ = new immutable__WEBPACK_IMPORTED_MODULE_13__.Map();\nfunction _record_export_to_reset__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  if (!_exports_to_reset__.has(variableName)) {\n    _exports_to_reset__.set(variableName, value);\n  }\n}\nfunction _restore_exports__() {\n  const entries = _exports_to_reset__.entries();\n  for (const [variableName, value] of entries) {\n    exports[variableName] = value;\n  }\n  _exports_to_reset__.clear();\n}\nfunction _maybe_update_export__(variableName, value) {\n  if (!_sync_internal_state_with_exports__) {\n    return;\n  }\n  if (!Object.prototype.hasOwnProperty.call(exports, variableName)) {\n    return;\n  }\n  _record_export_to_reset__(variableName, exports[variableName]);\n  exports[variableName] = value;\n}\nfunction _getRewiredData__() {\n  let moduleId = _getRewireModuleId__();\n  let registry = _getRewireRegistry__();\n  let rewireData = registry[moduleId];\n  if (!rewireData) {\n    registry[moduleId] = Object.create(null);\n    rewireData = registry[moduleId];\n  }\n  let exportsRegistry = _getRewireExportsRegistry__();\n  if (!exportsRegistry[moduleId]) {\n    exportsRegistry[moduleId] = _restore_exports__;\n  }\n  return rewireData;\n}\n(function registerResetAll() {\n  let theGlobalVariable = _getGlobalObject();\n  if (!theGlobalVariable['__rewire_reset_all__']) {\n    theGlobalVariable['__rewire_reset_all__'] = function () {\n      theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null);\n      const exportsRegistry = _getRewireExportsRegistry__();\n      for (const restoreFunc of Object.values(exportsRegistry)) {\n        restoreFunc();\n      }\n      theGlobalVariable.__$$GLOBAL_REWIRE_EXPORTS_REGISTRY__ = Object.create(null);\n    };\n  }\n})();\nvar INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__';\nlet _RewireAPI__ = {};\n(function () {\n  function addPropertyToAPIObject(name, value) {\n    Object.defineProperty(_RewireAPI__, name, {\n      value: value,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  addPropertyToAPIObject('__get__', _get__);\n  addPropertyToAPIObject('__GetDependency__', _get__);\n  addPropertyToAPIObject('__Rewire__', _set__);\n  addPropertyToAPIObject('__set__', _set__);\n  addPropertyToAPIObject('__reset__', _reset__);\n  addPropertyToAPIObject('__ResetDependency__', _reset__);\n  addPropertyToAPIObject('__with__', _with__);\n})();\nfunction _get__(variableName) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _get_original__(variableName);\n  } else {\n    var value = rewireData[variableName];\n    if (value === INTENTIONAL_UNDEFINED) {\n      return undefined;\n    } else {\n      return value;\n    }\n  }\n}\nfunction _get_original__(variableName) {\n  switch (variableName) {\n    case \"getDataSourceFromState\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_14__.getDataSourceFromState;\n    case \"UiSdlConnected_getDataFromState\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_14__.getDataFromState;\n    case \"clone\":\n      return (lodash_clone__WEBPACK_IMPORTED_MODULE_0___default());\n    case \"setDataSourceInState\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_14__.setDataSourceInState;\n    case \"differenceWith\":\n      return (lodash_differenceWith__WEBPACK_IMPORTED_MODULE_7___default());\n    case \"isEqual\":\n      return (lodash_isEqual__WEBPACK_IMPORTED_MODULE_8___default());\n    case \"set\":\n      return (lodash_set__WEBPACK_IMPORTED_MODULE_9___default());\n    case \"UiSdlConnected_setDataInState\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_14__.setDataInState;\n    case \"isObject\":\n      return (lodash_isObject__WEBPACK_IMPORTED_MODULE_5___default());\n    case \"isArray\":\n      return (lodash_isArray__WEBPACK_IMPORTED_MODULE_3___default());\n    case \"fromJS\":\n      return immutable__WEBPACK_IMPORTED_MODULE_13__.fromJS;\n    case \"isNil\":\n      return (lodash_isNil__WEBPACK_IMPORTED_MODULE_10___default());\n    case \"Map\":\n      return immutable__WEBPACK_IMPORTED_MODULE_13__.Map;\n    case \"getAllChildIdsFromParentId\":\n      return getAllChildIdsFromParentId;\n    case \"getConfigFromState\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_14__.getConfigFromState;\n    case \"getAllIdsFromData\":\n      return getAllIdsFromData;\n    case \"setConfigInState\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_14__.setConfigInState;\n    case \"getPageParamsFromState\":\n      return _c3_ui_UiSdlConnected__WEBPACK_IMPORTED_MODULE_14__.getPageParamsFromState;\n    case \"Iterable\":\n      return immutable__WEBPACK_IMPORTED_MODULE_13__.Iterable;\n    case \"isUndefined\":\n      return (lodash_isUndefined__WEBPACK_IMPORTED_MODULE_6___default());\n    case \"isEmpty\":\n      return (lodash_isEmpty__WEBPACK_IMPORTED_MODULE_4___default());\n    case \"addImplicitContextVars\":\n      return addImplicitContextVars;\n    case \"recursivelyResolveStringContent\":\n      return _c3_ui_UiSdlDynamicValueSpec__WEBPACK_IMPORTED_MODULE_15__.recursivelyResolveStringContent;\n    case \"mergeMap\":\n      return rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.mergeMap;\n    case \"of\":\n      return rxjs__WEBPACK_IMPORTED_MODULE_12__.of;\n    case \"loadedDataAction\":\n      return loadedDataAction;\n    case \"cloneDeep\":\n      return (lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_1___default());\n    case \"dataIdUpdateReducer\":\n      return dataIdUpdateReducer;\n    case \"get\":\n      return (lodash_get__WEBPACK_IMPORTED_MODULE_2___default());\n    case \"dataReceiveEpic\":\n      return dataReceiveEpic;\n    case \"dataSetEffect\":\n      return dataSetEffect;\n    case \"persistChangeErrorUpdateEffect\":\n      return persistChangeErrorUpdateEffect;\n    case \"loadedDataHandleReducer\":\n      return loadedDataHandleReducer;\n    case \"dataReceiveEffect\":\n      return dataReceiveEffect;\n    case \"errorReceiveEffect\":\n      return errorReceiveEffect;\n    case \"argumentsMergeEffect\":\n      return argumentsMergeEffect;\n    case \"dataTypeUpdateEffect\":\n      return dataTypeUpdateEffect;\n    case \"dataConfigUpdateEffect\":\n      return dataConfigUpdateEffect;\n    case \"dataDeleteReducer\":\n      return dataDeleteReducer;\n    case \"dataAddEffect\":\n      return dataAddEffect;\n    case \"dataModifyEffect\":\n      return dataModifyEffect;\n    case \"changeCancelEffect\":\n      return changeCancelEffect;\n    case \"updatePersistChangeErrorAction\":\n      return updatePersistChangeErrorAction;\n    case \"mergeArgumentsAction\":\n      return mergeArgumentsAction;\n    case \"updateDataTypeAction\":\n      return updateDataTypeAction;\n    case \"updateDataConfigAction\":\n      return updateDataConfigAction;\n    case \"updateCountDataAction\":\n      return updateCountDataAction;\n    case \"requestDataAction\":\n      return requestDataAction;\n    case \"cancelRequestDataAction\":\n      return cancelRequestDataAction;\n    case \"receiveDataAction\":\n      return receiveDataAction;\n    case \"receiveErrorAction\":\n      return receiveErrorAction;\n    case \"setDataAction\":\n      return setDataAction;\n    case \"handleLoadedDataAction\":\n      return handleLoadedDataAction;\n    case \"saveDataAction\":\n      return saveDataAction;\n    case \"deleteDataAction\":\n      return deleteDataAction;\n    case \"addDataAction\":\n      return addDataAction;\n    case \"createUniqueIdAction\":\n      return createUniqueIdAction;\n    case \"modifyDataAction\":\n      return modifyDataAction;\n    case \"cancelChangeAction\":\n      return cancelChangeAction;\n  }\n  return undefined;\n}\nfunction _assign__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (rewireData[variableName] === undefined) {\n    return _set_original__(variableName, value);\n  } else {\n    _maybe_update_export__(variableName, value);\n    return rewireData[variableName] = value;\n  }\n}\nfunction _set_original__(variableName, _value) {\n  switch (variableName) {}\n  return undefined;\n}\nfunction _update_operation__(operation, variableName, prefix) {\n  var oldValue = _get__(variableName);\n  var newValue = operation === '++' ? oldValue + 1 : oldValue - 1;\n  _assign__(variableName, newValue);\n  return prefix ? newValue : oldValue;\n}\nfunction _set__(variableName, value) {\n  let rewireData = _getRewiredData__();\n  if (typeof variableName === 'object') {\n    Object.keys(variableName).forEach(function (name) {\n      rewireData[name] = variableName[name];\n    });\n    return function () {\n      Object.keys(variableName).forEach(function (name) {\n        _reset__(variableName);\n      });\n    };\n  } else {\n    _maybe_update_export__(variableName, value);\n    if (value === undefined) {\n      rewireData[variableName] = INTENTIONAL_UNDEFINED;\n    } else {\n      rewireData[variableName] = value;\n    }\n    return function () {\n      _reset__(variableName);\n    };\n  }\n}\nfunction _reset__(variableName) {\n  let rewireData = _getRewiredData__();\n  delete rewireData[variableName];\n  if (Object.keys(rewireData).length == 0) {\n    delete _getRewireRegistry__()[_getRewireModuleId__];\n  }\n  if (_exports_to_reset__.has(variableName)) {\n    exports[variableName] = _exports_to_reset__.get(variableName);\n    _exports_to_reset__.delete(variableName);\n  }\n}\nfunction _with__(object) {\n  let rewireData = _getRewiredData__();\n  var rewiredVariableNames = Object.keys(object);\n  var previousValues = {};\n  function reset() {\n    rewiredVariableNames.forEach(function (variableName) {\n      rewireData[variableName] = previousValues[variableName];\n    });\n  }\n  return function (callback) {\n    rewiredVariableNames.forEach(function (variableName) {\n      previousValues[variableName] = rewireData[variableName];\n      rewireData[variableName] = object[variableName];\n    });\n    let result = callback();\n    if (!!result && typeof result.then == 'function') {\n      result.then(reset).catch(reset);\n    } else {\n      reset();\n    }\n    return result;\n  };\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_RewireAPI__);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@c3/ui/UiSdlDataRedux.ts_uiInfrastructure\n");

/***/ })

}]);